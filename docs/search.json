[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Motivation",
    "section": "",
    "text": "Throughout my career as a consultant in multilateral and governmental institutions, I have been exposed to the phenomenon of buzzwords1, catchphrases2 and slogans3, and to how they suddenly emerge in policy discussions, and—at least for some time—take center stage in strategic planning.\nNotably, in the organizations I worked with (including World Bank, Inter-American Development Bank, G20, EU, and the Italian Government) catchphrases and slogans often turn into significant funding allocations, as they can steer the prioritization of policies and programs.\n\n\nSome examples I can recall (drawing on my own experience in economic development policy work) are: South-South Cooperation, Gender Mainstreaming, and Results-Based Financing, which were prominent in earlier periods. More recently, concepts such as Sustainable Development4 and ESG (criteria/reporting/issues) have become quintessential to the development discourse. Understandably, constructs like Build Back Better and Resilient (institutions/infrastructure/communities) have gained traction, especially as part of the legacy of the COVID-19 crisis.\nI’ve noticed how these formulaic expressions would make their way into project documentation and policy papers, quickly gaining prominence—and sometimes becoming pervasive—in both academic and professional discourse.\nThis has led me to question whether such phrases in policy discourse are deliberately chosen with careful intent or if they gain traction almost inadvertently, becoming a convenient shorthand for complex ideas. The latter shouldn’t be surprising. After all, humans rely on mental (and perhaps linguistic) shortcuts to make sense of the world. Recent studies in psychology and behavioral economics explore heuristics, the cognitive strategies people use to simplify decision-making.5 Furthermore, we are now exposed to the paradoxical effect of social media and its recommendation algorithms: rather than broadening our exposure to information, they often restrict it, reinforcing the echo chamber effect.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA further element that interests me is when the meaning of words and phrases progressively detaches from reality and/or from their original intent, sometimes even adopting new reinterpreted meanings that gradually become the dominant interpretation—whether explicitly or subtly. For example, I was struck to learn that the Latin motto I heard as a child—“Mens sana in corpore sano”—is actually a partial quotation adopted in 1861 by John Hulley for his Liverpool Athletic Club. The phrase actually quoted Juvenal’s “Orandum est ut sit mens sana in corpore sano” from Satire X (Juvenal 2004, 10.354–357), which, seen in its entirety, has a whole different meaning!\n Such reductions have real consequences, as Giovanni Gentile notes: “language is not a garment of thought; it is thought’s own body” (Garbini 2003, p3, quoting “Sommario di pedagogia come scienza filosofica”). Language doesn’t merely communicate ideas but shapes and defines them.  Luca D’Auria similarly asserts that “language is performative,” as it colors, alters, and produces reality (D’Auria 2024). While language help us categorize, it can also divide—separating good from bad, truth from falsehood, etc. Knowledge itself, much to the dismay of proponents of political correctness, depends on clear categories to distinguish and define the realities we discuss.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFor a while now, I have wondered why and how certain catchphrases/slogans/buzzwords become so prevalent in a given public policy context at some specific point in time.\nThe problem is that if you are (as I was) just a cog in very complex institutional machine, it is difficult to capture the complex dynamics of this process.\nTherefore, I decided to investigate this phenomenon with a “reverse engineering” approach, starting from the corpora of documents themselves to see if I could identify some patterns or trends over time. (Head over to this page to see my specific research questions.)\n\n\n\nThe World Bank simply presented, from my point of view, a convenient “study case” because:\n\nIts documents (related to lending projects and other publications) are available and openly accessible.\nThe Bank has a long history and a vast amount of digitized documents, which allows for a longitudinal analysis.\nThe Bank’s sectorial and thematic coverage is very broad, which allows for an interesting analysis.\nLast but not least, I am familiar with the Bank’s documents’ nature, structure and jargon, having worked there for several years.\n\n\n\n\nGet in touch if you have questions, comments or suggestions!\n\n\n\n\n\n    Email"
  },
  {
    "objectID": "index.html#examples-in-the-development-economics-arena",
    "href": "index.html#examples-in-the-development-economics-arena",
    "title": "Motivation",
    "section": "",
    "text": "Some examples I can recall (drawing on my own experience in economic development policy work) are: South-South Cooperation, Gender Mainstreaming, and Results-Based Financing, which were prominent in earlier periods. More recently, concepts such as Sustainable Development4 and ESG (criteria/reporting/issues) have become quintessential to the development discourse. Understandably, constructs like Build Back Better and Resilient (institutions/infrastructure/communities) have gained traction, especially as part of the legacy of the COVID-19 crisis.\nI’ve noticed how these formulaic expressions would make their way into project documentation and policy papers, quickly gaining prominence—and sometimes becoming pervasive—in both academic and professional discourse.\nThis has led me to question whether such phrases in policy discourse are deliberately chosen with careful intent or if they gain traction almost inadvertently, becoming a convenient shorthand for complex ideas. The latter shouldn’t be surprising. After all, humans rely on mental (and perhaps linguistic) shortcuts to make sense of the world. Recent studies in psychology and behavioral economics explore heuristics, the cognitive strategies people use to simplify decision-making.5 Furthermore, we are now exposed to the paradoxical effect of social media and its recommendation algorithms: rather than broadening our exposure to information, they often restrict it, reinforcing the echo chamber effect."
  },
  {
    "objectID": "index.html#the-curious-case-of-lexical-domestication",
    "href": "index.html#the-curious-case-of-lexical-domestication",
    "title": "Motivation",
    "section": "",
    "text": "A further element that interests me is when the meaning of words and phrases progressively detaches from reality and/or from their original intent, sometimes even adopting new reinterpreted meanings that gradually become the dominant interpretation—whether explicitly or subtly. For example, I was struck to learn that the Latin motto I heard as a child—“Mens sana in corpore sano”—is actually a partial quotation adopted in 1861 by John Hulley for his Liverpool Athletic Club. The phrase actually quoted Juvenal’s “Orandum est ut sit mens sana in corpore sano” from Satire X (Juvenal 2004, 10.354–357), which, seen in its entirety, has a whole different meaning!\n Such reductions have real consequences, as Giovanni Gentile notes: “language is not a garment of thought; it is thought’s own body” (Garbini 2003, p3, quoting “Sommario di pedagogia come scienza filosofica”). Language doesn’t merely communicate ideas but shapes and defines them.  Luca D’Auria similarly asserts that “language is performative,” as it colors, alters, and produces reality (D’Auria 2024). While language help us categorize, it can also divide—separating good from bad, truth from falsehood, etc. Knowledge itself, much to the dismay of proponents of political correctness, depends on clear categories to distinguish and define the realities we discuss."
  },
  {
    "objectID": "index.html#so-what",
    "href": "index.html#so-what",
    "title": "Motivation",
    "section": "",
    "text": "For a while now, I have wondered why and how certain catchphrases/slogans/buzzwords become so prevalent in a given public policy context at some specific point in time.\nThe problem is that if you are (as I was) just a cog in very complex institutional machine, it is difficult to capture the complex dynamics of this process.\nTherefore, I decided to investigate this phenomenon with a “reverse engineering” approach, starting from the corpora of documents themselves to see if I could identify some patterns or trends over time. (Head over to this page to see my specific research questions.)"
  },
  {
    "objectID": "index.html#why-focus-on-the-world-bank",
    "href": "index.html#why-focus-on-the-world-bank",
    "title": "Motivation",
    "section": "",
    "text": "The World Bank simply presented, from my point of view, a convenient “study case” because:\n\nIts documents (related to lending projects and other publications) are available and openly accessible.\nThe Bank has a long history and a vast amount of digitized documents, which allows for a longitudinal analysis.\nThe Bank’s sectorial and thematic coverage is very broad, which allows for an interesting analysis.\nLast but not least, I am familiar with the Bank’s documents’ nature, structure and jargon, having worked there for several years.\n\n\n\n\nGet in touch if you have questions, comments or suggestions!\n\n\n\n\n\n    Email"
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Motivation",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nBuzzword: The term probably originated in the 1940s as jargon used in business and marketing circles. More recently, it has taken on the meaning “fashionable jargon”, especially common in business, technology, and politics, where they often signal innovation or forward-thinking but may lack clear, practical applications.↩︎\nCatchphrase: The notion is of a short phrase that will “catch” in the mind of the hearer. The word was used in the 1840s of a line of music that was easy to catch and remember. It describes, in the modern sense, a memorable, often simplistic phrase or expression that becomes widely recognized and associated with a particular individual, group, or concept. It is designed to stick in people’s minds and to evoke a specific idea or emotion, usually through repetition in media, advertising, or popular culture.↩︎\nSlogan: from Gaelic sluagh-ghairm, i.e. “battle cry”, used by Scottish Highland or Irish clans. The metaphoric sense of “distinctive word or phrase used by a political or other group” is attested from 1704. It still carries the connotation of a rallying cry, a motto, or a watchword, deliberately crafted to be persuasive, promote a cause or sell an idea.↩︎\nActually, “sustainable development” was first used in 1987 within the so-called Brundtland Report, titled “Our Common Future”, presented to the World Commission on Environment and Development led by Gro Harlem Brundtland.↩︎\nHeuristics can certainly help us solve problems and speed up our decision-making process, but they can also introduce errors, bias, inaccurate judgment and irrational decision-making.↩︎"
  },
  {
    "objectID": "analysis/01b_WB_project_pdo_EDA.html",
    "href": "analysis/01b_WB_project_pdo_EDA.html",
    "title": "WB Project PDO text EDA",
    "section": "",
    "text": "Warning\n\n\n\n\n\nWORK IN PROGRESS! (Please expect unfinished sections, and unpolished code. Feedback is welcome!)"
  },
  {
    "objectID": "analysis/01b_WB_project_pdo_EDA.html#tbl-illustrative-pdos-text-in-projects-documents",
    "href": "analysis/01b_WB_project_pdo_EDA.html#tbl-illustrative-pdos-text-in-projects-documents",
    "title": "WB Project PDO text EDA",
    "section": "[TBL] Illustrative PDOs text in Projects’ documents",
    "text": "[TBL] Illustrative PDOs text in Projects’ documents\n\n\n\n\n\n\n\n\n\nProject_ID\nProject_Name\nProject_Development_Objective\n\n\n\nP127665\nSecond Economic Recovery Development Policy Loan\nThis development policy loan supports the Government of Croatia’s reform efforts with the aim to: (i) enhance fiscal sustainability through expenditure-based consolidation; and (ii) strengthen investment climate.\n\n\nP069934\nPERNAMBUCO INTEGRATED DEVELOPMENT: EDUCATION QUALITY IMPROVEMENT PROJECT\nThe development objectives of the Pernambuco Integrated Development: Education Quality Improvement Project are to (a) improve the quality, efficiency, and inclusiveness of the public education system; (b) modernize and strengthen the managerial, financial, and administrative capacity of the Secretariat of Education to set policies and guidelines for the sector and deliver public education efficiently; and (c) support the overall state modernization effort through interventions to be carried out in the Secretariat of Education and to be replicated in other state institutions."
  },
  {
    "objectID": "analysis/01b_WB_project_pdo_EDA.html#saved-file-projs_train_t-pdo_train_t",
    "href": "analysis/01b_WB_project_pdo_EDA.html#saved-file-projs_train_t-pdo_train_t",
    "title": "WB Project PDO text EDA",
    "section": "[Saved file projs_train_t & pdo_train_t]",
    "text": "[Saved file projs_train_t & pdo_train_t]\n\n# Load Proj train dataset `projs_train_t`\nprojs_train &lt;- readRDS(\"~/Github/slogan/data/derived_data/projs_train.rds\")  \n\n# Load clean tokenized-PDO dataset `pdo_train_t`\npdo_train_t &lt;- readRDS(here::here(\"data\" , \"derived_data\", \"pdo_train_t.rds\"))"
  },
  {
    "objectID": "analysis/01b_WB_project_pdo_EDA.html#previous-tokenization-and-pos-tagging",
    "href": "analysis/01b_WB_project_pdo_EDA.html#previous-tokenization-and-pos-tagging",
    "title": "WB Project PDO text EDA",
    "section": "Previous Tokenization and PoS Tagging",
    "text": "Previous Tokenization and PoS Tagging\nTypically, one of the first steps in this transformation from natural language to feature, or any of kind of text analysis, is tokenization.\ni) Explain Tokenization\nBreaking units of language into components relevant for the research question is called “tokenization”. Components can be words, n-grams, sentences, etc. or combining smaller units into larger units.\n\nTokenization is a row-wise operation: it changes the number of rows in the dataset.\nThe choices of tokenization\n\nShould words be lower cased?\nShould punctuation be removed?\n\nShould numbers be replaced by some placeholder?\nShould words be stemmed (also called lemmatization)? ☑️\nShould bigrams/multi-word phrase be used instead of single word phrases? ☑️\nShould stopwords (the most common words) be removed? ☑️\nShould rare words be removed? ❌\nShould hyphenated words be split into two words? ❌\n\n\nfor the moment I keep all as conservatively as possible\n\nii) Explain Pos Tagging\nLinguistic annotation is a common for of enriching text data, i.e. adding information about the text that is not directly present in the text itself.\nUpon this, e.g. classifying noun, verb, adjective, etc., one can discover intent or action in a sentence, or scanning “verb-noun” patterns.\nHere I have a training dataset file with:\n\n\n\n\n\n\n\n\n\n\n\nVariable\nType\nProvenance\nDescription\nExample\n\n\n\nproj_id\nchr\noriginal PDO data\n\n\n\n\npdo\nchr\noriginal PDO data\n\n\n\n\nword\nchr\noriginal PDO data\n\nGovernments\n\n\nsid\nint\noutput cleanNLP\nsentence ID\n\n\n\ntid\nchr\noutput cleanNLP\ntoken ID within sentence\n\n\n\ntoken\nchr\noutput cleanNLP\nTokenized form of the token.\ngovernment\n\n\ntoken_with_ws\nchr\noutput cleanNLP\nToken with trailing whitespace\ngovernment\n\n\nlemma\nchr\noutput cleanNLP\nThe base form of the token\ngovernment\n\n\nstem\nchr\noutput SnowballC\nThe base form of the token\ngovern\n\n\nupos\nchr\noutput cleanNLP\nUniversal part-of-speech tag (e.g., NOUN, VERB, ADJ).\n\n\n\nxpos\nchr\noutput cleanNLP\nLanguage-specific part-of-speech tags.\n\n\n\nfeats\nchr\noutput cleanNLP\nMorphological features of the token\n\n\n\ntid_source\nchr\noutput cleanNLP\nToken ID in the source document\n\n\n\nrelation\nchr\noutput cleanNLP\nDependency relation between the token and its head token\n\n\n\npr_name\nchr\noutput cleanNLP\nName of the parent token\n\n\n\nFY_appr\ndbl\noriginal PDO data\n\n\n\n\nFY_clos\ndbl\noriginal PDO data\n\n\n\n\nstatus\nchr\noriginal PDO data\n\n\n\n\nregionname\nchr\noriginal PDO data\n\n\n\n\ncountryname\nchr\noriginal PDO data\n\n\n\n\nsector1\nchr\noriginal PDO data\n\n\n\n\ntheme1\nchr\noriginal PDO data\n\n\n\n\nlendinginstr\nchr\noriginal PDO data\n\n\n\n\nenv_cat\nchr\noriginal PDO data\n\n\n\n\nESrisk\nchr\noriginal PDO data\n\n\n\n\ncurr_total_commitment\ndbl\noriginal PDO data\n\n\n\n\n\n\n\n— PoS Tagging: upos (Universal Part-of-Speech)\n\n\n\n\nupos\nn\npercent\nexplan\n\n\n\nADJ\n21261\n0.0852623\nAdjective\n\n\nADP\n27050\n0.1084777\nAdposition\n\n\nADV\n2950\n0.0118303\nAdverb\n\n\nAUX\n3588\n0.0143888\nAuxiliary\n\n\nCCONJ\n14236\n0.0570902\nCoordinating conjunction\n\n\nDET\n21505\n0.0862408\nDeterminer\n\n\nINTJ\n57\n0.0002286\nInterjection\n\n\nNOUN\n70752\n0.2837344\nNoun\n\n\nNUM\n2190\n0.0087825\nNumeral\n\n\nPART\n8691\n0.0348532\nParticle\n\n\nPRON\n2330\n0.0093439\nPronoun\n\n\nPROPN\n14856\n0.0595765\nProper noun\n\n\nPUNCT\n28393\n0.1138635\nPunctuation\n\n\nSCONJ\n2160\n0.0086622\nSubordinating conjunction\n\n\nSYM\n316\n0.0012672\nSymbol\n\n\nVERB\n25806\n0.1034889\nVerb\n\n\nX\n3219\n0.0129090\nOther\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\n\nOn random visual check, these are not always correct, but they are a good starting point for now.\n\n\n\niii) Custom Stopwords\nRemove stop words, which are the most common words in a language.\n\nbut I don’t want to remove any meaningful word for now\n\n\n# Custom list of articles, prepositions, and pronouns\ncustom_stop_words &lt;- c(\n   # Articles\n   \"the\", \"a\", \"an\",   \n   \"and\", \"but\", \"or\", \"yet\", \"so\", \"for\", \"nor\", \"as\", \"at\", \"by\", \"per\",  \n   # Prepositions\n   \"of\", \"in\", \"on\", \"at\", \"by\", \"with\", \"about\", \"against\", \"between\", \"into\", \"through\", \n   \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \"under\",\n   \"over\", \"again\", \"further\", \"then\", \"once\",  \n   # Pronouns\n   \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\",\n   \"yours\", \"yourself\", \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \n   \"hers\", \"herself\", \"it\", \"its\", \"itself\", \"they\", \"them\", \"their\", \"theirs\", \"themselves\" ,\n   \"this\", \"that\", \"these\", \"those\", \"which\", \"who\", \"whom\", \"whose\", \"what\", \"where\",\n   \"when\", \"why\", \"how\", \"all\", \"any\", \"both\", \"each\", \"few\", \"more\", \"most\", \"other\",\n   # \"some\", \"such\", \"no\",  \"not\", \n   # \"too\", \"very\",   \n   # verbs\n   \"is\", \"are\", \"would\", \"could\", \"will\", \"be\", \"e.g\", \"e.g.\", \"i.e.\",\n   \"i\", \"ii\", \"iii\", \"iv\", \"v\",\n   # because tautology\n   \"pdo\"\n)\n\n# Convert to a data frame if needed for consistency with tidytext\ncustom_stop_words_df &lt;- tibble(word = custom_stop_words)\n\n\nsaveRDS(custom_stop_words, here(\"data\" , \"derived_data\", \"custom_stop_words.rds\"))\nsaveRDS(custom_stop_words_df, here(\"data\" , \"derived_data\", \"custom_stop_words_df.rds\"))\n\niv) Stemming\nOften documents contain different versions of one base word, often called a stem. Stemming is the process of reducing words to their base or root form.\nSnowball is one framework released in 1980 with an open-source license that can be found in R package SnowballC.\n\n# Using `SnowballC::wordStem` to stem the words. e.g.\npdo_train_t &lt;- pdo_train_t %&gt;% \n   mutate(stem = SnowballC::wordStem(token_l)) %&gt;%\n   relocate(stem, .after = lemma)\n\nWhy Stemming?: For example, in topic modeling, stemming reduces noise by making it easier for the model to identify core topics without being distracted by grammatical variations. (Lemmatization is more computationally intensive as it requires linguistic context and dictionaries, making it slower, especially on large datasets)\n\n\nToken\nLemma\nStem\n\n\n\ndevelopment\ndevelopment\ndevelop\n\n\nquality\nquality\nqualiti\n\n\nhigh-quality\nhigh-quality\nhigh-qual\n\n\ninclude\ninclude\ninclud\n\n\nlogistics\nlogistic\nlogist\n\n\ngovernment/governance\nGovernemnt/government/governance\ngovern\n\n\n\n\nNOTE: Among word / stems encountered in PDOs, there are a lot of acronyms which may refer to World Bank lingo, or local agencies, etc… Especially when looked at in low case form they don’t make much sense…\n\nNotes on sparsity\nSparsity in the context of a document-term matrix refers to the proportion of cells in the matrix that contain zeros. High sparsity means that most terms do not appear in most documents.\n\nremoving stopwords before stemming can reduce sparsity\n\ntidytext::cast_tdm turns a “tidy” one-term-per-document-per-row data frame into a Document-Term Matrix (DTM) from the tm package.\n\nthis dataset contains 4403 documents (each of them a PDO) and 11029 terms (distinct words). Notice that this DTM is 100% sparse (100% of document-word pairings are zero, bc most pairings of document and term do not occur (they have the value zero).\n\n\n\n\n# create document-word matrix\nDTM &lt;- pdo_train_t %&gt;% \n   anti_join(custom_stop_words_df, by = c(\"token_l\" = \"word\")) %&gt;% \n   count(proj_id, token_l) %&gt;%\n   tidytext::cast_dtm(proj_id, token_l, n) # HIGH!!!\n\nDTM\n# &lt;&lt;DocumentTermMatrix (documents: 4403, terms: 11029)&gt;&gt;\n# Non-/sparse entries: 129940/48430747\n# Sparsity           : 100%\n# Maximal term length: 34\n# Weighting          : term frequency (tf)\n\nv) Document-term matrix or TF-IDF\n\nThe tf-idf is the product of the term frequency and the inverse document frequency::\n\n\\[\n\\begin{aligned}\ntf(\\text{term}) &= \\frac{n_{\\text{term}}}{n_{\\text{terms in document}}} \\\\\nidf(\\text{term}) &= \\ln{\\left(\\frac{n_{\\text{documents}}}{n_{\\text{documents containing term}}}\\right)} \\\\\ntf\\text{-}idf(\\text{term}) &= tf(\\text{term}) \\times idf(\\text{term})\n\\end{aligned}\n\\]\n— TF-IDF matrix on train pdo\n\n# reduce size \n\npdo_train_4_tf_idf &lt;- pdo_train_t %&gt;% # 255964\n   # Keep only content words [very restrictive for now]\n   # normally c(\"NOUN\", \"VERB\", \"ADJ\", \"ADV\")\n   filter(upos %in% c(\"NOUN\")) %&gt;% #    72,668 \n   filter(!token_l %in% c(\"development\", \"objective\", \"project\")) %&gt;%   #  66,741\n   # get rid of stop words (from default list)   \n   filter(!token_l %in% custom_stop_words_df$word) %&gt;%   #  66,704\n   # Optional: Remove lemmas of length 1 or shorter\n   filter(nchar(lemma) &gt; 1)  #  66,350\n\nNow, count the occurrences of each lemma for each document. (This is the term frequency or tf)\n\n# This is the term frequency or `tf`\n\n# Count lemmas per document\nlemma_counts &lt;- pdo_train_4_tf_idf %&gt;%\n  count(proj_id, lemma, sort = TRUE)\n# Preview the result\nhead(lemma_counts) \n\nWith the lemma counts prepared, the bind_tf_idf() function from the tidytext package computes the TF-IDF scores.\n\n# Compute the TF-IDF scores\nlemma_tf_idf &lt;- lemma_counts %&gt;%\n  bind_tf_idf(lemma, proj_id, n) %&gt;%\n  arrange(desc(tf_idf))\n\nhead(lemma_tf_idf)\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nWhat to use: token, lemma, or stem?\nGeneral Preference in Real-World NLP:\n\n\nTokens for analyses where word forms matter or for sentiment analysis.\n\nLemmas (*) for most general-purpose NLP tasks where you want to reduce dimensionality while maintaining accuracy and clarity of meaning.\n\nStems for very large datasets, search engines, and applications where speed and simplicity are more important than linguistic precision.\n\n(*) I use lemma, after “aggressively” reducing the number of words to consider, and removing stop words (at least for now)."
  },
  {
    "objectID": "analysis/01b_WB_project_pdo_EDA.html#term-frequency",
    "href": "analysis/01b_WB_project_pdo_EDA.html#term-frequency",
    "title": "WB Project PDO text EDA",
    "section": "Term frequency",
    "text": "Term frequency\nNote: normally, the most frequent words are function words (e.g. determiners, prepositions, pronouns, and auxiliary verbs), which are not very informative. Moreover, even content words (e.g. nouns, verbs, adjectives, and adverbs) can often be quite generic semantically speaking (e.g. “good” may be used for many different things).\nHowever, in this analysis, I do not use the STOPWORD approach, but use the POS tags to reduce – in a more controlled way – the dataset, filtering the content words such as nouns, verbs, adjectives, and adverbs.\n[FUNC] save plot Ouptput\nPointless bc does not render in the HTML output.\n[FUNC] save plot Object\n[FIG] Overall token freq ggplot\n\nExcluding “project” “develop”,“objective”\n\nIncluding only “content words” (NOUN, VERB, ADJ, ADV)\n\n\n# Evaluate the title with glue first\ntitle_text &lt;- glue::glue(\"Most frequent TOKEN in {n_distinct(pdo_train_t$proj_id)} PDOs from projects approved between FY {min(pdo_train_t$FY_appr)}-{max(pdo_train_t$FY_appr)}\") \n\npdo_wrd_freq &lt;- pdo_train_t %&gt;%   # 123,927\n   # include only content words\n   filter(upos %in% c(\"NOUN\", \"VERB\", \"ADJ\", \"ADV\")) %&gt;%\n   #filter (!(upos %in% c(\"AUX\",\"CCONJ\", \"INTJ\", \"DET\", \"PART\",\"ADP\", \"SCONJ\", \"SYM\", \"PART\", \"PUNCT\"))) %&gt;%\n   filter (!(relation %in% c(\"nummod\" ))) %&gt;% # 173,686 \n filter (!(token_l %in% c(\"pdo\",\"project\", \"development\", \"objective\",\"objectives\", \"i\", \"ii\", \"iii\",\n                          \"is\"))) %&gt;% # whne it is VERB\n   count(token_l) %&gt;% \n   filter(n &gt; 800) %&gt;% \n   mutate(token_l = reorder(token_l, n))   # reorder values by frequency\n\n# plot \npdo_wrd_freq_p &lt;- pdo_wrd_freq %&gt;% \n   ggplot(aes(token_l, n)) +\n   geom_col(fill = \"#d7b77b\") +\n   scale_y_continuous(breaks = seq(0, max(pdo_wrd_freq$n), by = 400)) + # directly use 'n' instead of .data$n\n   coord_flip() + # flip x and y coordinates so we can read the words better\n   labs(#title = title_text,\n      subtitle = \"[TOKEN with count &gt; 800]\", y = \"\", x = \"\")+\n   geom_hline(yintercept = 800, linetype = \"dashed\", color = \"#873c4a\") +\n   lulas_theme +\n   theme(# Adjust angle and alignment of x labels\n      axis.text.x = element_text(angle = 45, hjust = 1)) \n\n[FIG] Overall stem freq ggplot\n\nWithout “project” “develop”,“objective”\n\nIncluding only “content words” (NOUN, VERB, ADJ, ADV)\n\n\n# Evaluate the title with glue first\ntitle_text &lt;- glue::glue(\"Most frequent STEM in {n_distinct(pdo_train_t$proj_id)} PDOs from projects approved between FY {min(pdo_train_t$FY_appr)}-{max(pdo_train_t$FY_appr)}\") \n\n# Plot\npdo_stem_freq &lt;- pdo_train_t %&gt;%   # 256,632\n   # include only content words\n   filter(upos %in% c(\"NOUN\", \"VERB\", \"ADJ\", \"ADV\")) %&gt;%\n   filter (!(relation %in% c(\"nummod\" ))) %&gt;% # 173,686 \n   filter (!(stem %in% c(\"pdo\", \"project\", \"develop\", \"object\", \"i\", \"ii\", \"iii\"))) %&gt;%\n   count(stem) %&gt;% \n   filter(n &gt; 800) %&gt;%\n   mutate(stem = reorder(stem, n))    # reorder values by frequency\n   \n# plot \npdo_stem_freq_p &lt;-    pdo_stem_freq %&gt;% \n   ggplot(aes(stem, n)) +\n   geom_col(fill = \"#d7b77b\") +\n   scale_y_continuous(breaks = seq(0, max(pdo_stem_freq$n), by = 400)) + # directly use 'n' instead of .data$n\n   coord_flip() + # flip x and y coordinates so we can read the words better\n   labs(#title = title_text,\n      subtitle = \"[STEM with count &gt; 800]\", y = \"\", x = \"\") +\n   geom_hline(yintercept = 800, linetype = \"dashed\", color = \"#873c4a\") +\n   lulas_theme +\n   theme(# Adjust angle and alignment of x labels\n      axis.text.x = element_text(angle = 45, hjust = 1)) \n\n\nEvidently, after stemming, more words (or stems) reach the threshold frequency count of 800 (they have been combined by root).\n\n[FIG] token + stem freq ggplot\n\ntitle2_text &lt;- glue::glue(\"Most frequent TOKEN & STEM in {n_distinct(pdo_train_t$proj_id)} PDOs\") \n\nsubtitle2_text &lt;- glue::glue(\"From projects approved between FY {min(pdo_train_t$FY_appr)}-{max(pdo_train_t$FY_appr)}\") \n\ncombo_freq_p &lt;-  pdo_wrd_freq_p + pdo_stem_freq_p + \n   plot_annotation(title = title2_text,\n                    subtitle = subtitle2_text,\n                   # caption = \"Source: World Bank Project Documents\",\n                   theme = theme(plot.title = element_text(size = 12, face = \"bold\"),\n                                 plot.subtitle = element_text(size = 10, face = \"italic\"),\n                                 plot.caption = element_text(size = 10, face = \"italic\"))\n                   )  \n\ncombo_freq_p\n\n\n\n\n\n\n\n\n#f_save_plot(\"combo_freq_p\", combo_freq_p)\nf_save_plot_obj(combo_freq_p, \"combo_freq_p\")"
  },
  {
    "objectID": "analysis/01b_WB_project_pdo_EDA.html#sector-related-term-frequency",
    "href": "analysis/01b_WB_project_pdo_EDA.html#sector-related-term-frequency",
    "title": "WB Project PDO text EDA",
    "section": "SECTOR-related term frequency",
    "text": "SECTOR-related term frequency\nIsolate SECTOR words and see frequency over years\nTo try and make it a bit more meaningful, let’s focus on the frequency of the most common words related to SECTORS.\nFrom token_l, I created a “broad SECTOR” variable to group the sectors in broader definitions:\n\n\nWAT_SAN = water|wastewater|sanitat|Sewer|sewage|Irrigat|Drainag|river basin|groundwater\n\nTRANSPORT = transport|railway|road|airport|waterway|bus|metropolitan|inter-urban|aviation|highway|transit|bridge|port\n\nURBAN = urban|housing|inter-urban|peri-urban|waste manag|slum|city|megacity|intercity|inter-city|town\n\nENERGY = energ|electri|hydroele|hydropow|renewable|transmis|grid|transmission|electric power|geothermal|solar|wind|thermal|nuclear power|energy generation\n\nHEALTH = health|hospital|medicine|drugs|epidem|pandem|covid-19|vaccin|immuniz|diseas|malaria|HIV|AIDS|TB|maternal|clinic|nutrition\n\nEDUCATION = educat|school|vocat|teach|univers|student|literacy|training|curricul|pedagog\n\nAGR_FOR_FISH (Agriculture, Forestry, Fishing) = Agricultural|Agro|Fish|Forest|Crop|livestock|fishery|land|soil\n** MINING_OIL_GAS** = Minin|oil|gas|mineral|quarry|extract|coal|natural gas|mine|petroleum|hydrocarbon\n\nSOCIAL_PROT = Social Protec|social risk|social assistance|living standard|informality|insurance|social choesion|gig economy|human capital|employment|unemploy|productivity|wage lev|intergeneration|lifelong learn|vulnerab|empowerment|sociobehav\n\nFINANCIAL = Bank|finan|Investment|credit|microfinan|loan|financial stability|banking|financial intermed|fintech\n\nICT = Information|Communication|ICT|Internet|telecom|cyber|data|AI|artificial intelligence|blockchain|e-learn|e-commerce|platform|software|hardware|digital\n\nIND_TRADE_SERV = Industry|Trade|Service|manufactur|Tourism|Trade and Services|market|export|import|supply chain|logistic|distribut|e-commerce|retail|wholesale|trade facilitation|trade policy|trade agreement|trade barrier|trade finance|trade promotion|trade integration|trade liberalization|trade balance|trade deficit|trade surplus|trade war|trade dispute|trade negotiation|trade cooperation|trade relation|trade partner|trade route|trade corridor\n\n“INSTIT_SUPP” = Government|Public Admin|Institution|Central Agenc|Sub-national Gov|law|justice|governance|Policy|Regulation|Public Expenditure|Public Investment|Public Procurement\n\n“GENDER_EQUAL” = Gender|Women|Girl|Woman|femal|Gender Equal|gender-base|gender inclus|gender mainstream|gender sensit|gender respons|gender gap|gender-based|gender-sensitive|gender-responsive|gender-transform|gender-equit|gender-balance\n\n“CLIMATE” = Climate|Environment|Sustain|Resilience|Adaptation|Mitigation|Green|Eco|Eco-|carbon|carbon cycle|carbon dioxide|climate change|ecosystem|emission|energy effic|greenhouse|greenhouse gas|temperature anomalies|zero net|green growth|low carbon|climate resilient|climate smart|climate tech|climate variab\n\n\npdo_train_t &lt;- pdo_train_t %&gt;%\n   # dealing with water/watershed/waterway\n   mutate(tok_sector_broad = case_when(\n      stringr::str_detect(token_l, regex(\"water|wastewater|sanitat|Sewer|sewage|Irrigat|Drainag|river basin|groundwater\", ignore_case = T)) ~ \"WAT_SAN\",\n      stringr::str_detect(token_l, regex(\"transport|railway|road|airport|waterway|bus|metropolitan|inter-urban|aviation|highway|transit|bridge|port\", ignore_case = T)) ~ \"TRANSPORT\",\n      stringr::str_detect(token_l, regex(\"urban|housing|inter-urban|peri-urban|waste manag|slum|city|megacity|intercity|inter-city|town\", ignore_case = T)) ~ \"URBAN\",\n      stringr::str_detect(token_l, regex(\"energ|electri|hydroele|hydropow|renewable|transmis|grid|transmission|electric power|geothermal|solar|wind|thermal|nuclear power|energy generation\", ignore_case = T)) ~ \"ENERGY\",   \n      stringr::str_detect(token_l, regex(\"health|hospital|medicine|drugs|epidem|pandem|covid-19|vaccin|immuniz|diseas|malaria|HIV|AIDS|TB|maternal|clinic|nutrition\", ignore_case = T))  ~ \"HEALTH\",\n      stringr::str_detect(token_l, regex(\"educat|school|vocat|teach|univers|student|literacy|training|curricul|pedagog\", ignore_case = T)) ~ \"EDUCATION\",\n      # not infra \n      stringr::str_detect(token_l, regex(\"Agricultural|Agro|Fish|Forest|Crop|livestock|fishery|land|soil\", ignore_case = T)) ~ \"AGR_FOR_FISH\",\n      stringr::str_detect(token_l, regex(\"Minin|oil|gas|mineral|quarry|extract|coal|natural gas|mine|petroleum|hydrocarbon\", ignore_case = T)) ~ \"MINING_OIL_GAS\",\n      stringr::str_detect(token_l, regex(\"Social Protec|social risk|social assistance|living standard|informality|insurance|social choes|gig economy|human capital|employment|unemploy|productivity|wage lev|intergeneration|lifelong learn|vulnerab|empowerment|sociobehav\", ignore_case = T)) ~ \"SOCIAL_PROT\",\n      stringr::str_detect(token_l, regex(\"Bank|finan|Investment|credit|microfinan|loan|financial stability|banking|financial intermed|fintech\", ignore_case = T)) ~ \"FINANCIAL\",\n      stringr::str_detect(token_l, regex(\"Information|Communication|ICT|Internet|telecom|cyber|data|AI|artificial intelligence|blockchain|e-learn|platform|software|hardware|digital\", ignore_case = T)) ~ \"ICT\",\n      stringr::str_detect(token_l, regex(\"Industry|Trade|Service|manufactur|Tourism|Trade and Services|market|export|import|supply chain|logistic|distribut|e-commerce|retail|wholesale|trade facilitation|trade policy|trade agreement|trade barrier|trade finance|trade promotion|trade integration|trade liberalization|trade balance|trade deficit|trade surplus|trade war|trade dispute|trade negotiation|trade cooperation|trade relation|trade partner|trade route|trade corridor\", ignore_case = T)) ~ \"IND_TRADE_SERV\",\n      stringr::str_detect(token_l, regex(\"Government|Public Admin|Institution|Central Agenc|Sub-national Gov|law|justice|governance|Policy|Regulation|Public Expenditure|Public Investment|Public Procurement\", ignore_case = T)) ~ \"INSTIT_SUPP\",\n      stringr::str_detect(token_l, regex(\"Gender|Women|Girl|Woman|femal|Gender Equal|gender-base|gender inclus|gender mainstream|gender sensit|gender respons|gender gap|gender-based|gender-sensitive|gender-responsive|gender-transform|gender-equit|gender-balance\", ignore_case = T)) ~  \"GENDER_EQUAL\" ,\n            stringr::str_detect(token_l, regex(\"Climate chan|Environment|Sustain|Resilience|Adaptation|Mitigation|Green|Eco|Eco-|carbon|carbon cycle|carbon dioxide|climate change|ecosystem|emission|energy effic|greenhouse|greenhouse gas|temperature anomalies|zero net|green growth|low carbon|climate resilient|climate smart|climate tech|climate variab\", ignore_case = T)) ~ \"CLIMATE\" ,\n      TRUE ~ NA_character_)) %&gt;% \n   relocate(tok_sector_broad, .after = token_l) # move the new column to the right of token_l\n\nData prep for sector plots\n\ntabyl(pdo_train_t$tok_sector_broad)\n\n# Create a custom color list for each sector\nsector_colors &lt;- c(\n   \"WAT_SAN\" = \"#26BDE2\",  # SDG 6\n   \"ENERGY\" = \"#FCC30B\", # 7SDG \n   \"MINING_OIL_GAS\" = \"#23399b\", # no SDG! \n   \"URBAN\" = \"#FD9D24\", # SDG 11\n   \"ICT\" = \"#0f7184\",    # no SDG!\n   \"HEALTH\" = \"#4C9F38\", # SDG 3\n   \"EDUCATION\" = \"#C5192D\", # SDG 4\n   # SDGS \n   \"POVERTY\" = \"#E5243B\", # SDG 1\n   \"ZERO_HUNGER\" = \"#DDA63A\", # SDG 2\n   \"GENDER_EQUAL\" = \"#FF3A21\", # SDG 5\n   \"WORK\" = \"#A21942\", # SDG 8\n   \"INDUSTRY\" = \"#FD9D24\", # SDG 9\n   \"INEQUALITY\" =  \"#DD1367\", # SDG 10\n   \"CONSUMPTION\" = \"#BF8B2E\", # SDG 12\n   \"CLIMATE\" = \"#3F7E44\", # SDG 13\n   \"OCEANS\" = \"#0A97D9\", # SDG 14\n   \"BIODIVERSITY\" = \"#56C02B\", # SDG 15\n   \"PEACE\" = \"#00689D\", # SDG 16\n   \"PARTNERSHIP\" = \"#19486A\", # SDG 17\n   # MINE\n   \"TRANSPORT\" =  \"#A6A6A6\", \n   \"AGR_FOR_FISH\" = \"#56C02B\" , \n   \"SOCIAL_PROT\" = \"#e28293\", \n   \"FINANCIAL\" =  \"#e60066\",\n   \"IND_TRADE_SERV\" = \"#85239b\",\n   \"INSTIT_SUPP\" = \"#49239b\"\n   )\n\n# prepare data for plotting (count)\nsector_broad_pdo &lt;- pdo_train_t %&gt;% \n   filter(!is.na(tok_sector_broad)) %&gt;% \n   filter(tok_sector_broad %in% c(\"WAT_SAN\", \"ENERGY\", \"TRANSPORT\", \"URBAN\", \"MINING_OIL_GAS\", \"ICT\", \"HEALTH\", \"EDUCATION\", \n                                  # not infrastructure\n                                  \"AGR_FOR_FISH\", \"GENDER_EQUAL\", \"CLIMATE\",  \"SOCIAL_PROT\", \"FINANCIAL\", \"IND_TRADE_SERV\", \"INSTIT_SUPP\" )) %&gt;%\n   count(tok_sector_broad, FY_appr) %&gt;% \n   #filter(n &gt; 0) %&gt;% \n   mutate(tok_sector_broad = factor(tok_sector_broad, levels = c(\n      \"WAT_SAN\", \"ENERGY\", \"TRANSPORT\",\"URBAN\",\"MINING_OIL_GAS\",\"ICT\", \"HEALTH\", \"EDUCATION\",\n      # not infrastructure\n       \"AGR_FOR_FISH\", \"GENDER_EQUAL\", \"CLIMATE\",  \"SOCIAL_PROT\", \"FINANCIAL\", \"IND_TRADE_SERV\", \"INSTIT_SUPP\"))) # reorder values by frequency\n#df$FY\n\n[FIG] faceted sector (tok_sector_broad) freq ggplot\n\n# Evaluate the title with glue first\ntitle_text &lt;- glue::glue(\"Sector words frequency in PDO over FY {min(pdo_train_t$FY_appr)}-{max(pdo_train_t$FY_appr)}\") \n\n# Plot\npdo_sect_broad_freq &lt;- sector_broad_pdo %&gt;% \n   # only the \"original group\n  filter(tok_sector_broad %in% c(\"WAT_SAN\", \"ENERGY\", \"TRANSPORT\", \"URBAN\", \"MINING_OIL_GAS\", \"ICT\", \"HEALTH\", \"EDUCATION\" )) %&gt;% \n   ggplot(.,\n          aes(x = FY_appr, y = n, \n              group = tok_sector_broad, color = tok_sector_broad)) +\n   geom_line(linetype = \"dotted\", alpha = 0.5, size = 1) +\n   geom_point(size = 2) +\n   scale_x_continuous(breaks =  seq(2001, 2023, by=  1)) +\n   scale_y_continuous(breaks =  seq(0,300, by=  25)) +\n   # ~ SDG colors \n    # scale_color_viridis_d(option = \"magma\", end = 0.9) + \n   scale_color_manual(values = sector_colors) +\n   facet_wrap(~tok_sector_broad, ncol = 3, scales = \"free\")+ \n   guides(color = FALSE) +\n   lulas_theme +\n   theme(# Adjust angle and alignment of x labels\n      axis.text.x = element_text(angle = 45, hjust = 1)) + \n   labs(title = \"Sector words frequency in PDOs by fiscal years of approval\",\n        subtitle = \"[Using \\\"custom\\\" broad sector definition]\",\n        x =  \"\",# \"Board approval FY\", \n        y = \"\"#\"Counts of 'sector' word (tok_sector_broad)\"\n   ) + \n   # Add the reference line at y = 50, red, dashed, and transparent (50% opacity)\n   geom_hline(yintercept = 50, linetype = \"longdash\", color = \"#d02e4c\", alpha = 0.40)   \n   # geom_vline(data = subset(sector_broad_pdo, tok_sector_broad == \"HEALTH\"), \n   #            aes(xintercept = 2020), \n   #            linetype = \"solid\", color = \"#9b6723\",alpha = 0.35) +\n   # geom_text(data = subset(sector_broad_pdo, tok_sector_broad == \"HEALTH\"), \n   #           aes(x = 2020, y = max(sector_broad_pdo$n)*0.65, label = \"Covid\"), \n   #           angle = 90, vjust = -0.5, color = \"#9b6723\") \n\npdo_sect_broad_freq\n\n\n\n\n\n\n\n[FUNC] Figure split sector (tok_sector_broad) freq ggplot\n\n# --- Get a LIST of unique sectors (facets) and split the data\nPDOsector_list &lt;- base::split(x = sector_broad_pdo, f = sector_broad_pdo$tok_sector_broad)\n\n# --- Create a function to plot for each sector with custom colors\nf_plot_sector &lt;- function(data) {\n   # Get the sector name\n   sector &lt;- unique(data$tok_sector_broad)\n   # Create the plot\n   p &lt;-ggplot(data = data, \n              aes(x = FY_appr, y = n, \n                  group = tok_sector_broad, color = tok_sector_broad)) +\n      # By sector ... \n      geom_line(color = sector_colors[sector], linetype = \"dotted\", alpha = 0.5, size = 1) +   \n      geom_point(color = sector_colors[sector], size = 3) +               \n      scale_x_continuous(breaks = seq(2001, 2023, by = 1)) +\n      scale_y_continuous(breaks = seq(0, max(data$n), by = 25)) +\n      # custom\n      lulas_theme + \n      theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n      labs(\n         title = paste(\"\\\"\",sector,\"\\\" in PDOs by fiscal years of approval\"),  # Use facet-specific title\n         subtitle = \"[Using a \\\"custom\\\" broad sector definition &\\nshowing relevant WDR publication(s)]\",\n         x = \"\", \n         y = \"\"  # Remove y-axis label\n      ) +\n      # Ensure y-axis limit includes 50\n      expand_limits(y = 50) + \n      # Add the reference line at y = 50, red, dashed, and transparent (50% opacity)\n      geom_hline(yintercept = 50, linetype = \"longdash\", color = \"#d02e4c\", alpha = 0.75)\n   # # Add vline and text annotation only for the HEALTH sector\n   if (sector == \"HEALTH\") {\n      p &lt;- p +\n         geom_vline(aes(xintercept = 2020), linetype = \"solid\", color = \"#9b6723\",alpha = 0.35) +\n         geom_text(aes(x = 2020, y = max(n) * 0.75, label = \"Covid\"),\n                   angle = 90, vjust = -0.5, color = \"#9b6723\")\n   }\n\n   return(p)\n}\n\n\n# --- Use purrr::map to create a LIST of plots, one for each sector\nsector_plots &lt;- map(PDOsector_list, f_plot_sector)\n\n# --- (exe) Extract the first plot to display\n#sector_plots$HEALTH\n\n# ---- Optionally print each plot to the console\n#walk(sector_plots, print)\n\n\n# Define the output directory using the 'here' function\noutput_dir &lt;- here(\"analysis\", \"output\", \"figures\")\n\n## Save each plot to a file in the specified directory\n#walk2(sector_plots, names(PDOsector_list), \n#      ~ggsave(filename = file.path(output_dir, paste0(.y, \"_sector_plot.png\")), plot = .x))\n\n# Save iteratively the plots' objects as RDS files\nwalk2(sector_plots, names(PDOsector_list), \n      ~f_save_plot_obj(.x, paste0(\"pdo_\", .y, \"_sect_p\")))\n\n#pdo_FINANCIAL_sect_p"
  },
  {
    "objectID": "analysis/01b_WB_project_pdo_EDA.html#sector-in-pdo-v.-wdr-publications",
    "href": "analysis/01b_WB_project_pdo_EDA.html#sector-in-pdo-v.-wdr-publications",
    "title": "WB Project PDO text EDA",
    "section": "SECTOR in PDO v. WDR publications",
    "text": "SECTOR in PDO v. WDR publications\nFor the (broadly defined) HEALTH sector, it is quite clear that Covid-19 is the main driver of the peak in 2020.\nWhat about the other sectors? I was struck by the fact that, observing PDOs over time, the broadly defined “sector term” in the PDO always presents at least one peak and I wonder what could trigger it.\nOne possible explanation is that the PDOs somehow reflect the topics discussed by the World Development Reports (WDR) published annually by the World Bank. The WDR is a flagship publication of the World Bank that provides in-depth analysis of a specific aspect of development.\nIt is important to remark that these publications are not some speculative research endeavor, as they are deeply rooted in the concrete information that the Bank retrieves on the ground from projects and operations as they are supported and evaluated. In turn, the WDRs themselves inform the Bank’s policy priorities and operational strategies.\nTherefore, it is reasonable to expect some kind of correlation between the topics discussed in the WDRs and the objectives of projects stated in in the PDOs."
  },
  {
    "objectID": "analysis/01b_WB_project_pdo_EDA.html#ingest-wdr-data",
    "href": "analysis/01b_WB_project_pdo_EDA.html#ingest-wdr-data",
    "title": "WB Project PDO text EDA",
    "section": "Ingest WDR data",
    "text": "Ingest WDR data\nPreviously created, as explained in data/derived_data/_provenance.md\n\n# Read the WDR data\nwdr &lt;- readRDS(here(\"data\",\"derived_data\", \"wdr.rds\"))\n\n— Manually add WDR 2023 ✍🏻\nOKR Full item\n\nlibrary(tibble) # Simple Data Frames # Simple Data Frames\n\n# Create a named list of NA values for subj_11 to subj_46\nna_values &lt;- setNames(rep(NA, 35), paste0(\"subj_\", 12:46))\n\n# Add a new row with the existing columns and NA for subj_11 to subj_46\nwdr &lt;- wdr %&gt;%\n  add_row(\n    date_issued = 2023,\n    decade = \"2020s\",\n    id = NA, # ? \n    ISBN = \"978-1-4648-1941-4\",\n    title = \"Migrants, Refugees, and Societies\",\n    doc_mt_identifier_1 = \"oai:openknowledge.worldbank.org:10986/39696\", #? \n    subject_miss = NA,\n    abstract = \"Migration is a development challenge. About 184 million people-2.3 percent of the world’s population-live outside of their country of nationality. Almost half of them are in low- and middle-income countries. But what lies ahead? As the world struggles to cope with global economic imbalances, diverging demographic trends, and climate change, migration will become a necessity in the decades to come for countries at all levels of income. If managed well, migration can be a force for prosperity and can help achieve the United Nations’ Sustainable Development Goals. World Development Report 2023 proposes an innovative approach to maximize the development impacts of cross-border movements on both destination and origin countries and on migrants and refugees themselves. The framework it offers, drawn from labor economics and international law, rests on a “Match and Motive Matrix” that focuses on two factors: how closely migrants’ skills and attributes match the needs of destination countries and what motives underlie their movements. This approach enables policy makers to distinguish between different types of movements and to design migration policies for each. International cooperation will be critical to the effective management of migration.\",\n    url_keys = \"https://openknowledge.worldbank.org/handle/10986/39696\",\n    altmetric = 150,\n    all_topic = \"Poverty Reduction,Social Development,Conflict and Development\",\n    all_subj = \"migration,migrants,refugees,force displacement,crss-border mobility,remittances,origin country,international protection,refugee-hosting country,irregular migration,international cooperation\",\n    subj_1 = \"migration\",\n    subj_2 = \"migrants\",\n    subj_3 = \"refugees\",\n    subj_4 = \"force displacement\",\n    subj_5 = \"crss-border mobility\",\n    subj_6 = \"remittances\",\n    subj_7 = \"origin country\",\n    subj_8 = \"international protection\",\n    subj_9 = \"refugee-hosting country\",\n    subj_10 = \"irregular migration\",\n    subj_11 = \"international cooperation\",\n    !!!na_values  # Unpack the NA values for subj_12 to subj_46\n  )\n\n— Manually add WDR 2024 ✍🏻\nOKR Full item\n\nlibrary(tibble) # Simple Data Frames # Simple Data Frames\n\n# Create a named list of NA values for subj_11 to subj_46\nna_values &lt;- setNames(rep(NA, 35), paste0(\"subj_\", 12:46))\n# https://documents.worldbank.org/en/publication/documents-reports/documentdetail/099042523192514880/p17826903573340450b2d00e8cfd3baf7ac\n# https://openknowledge.worldbank.org/entities/publication/5e5ac9f1-71ee-4734-825e-60966658395f/full\n\n# Add a new row with the existing columns and NA for subj_11 to subj_46\nwdr &lt;- wdr %&gt;%\n  add_row(\n    date_issued = 2024,\n    decade = \"2020s\",\n    id = NA, # ? \n    ISBN = \"978-1-4648-2078-6\",\n    title = \"The Middle-Income Trap\",\n    doc_mt_identifier_1 = \"oai:openknowledge.worldbank.org:10986/41919\", #? \n    subject_miss = NA,\n    abstract = \"Middle-income countries are in a race against time. Many of them have done well since the 1990s to escape low-income levels and eradicate extreme poverty, leading to the perception that the last three decades have been great for development. But the ambition of the more than 100 economies with incomes per capita between US$1,100 and US$14,000 is to reach high-income status within the next generation. When assessed against this goal, their record is discouraging. Since the 1970s, income per capita in the median middle-income country has stagnated at less than a tenth of the US level. With aging populations, growing protectionism, and escalating pressures to speed up the energy transition, today’s middle-income economies face ever more daunting odds. To become advanced economies despite the growing headwinds, they will have to make miracles. Drawing on the development experience and advances in economic analysis since the 1950s, World Development Report 2024 identifies pathways for developing economies to avoid the “middle-income trap.” It points to the need for not one but two transitions for those at the middle-income level: the first from investment to infusion and the second from infusion to innovation. Governments in lower-middle-income countries must drop the habit of repeating the same investment-driven strategies and work instead to infuse modern technologies and successful business processes from around the world into their economies. This requires reshaping large swaths of those economies into globally competitive suppliers of goods and services. Upper-middle-income countries that have mastered infusion can accelerate the shift to innovation—not just borrowing ideas from the global frontiers of technology but also beginning to push the frontiers outward. This requires restructuring enterprise, work, and energy use once again, with an even greater emphasis on economic freedom, social mobility, and political contestability. Neither transition is automatic. The handful of economies that made speedy transitions from middle- to high-income status have encouraged enterprise by disciplining powerful incumbents, developed talent by rewarding merit, and capitalized on crises to alter policies and institutions that no longer suit the purposes they were once designed to serve. Today’s middle-income countries will have to do the same.\",\n    url_keys = \"https://openknowledge.worldbank.org/handle/10986/41919\",\n    altmetric = 13,\n   all_topic = \"Macroeconomics,Economic Growth,Business Cycles and Stabilization Policies,Poverty Reduction,Achieving Shared Growth,Science and Technology Development,Innovation\",\n    all_subj = \"middle-income trap,investment,infusion,innovation,technologies,competitive suppliers,economic freedom\",\n    subj_1   = \"middle-income trap\",\n    subj_2   = \"investment\",\n    subj_3   = \"infusion\",\n    subj_4   = \"innovation\",\n    subj_5   = \"technologies\",\n    subj_6   = \"competitive suppliers\",\n    subj_7   = \"economic freedom\",\n    subj_8   = NA,\n    subj_9   = NA,\n    subj_10  = NA,\n    subj_11  = NA,\n    !!!na_values  # Unpack the NA values for subj_12 to subj_46\n  )\n\n— Manually correct WDR 2011 ✍🏻\n\n\nwdr$url_keys [wdr$id == \"4389\"] &lt;- \"https://openknowledge.worldbank.org/handle/10986/4389\"\n\nwdr$altmetric [wdr$id == \"4389\"] &lt;- \"210\"\n\nwdr$abstract [wdr$id == \"4389\"] &lt;- \"The 2011 World development report looks across disciplines and experiences drawn from around the world to offer some ideas and practical recommendations on how to move beyond conflict and fragility and secure development. The key messages are important for all countries-low, middle, and high income-as well as for regional and global institutions: first, institutional legitimacy is the key to stability. When state institutions do not adequately protect citizens, guard against corruption, or provide access to justice; when markets do not provide job opportunities; or when communities have lost social cohesion-the likelihood of violent conflict increases. Second, investing in citizen security, justice, and jobs is essential to reducing violence. But there are major structural gaps in our collective capabilities to support these areas. Third, confronting this challenge effectively means that institutions need to change. International agencies and partners from other countries must adapt procedures so they can respond with agility and speed, a longer-term perspective, and greater staying power. Fourth, need to adopt a layered approach. Some problems can be addressed at the country level, but others need to be addressed at a regional level, such as developing markets that integrate insecure areas and pooling resources for building capacity Fifth, in adopting these approaches, need to be aware that the global landscape is changing. Regional institutions and middle income countries are playing a larger role. This means should pay more attention to south-south and south-north exchanges, and to the recent transition experiences of middle income countries.\"\n\nwdr$all_topic [wdr$id == \"4389\"] &lt;- tolower(\"Justice,Jobs,Political Violence and Civil War,Political Violence and War,Organized Crime,Fragility,Conflict and Violence,Crime,Social Cohesion,Public Sector Management,Social Development,Law and Development, Social Protections and Labor,Conflict and Development,Water Supply and Sanitation,Judicial System Reform, Labor Markets,Armed Conflict,Urban Solid Waste Management\") \n\n# Define the subjects to be added for the specific row\nsubjects &lt;- c(\n  \"Armed Conflict\",\n  \"Civil Wars\",\n  \"Conflict Prevention\",\n  \"Conflict Resolution\",\n  \"Development Policy\",\n  \"Fragile States\",\n  \"International Development\",\n  \"Peacebuilding\",\n  \"Political Instability\",\n  \"Post-Conflict Reconstruction\",\n  \"Security and Development\"\n) %&gt;% tolower()  # Convert subjects to lowercase\n\n# Ensure id is handled as character and enforce lowercase comparison\nwdr &lt;- wdr %&gt;%\n   mutate(across(starts_with(\"subj_\"),\n                 ~ ifelse(id == \"4389\", \n                          subjects[as.numeric(sub(\"^subj_\", \"\", cur_column()))], \n                          NA_character_))) %&gt;% \n   mutate (all_subj = if_else(id == \"4389\", paste0(subjects, collapse = \",\"), all_subj)) \n\n# Check the result for the row with id == \"4389\"\nwdr %&gt;% filter(id == \"4389\") %&gt;% select(starts_with(\"subj_\"))  # Display the updated subject columns\n\n\n# check &lt;- wdr[wdr$id == \"4389\",] \n\n— Remove extra space in title column\n\n# Check and remove leading space in the 'title' column\nwdr &lt;- wdr %&gt;%\n  mutate(title = str_trim(title, side = \"left\"))\n\n— Re-save (upon correction) wrd2.rds\n\n\nwdr2 &lt;-  wdr\nwrite_rds(x = wdr2, file = here::here(\"data\", \"derived_data\",\"wdr2.rds\"))\n\n[TBL] World Develompent Reports 2000-2024\nBelow are the titles of the World Development Reports from 2000 to 2024.\n\n\n\n\n\ndate_issued\ntitle\nurl_keys\n\n\n\n2001\nAttacking Poverty\nhttps://openknowledge.worldbank.org/handle/10986/11856?show=full\n\n\n2002\nBuilding Institutions for Markets\nhttps://openknowledge.worldbank.org/handle/10986/5984?show=full\n\n\n2003\nSustainable Development in a Dynamic World--Transforming Institutions, Growth, and Quality of Life\nhttps://openknowledge.worldbank.org/handle/10986/5985?show=full\n\n\n2004\nMaking Services Work for Poor People\nhttps://openknowledge.worldbank.org/handle/10986/5986?show=full\n\n\n2005\nA Better Investment Climate for Everyone\nhttps://openknowledge.worldbank.org/handle/10986/5987?show=full\n\n\n2006\nEquity and Development\nhttps://openknowledge.worldbank.org/handle/10986/5988?show=full\n\n\n2007\nDevelopment and the Next Generation\nhttps://openknowledge.worldbank.org/handle/10986/5989?show=full\n\n\n2008\nAgriculture for Development\nhttps://openknowledge.worldbank.org/handle/10986/5990?show=full\n\n\n2009\nReshaping Economic Geography\nhttps://openknowledge.worldbank.org/handle/10986/5991?show=full\n\n\n2010\nDevelopment and Climate Change\nhttps://openknowledge.worldbank.org/handle/10986/4387?show=full\n\n\n2011\nConflict, Security, and Development\nhttps://openknowledge.worldbank.org/handle/10986/4389\n\n\n2012\nGender Equality and Development\nhttps://openknowledge.worldbank.org/handle/10986/4391?show=full\n\n\n2013\nJobs\nhttps://openknowledge.worldbank.org/handle/10986/11843?show=full\n\n\n2014\nRisk and Opportunity—Managing Risk for Development\nhttps://openknowledge.worldbank.org/handle/10986/16092?show=full\n\n\n2015\nMind, Society, and Behavior\nhttps://openknowledge.worldbank.org/handle/10986/20597?show=full\n\n\n2016\nDigital Dividends\nhttps://openknowledge.worldbank.org/handle/10986/23347?show=full\n\n\n2017\nGovernance and the Law\nhttps://openknowledge.worldbank.org/handle/10986/25880?show=full\n\n\n2018\nLearning to Realize Education's Promise\nhttps://openknowledge.worldbank.org/handle/10986/28340?show=full\n\n\n2019\nThe Changing Nature of Work\nhttps://openknowledge.worldbank.org/handle/10986/30435?show=full\n\n\n2020\nTrading for Development in the Age of Global Value Chains\nhttps://openknowledge.worldbank.org/handle/10986/32437?show=full\n\n\n2021\nData for Better Lives\nhttps://openknowledge.worldbank.org/handle/10986/35218?show=full\n\n\n2022\nFinance for an Equitable Recovery\nhttps://openknowledge.worldbank.org/handle/10986/36883?show=full\n\n\n2023\nMigrants, Refugees, and Societies\nhttps://openknowledge.worldbank.org/handle/10986/39696\n\n\n2024\nThe Middle-Income Trap\nhttps://openknowledge.worldbank.org/handle/10986/41919\n\n\n\n\n\n\nQualify: peak or trend (by sector)"
  },
  {
    "objectID": "analysis/01b_WB_project_pdo_EDA.html#add-geomvline-to-sector-plots-v-wdr-title-cmpl",
    "href": "analysis/01b_WB_project_pdo_EDA.html#add-geomvline-to-sector-plots-v-wdr-title-cmpl",
    "title": "WB Project PDO text EDA",
    "section": "Add geomvline to sector plots v WDR title [CMPL 🟠]",
    "text": "Add geomvline to sector plots v WDR title [CMPL 🟠]\n\ntabyl(pdo_train_t$tok_sector_broad)\n# pdo_train_t$tok_sector_broad      n  WDR \n\n#                  AGR_FOR_FISH    665 WDR 2008  Agriculture for Development\n#                     EDUCATION   1180 WDR 2004 Making Services Work for Poor People\n#                        ENERGY    886 WDR \n#                     FINANCIAL   1843 WDR \n#                  GENDER_EQUAL    213 WDR 2012  Gender Equality and Development\n#                        HEALTH    946 WDR \n#                           ICT    548 WDR \n#                IND TRADE SERV     60 WDR \n#           INSTITUTIONAL SUPP.   2171 WDR \n#                 MINING_OIL_GAS    299 WDR \n#                     TRANSPORT   1371 WDR \n#                         URBAN    553 WDR \n#                       WAT_SAN   1069 WDR \n\n— ✅ AGR_FOR_FISH ( Agriculture, forestry, and fishing)\nThe WDR of 2008 was titled “Agriculture for Development”, link\n\n# --- Get a LIST of unique sectors (facets) and split the data\nPDOsector_list &lt;- base::split(x = sector_broad_pdo, f = sector_broad_pdo$tok_sector_broad)\n# Specific split df \n#PDOsector_list$'AGR_FOR_FISH'\n\n# Specific plot \npdo_agr_WDR_plot &lt;- sector_plots$'AGR_FOR_FISH' +  \n  geom_vline(xintercept = 2008, linetype = \"solid\", color = \"#9b6723\",alpha = 0.35) +\n  geom_text(aes(x = 2008, y = max(n) * 0.5, label = \"WDR Agric\"), \n                   angle = 90, vjust = -0.5, color = \"#9b6723\")\npdo_agr_WDR_plot\n\n\n\n\n\n\n\n\n#f_save_plot(\"pdo_agr_plot\", pdo_agr_plot)\nf_save_plot_obj (pdo_agr_WDR_plot, \"pdo_agr_WDR_plot\")\n\n— ✅ EDUCATION\nWDR 2007 was titled “Development and the Next Generation” WDR 2018 was titled “Learning to Realize Education’s Promise”\n\n# Specific split df \n#PDOsector_list$EDUCATION\n\n# Specific plot \npdo_edu_WDR_plot &lt;- sector_plots$EDUCATION + \n  geom_vline(xintercept = 2007, linetype = \"solid\", color = \"#9b6723\",alpha = 0.35) +\n  geom_text(aes(x = 2007, y = max(n) * 0.45, label = \"WDR Youth\"), \n                   angle = 90, vjust = -0.5, color = \"#9b6723\") +\n  geom_vline(xintercept = 2018, linetype = \"solid\", color = \"#9b6723\",alpha = 0.35) +\n  geom_text(aes(x = 2018, y = max(n) * 0.30, label = \"WDR Educ\"), \n                   angle = 90, vjust = -0.5, color = \"#9b6723\")\n\npdo_edu_WDR_plot\n\n\n\n\n\n\n\n\n#f_save_plot(\"pdo_edu_plot\", pdo_edu_plot)\nf_save_plot_obj (pdo_edu_WDR_plot, \"pdo_edu_WDR_plot\")\n\n— ✅ CLIMATE (climate change)\n\nThe WDR of 2010 was titled ” Development and Climate Change”, link\n\n# --- Get a LIST of unique sectors (facets) and split the data\nPDOsector_list &lt;- base::split(x = sector_broad_pdo, f = sector_broad_pdo$tok_sector_broad)\n# GENDER split df \n#PDOsector_list$'CLIMATE'\n\n# Specific plot \npdo_clim_WDR_plot &lt;- sector_plots$'CLIMATE' + \n   # geom_vline(xintercept = 2003, linetype = \"solid\", color = \"#9b6723\",alpha = 0.35) +\n   # geom_text(aes(x = 2003, y = max(n) * 0.5, label = \"WDR Sust Dev\"), \n   #           angle = 90, vjust = -0.5, color = \"#9b6723\")+ \n   geom_vline(xintercept = 2010, linetype = \"solid\", color = \"#9b6723\",alpha = 0.35) +\n   geom_text(aes(x = 2010, y = max(n) * 0.45, label = \"WDR Climate change\"), \n             angle = 90, vjust = -0.5, color = \"#9b6723\")\n\npdo_clim_WDR_plot\n\n\n\n\n\n\n\n\n#f_save_plot(\"pdo_clim_plot\", pdo_clim_plot)\nf_save_plot_obj (pdo_clim_WDR_plot, \"pdo_clim_WDR_plot\")\n\n— ✅ GENDER EQUALITY\nthe WDR of 2012 was titled “Gender Equality and Development”, link\n\n# --- Get a LIST of unique sectors (facets) and split the data\nPDOsector_list &lt;- base::split(x = sector_broad_pdo, f = sector_broad_pdo$tok_sector_broad)\n# GENDER split df \n#PDOsector_list$GENDER_EQUAL\n\n# Specific plot \npdo_gen_WDR_plot &lt;- sector_plots$GENDER_EQUAL +\n  geom_vline(xintercept = 2012, linetype = \"solid\", color = \"#9b6723\",alpha = 0.35) +\n  geom_text(aes(x = 2012, y = max(n) * 0.45, label = \"WDR Gender equal\"), \n                   angle = 90, vjust = -0.5, color = \"#9b6723\")\n\npdo_gen_WDR_plot\n\n\n\n\n\n\n\n\n#f_save_plot(\"pdo_gen_plot\", pdo_gen_plot)\nf_save_plot_obj (pdo_gen_WDR_plot, \"pdo_gen_WDR_plot\")\n\n— SOCIAL PROTECTION\nWDR 2004 ” Making Services Work for Poor People”\n\n# Specific split df \n#PDOsector_list$SOCIAL_PROT\n\n# Specific plot \npdo_soc_WDR_plot &lt;- sector_plots$SOCIAL_PROT + \n  geom_vline(xintercept = 2004, linetype = \"solid\", color = \"#9b6723\",alpha = 0.35) +\n  geom_text(aes(x = 2004, y = max(n) * 0.75, label = \"WDR Services\"), \n                   angle = 90, vjust = -0.5, color = \"#9b6723\")\n\npdo_soc_WDR_plot\n\n\n\n\n\n\n\n\n#f_save_plot(\"pdo_soc_plot\", pdo_soc_plot)\nf_save_plot_obj (pdo_soc_WDR_plot, \"pdo_soc_WDR_plot\")\n\n— INSTITUTIONAL SUPPORT\nWDR 2002 ” Building Institutions for Markets” WDR 2007 ” Governance and the Law”\n\n# Specific split df \n# PDOsector_list$INSTIT_SUP\n\n# Specific plot \npdo_inst_WDR_plot &lt;- sector_plots$INSTIT_SUPP + \n   geom_vline(xintercept = 2002, linetype = \"solid\", color = \"#9b6723\",alpha = 0.35) +\n   geom_text(aes(x = 2002, y = max(n) * 0.75, label = \"WDR Institutions\"), \n             angle = 90, vjust = -0.5, color = \"#9b6723\") + \n   geom_vline(xintercept = 2007, linetype = \"solid\", color = \"#9b6723\",alpha = 0.35) +\n   geom_text(aes(x = 2007, y = max(n) * 0.75, label = \"WDR Governance\"), \n             angle = 90, vjust = -0.5, color = \"#9b6723\")\n\npdo_inst_WDR_plot\n\n\n#f_save_plot(\"pdo_inst_plot\", pdo_inst_plot)\nf_save_plot_obj (pdo_inst_WDR_plot, \"pdo_inst_WDR_plot\")\n\n— ICT\nWDR 2016 ” Digital Dividends” WDR 2021 ” Data for Better Lives”\n\n# Specific split df \n# PDOsector_list$ICT\n\n# Specific plot \npdo_ict_WDR_plot &lt;- sector_plots$ICT + \n   geom_vline(xintercept = 2016, linetype = \"solid\", color = \"#9b6723\",alpha = 0.35) +\n   geom_text(aes(x = 2016, y = max(n) * 0.75, label = \"WDR Digital Div\"), \n             angle = 90, vjust = -0.5, color = \"#9b6723\") + \n   geom_vline(xintercept = 2021, linetype = \"solid\", color = \"#9b6723\",alpha = 0.35) +\n   geom_text(aes(x = 2021, y = max(n) * 0.75, label = \"WDR Data\"), \n             angle = 90, vjust = -0.5, color = \"#9b6723\")\n\npdo_ict_WDR_plot\n\n\n#f_save_plot(\"pdo_ict_plot\", pdo_ict_plot)\nf_save_plot_obj (pdo_ict_WDR_plot, \"pdo_ict_WDR_plot\")\n\n— FINANCIAL\nWDR 2005 ” A Better Investment Climate for Everyone” WDR 2022 ” Finance for an Equitable Recovery”\n\n# Specific split df \n#PDOsector_list$FINANCIAL\n\n# Specific plot \npdo_fin_WDR_plot &lt;- sector_plots$FIN + \n  geom_vline(xintercept = 2005, linetype = \"solid\", color = \"#9b6723\",alpha = 0.35) +\n  geom_text(aes(x = 2005, y = max(n) * 0.80, label = \"WDR Inv Clim\"), \n                   angle = 90, vjust = -0.5, color = \"#9b6723\") +\n  geom_vline(xintercept = 2022, linetype = \"solid\", color = \"#9b6723\",alpha = 0.35) +\n  geom_text(aes(x = 2022, y = max(n) * 0.75, label = \"WDR Finance\"), \n                   angle = 90, vjust = -0.5, color = \"#9b6723\")\npdo_fin_WDR_plot\n\n\n#f_save_plot(\"pdo_fin_plot\", pdo_fin_plot)\nf_save_plot_obj (pdo_fin_WDR_plot, \"pdo_fin_WDR_plot\")"
  },
  {
    "objectID": "analysis/01b_WB_project_pdo_EDA.html#bigrams",
    "href": "analysis/01b_WB_project_pdo_EDA.html#bigrams",
    "title": "WB Project PDO text EDA",
    "section": "BIGRAMS",
    "text": "BIGRAMS\n\nHere I use [clnp_annotate() output + ] dplyr to combine consecutive tokens into bigrams.\n\n\n# Create bigrams by pairing consecutive tokens by sentence ID and token IDs\nbigrams &lt;- pdo_train_t %&gt;%\n   # keeping FY with tokens\n   group_by(FY_appr, proj_id, pdo, sid ) %&gt;%\n   arrange(tid) %&gt;%\n   # Using mutate() and lead(), we create bigrams from consecutive tokens \n   mutate(next_token = lead(token), \n          bigram = paste(token, next_token)) %&gt;%\n   # make bigram low case\n   mutate(bigram = tolower(bigram)) %&gt;%\n   # only includes the rows where valid bigrams are formed\n   filter(!is.na(next_token)) %&gt;%\n   ungroup() %&gt;%\n   arrange(FY_appr, proj_id, sid, tid) %&gt;%\n   select(FY_appr,proj_id, pdo,sid, tid, token, bigram) \n\n\n# most frequent bigrams \ncount_bigram &lt;- bigrams %&gt;% \n   count(bigram, sort = TRUE)"
  },
  {
    "objectID": "analysis/01b_WB_project_pdo_EDA.html#clean-bigrams",
    "href": "analysis/01b_WB_project_pdo_EDA.html#clean-bigrams",
    "title": "WB Project PDO text EDA",
    "section": "Clean bigrams",
    "text": "Clean bigrams\nThe challenge is to clean but without separating consecutive words… so I do this split-reunite process to remove stopwords and punctuation. Basically only keeping bigrams made of 2 nouns or ADJ+noun.\n\n# Separate the bigram column into two words\nbigrams_cleaned &lt;- bigrams %&gt;%\n  tidyr::separate(bigram, into = c(\"word1\", \"word2\"), sep = \" \")\n\n# Remove stopwords and bigrams in EACH component word containing punctuation\nbigrams_cleaned &lt;- bigrams_cleaned %&gt;%\n   # custom stop words\n   filter(!word1 %in% custom_stop_words_df$word, !word2 %in% custom_stop_words_df$word) %&gt;% \n   # Remove punctuation   \n   filter(!stringr::str_detect(word1, \"[[:punct:]]\"), !stringr::str_detect(word2, \"[[:punct:]]\"))  \n\n# Reunite the component cleaned words into the bigram column\nbigrams_cleaned &lt;- bigrams_cleaned %&gt;%\n   unite(bigram, word1, word2, sep = \" \") %&gt;% \n   # Remove too obvious bigrams \n   filter(!bigram %in% c(\"development objective\", \"development objectives\", \n                         \"proposed project\", \"project development\", \"program development\"))\n\n# View the cleaned dataframe\nbigrams_cleaned\n\n# Count the frequency of each bigram\nbigram_freq &lt;- bigrams_cleaned %&gt;%\n  count(bigram, sort = TRUE)\n\n[FIG] most frequent bigrams in PDOs\n\nExcluding bigrams where 1 word is among stopwords or a punctuation sign\nExcluding “development objective/s”, “proposed project”, “program development” because not very informative\n\n\n# ---- Prepare data for plotting\n# Evaluate the title with glue first\ntitle_text &lt;- glue::glue(\"Frequency of bigrams in PDOs over FY {min(pdo_train_t$FY_appr)}-{max(pdo_train_t$FY_appr)}\") \n\n# Define the bigrams you want to highlight\nbigrams_to_highlight &lt;- c(\"public sector\", \"private sector\", \"eligible crisis\",\n                          \"health care\", \"health services\", \"public health\")   \n\n \n# ---- Plot the most frequent bigrams\npdo_bigr_freq &lt;- bigram_freq %&gt;%\n   slice_max(n, n = 25) %&gt;%\n   ggplot(aes(x = reorder(bigram, n), y = n,\n              fill = ifelse(bigram %in% bigrams_to_highlight, bigram, \"Other\"))) +\n   geom_col() +\n   # coord flipped so n is Y axis\n   scale_y_continuous(breaks = seq(min(bigram_freq$n)-1, max(bigram_freq$n), by = 50)) +\n   scale_fill_manual(values = c(\"public sector\" = \"#005ca1\", \n                                \"private sector\" = \"#9b2339\", \n                                \"eligible crisis\"= \"#8e550a\", \n                                \"health care\"= \"#4C9F38\",\n                                \"health services\"= \"#4C9F38\",\n                                \"public health\"= \"#4C9F38\", \n                                \"Other\" = \"grey\")) +\n   guides(fill = \"none\") +\n   coord_flip() +\n   labs(title = title_text, subtitle = \"(top 25 bigrams)\",\n        x = \"\", y = \"\") +\n   theme(axis.text.y = element_text(\n            # obtain vector of colors 2 match x axis labels color to fill\n            color = bigram_freq %&gt;%\n               slice_max(n, n = 25) %&gt;%\n               # mutate(color = ifelse(bigram %in% bigrams_to_highlight,\n               #                       ifelse(bigram == \"public sector\", \"#005ca1\",\n               #                              ifelse(bigram == \"private sector\", \"#9b2339\", \"#8e550a\")),\n               #                       \"#4c4c4c\")) \n               mutate(color = dplyr::case_when (\n                  bigram == \"public sector\" ~ \"#005ca1\",\n                  bigram == \"private sector\" ~ \"#9b2339\",\n                  bigram == \"eligible crisis\" ~ \"#8e550a\",\n                  bigram %in% c(\"health care\", \"health services\", \"public health\") ~ \"#4C9F38\",\n                  TRUE ~ \"#4c4c4c\")) %&gt;%\n               # Ensure the order matches the reordered bigrams (AS BINS)\n               arrange(reorder(bigram, n)) %&gt;%  \n               # Extract the color column in bin order as vector to be passed to element_text()\n               pull(color)\n            )\n         ) + lulas_theme\n\npdo_bigr_freq\n\n\n\n\n\n\n\nResults are not surprising in terms of frequent bigram recurrence:\n\nSee for example “increase access”, “service delivery” ,“institutional capacity”, “poverty reduction” etc, at the top.\nAlthough, while “health” recurred in several bigrams (e.g. “health services”, “public health”, “health care”) among the top 25, “education” did not appear at all.\nA bit mysterious is perhaps “eligible crisis” (&gt; 100 mentions)?! (coming back to this later)\n[FIG] Changes over time BY 1FY\nBesides huge, counter intuitive, difference between “health” and “education”, “climate change” appears in the top 25 (ranking above “financial sector” and “capacity building”) which begs the question: Has the frequency of these bigrams has changed over time?\n\n# \n# ## too busy to be useful\n# \n# # Step 1: Count the frequency of each bigram by year\n# top_bigrams_1FY &lt;- bigrams_cleaned %&gt;%\n#    group_by(FY_appr, bigram) %&gt;%\n#    summarise(count = n(), .groups = 'drop') %&gt;%\n#    arrange(FY_appr, desc(count)) %&gt;%\n#    # ---  +/- top 10  \n#    group_by(FY_appr) %&gt;%\n#    top_n(10, count) %&gt;%\n#    ungroup()\n#    # # ---  STRICT  top 10  \n#    # mutate(rank = dense_rank(desc(count))) %&gt;%  # Rank bigrams by frequency\n#    # filter(rank &lt;= 10) %&gt;%  # Keep only the top 10 by rank\n#    # ungroup()\n# \n#   \n# # Add specific bigrams to highlight, if any\n# bigrams_to_highlight &lt;- c(\"climate change\",  \"climate resilience\", \"public sector\", \"private sector\")\n# \n# # Step 2: Plot the top bigrams by frequency over time   \n# pdo_bigr_FY_freq  &lt;-  top_bigrams_1FY %&gt;% \n#  ggplot(aes(x = reorder(bigram, count), \n#              y = count,\n#              fill = ifelse(bigram %in% bigrams_to_highlight, bigram, \"Other\"))) +\n#   geom_col() +\n#   scale_fill_manual(values = c(\"public sector\" = \"#005ca1\", \"private sector\" = \"#e60066\", \n#                                \"climate change\" = \"#399B23\", \"climate resilience\" = \"#d8e600\",\n#                                \"Other\" = \"grey\")) +\n#   guides(fill = \"none\") +\n#   coord_flip() +\n#   facet_wrap(~ FY_appr, scales = \"free_y\") +\n#   labs(title = \"Top 10 Bigrams by Frequency Over Time\",\n#        subtitle = \"(Faceted by Fiscal Year Approval)\",\n#        x = \"Bigrams\",\n#        y = \"Count\") +\n#   theme_minimal() +\n#   theme(plot.title.position = \"plot\",\n#         axis.text.x = element_text(angle = 45, hjust = 1))+\n#      lulas_theme\n# \n# pdo_bigr_FY_freq\n\n[FIG] Changes over time BY 3FY\nTo reduce the noise and make the plot more readable, we can group the data by 3 fiscal years (FY) intervals.\n\n# generate FY group \nf_generate_year_groups &lt;- function(years, interval) {\n  breaks &lt;- seq(floor(min(years, na.rm = TRUE) / interval) * interval, \n                ceiling(max(years, na.rm = TRUE) / interval) * interval, \n                by = interval)\n  \n  labels &lt;- paste(breaks[-length(breaks)], \"-\", breaks[-1] - 1)\n  \n  return(list(breaks = breaks, labels = labels))\n}\n\n\n# --- Step 1: Create n-year groups (using `f_generate_year_groups`)\ninterval_i = 3 # decide the interval\nyear_groups &lt;- f_generate_year_groups(bigrams_cleaned$FY_appr, interval = interval_i)\ntop_n_i = 12 # decide the top n bigrams to show\n\n# --- Step 2: Add the generated FY breaks and labels to data frame\ntop_bigrams_FYper &lt;- bigrams_cleaned %&gt;%\n   # cut divides the range of x into intervals\n   mutate(FY_group = base::cut(FY_appr, \n                               breaks = year_groups$breaks, \n                               include.lowest = TRUE, \n                               right = FALSE, \n                               labels = year_groups$labels)) %&gt;% \n   # Count the frequency of each bigram by n-year groups\n   group_by(FY_group, bigram) %&gt;%\n   summarise(count = n(), .groups = 'drop') %&gt;%\n   arrange(FY_group, desc(count)) %&gt;%\n   # Top ? bigrams for each n-year period\n   group_by(FY_group) %&gt;%\n   top_n(top_n_i, count) %&gt;%\n   ungroup()\n\n# --- Step 3: Add specific bigrams to highlight, if any\nbigrams_to_highlight &lt;- c(\"climate change\",  \"climate resilience\", \n                          \"eligible crisis\",  \n                          \"public sector\", \"private sector\",\n                          \"water supply\", \"sanitation services\",\n                          \"health care\", \"health services\", \"public health\", \"health preparedness\"\n                          )\n\n# --- Step 4: Plot the top bigrams by frequency over n-year periods\npdo_bigr_FY_freq  &lt;-  top_bigrams_FYper %&gt;% \n ggplot(aes(x = reorder(bigram, count), \n             y = count,\n             fill = ifelse(bigram %in% bigrams_to_highlight, bigram, \"Other\"))) +\n  geom_col() +\n  scale_fill_manual(values = c(\n     # \"public sector\" = \"#005ca1\", \n     # \"private sector\" = \"#e60066\", \n     \"water supply\" = \"#26BDE2\",\n      \"sanitation services\" = \"#26BDE2\",\n     \"climate change\" = \"#3F7E44\", \n     \"climate resilience\" = \"#a6bd23\",\n     \"eligible crisis\" = \"#e68000\",  \n     \"health care\" = \"#E5243B\",\n     \"health services\" = \"#E5243B\",\n     \"public health\" = \"#E5243B\",\n     \"Other\" = \"grey\")) +\n  guides(fill = \"none\") +\n  coord_flip() +\n  facet_wrap(~ FY_group, ncol = 3 , scales = \"free_y\" )+ \n              #strip.position = \"top\") +  # Facet wrap with columns\n  labs(title = glue::glue(\"Top 12 Bigrams by Frequency Over {interval_i}-Year Periods\"),\n       subtitle =  \"(Some sectors highlighted)\",\n       x = \"\",\n       y = \"\") +\n     lulas_theme\n\n\n# print the plot\npdo_bigr_FY_freq\n\n\n\n\n\n\n\n\nFrequency observed over FY intervals is very revealing.\n\n\nInteresting to see the trend of “water supply” and “sanitation services” bigrams, which are quite stable over time.\nThe bigram “health care” and “health services” are also quite stable, while “public health” obviously gained relevance since the 2019-2021 FY period.\nConversely, “private sector” and “public sector” loose importance over time (around mid 2010s), while “climate change” and “climate resilience” gain relevance from the same point on.\nStill quite surprising the bigram “eligible crisis”, which actually appears in the top 12 bigrams starting in FY 2016-2018!\n🤔 Which are the most frequent and persistent Bigrams Over Time?\n\nFor this, I am looking for a ranking that considers Mean frequency across periods arrange(desc(mean_count)) + Stability (low standard deviation) across periods [this is hard bc of NAs], and NOT total count overall…\n\n\nUsing top_bigrams_FYper which had breaks of 3FY\n\n\n# ------------------------------[REPEATED just to see the table]\n\n# --- Step 1: Create n-year groups (using `f_generate_year_groups`)\ninterval_i = 3 # decide the interval\nyear_groups &lt;- f_generate_year_groups(bigrams_cleaned$FY_appr, interval = interval_i)\ntop_n_i = 12 # decide the top n bigrams to show\n\n# --- Step 2: Add the generated FY breaks and labels to data frame\ntop_bigrams_FYper &lt;- bigrams_cleaned %&gt;%\n   # cut divides the range of x into intervals\n   mutate(FY_group = base::cut(FY_appr, \n                               breaks = year_groups$breaks, \n                               include.lowest = TRUE, \n                               right = FALSE, \n                               labels = year_groups$labels)) %&gt;% \n   # Count the frequency of each bigram by n-year groups\n   group_by(FY_group, bigram) %&gt;%\n   summarise(count = n(), .groups = 'drop') %&gt;%\n   arrange(FY_group, desc(count)) %&gt;%\n   # Top ? bigrams for each n-year period\n   group_by(FY_group) %&gt;%\n   top_n(top_n_i, count) %&gt;%\n   ungroup()\n\n\nsd() returns NA for bigrams that are not present in any periods (or are present in just 1 period).\n\n\n# Calculate the mean frequency and standard deviation of the counts for each bigram across periods\nstable_and_frequent_bigrams_per &lt;- top_bigrams_FYper %&gt;%\n   group_by(bigram) %&gt;%\n   summarise(mean_count = mean(count, na.rm = TRUE),     # Mean frequency across periods\n             sd_count = sd(count, na.rm = TRUE),         # Stability (lower sd = more stable)\n             count_non_na = sum(!is.na(count)),  # Count non-NA values\n             sd_count2 = if_else(count_non_na &gt;= 1, sd(count, na.rm = TRUE), NA_real_),  # Only calculate sd if &gt;= 3 non-NA\n             total_count = sum(count)) %&gt;%               # Total count across all periods (optional)\n   arrange(desc(mean_count)) %&gt;%                      # Sort by frequency and then stability\n   # Filter out bigrams with low mean frequency or high instability (you can adjust thresholds)\n   # Focus on the top 25% most frequent bigrams\n   filter(mean_count &gt; quantile(mean_count, 0.70, na.rm = TRUE)) #%&gt;% \n   # Focus on the most stable 50% (lower sd) ---&gt; NO bc NA values\n   #filter( sd_count &lt; quantile(sd_count, 0.5, na.rm = TRUE))\n\n[TBL] Bigrams Over Time [3FY]\n\n# View the most frequent and stable bigrams\nstable_and_frequent_bigrams_per %&gt;% \n   slice_head(n = 15)  %&gt;% kableExtra::kable()\n\n\n\n\n\n\n\n\n\n\n\nbigram\nmean_count\nsd_count\ncount_non_na\nsd_count2\ntotal_count\n\n\n\nincrease access\n39.83333\n6.080022\n6\n6.080022\n239\n\n\neligible crisis\n37.33333\n1.527525\n3\n1.527525\n112\n\n\nthreat posed\n33.00000\nNA\n1\nNA\n33\n\n\nprivate sector\n31.20000\n10.917875\n5\n10.917875\n156\n\n\nhealth preparedness\n31.00000\nNA\n1\nNA\n31\n\n\nstrengthen national\n28.00000\nNA\n1\nNA\n28\n\n\nservice delivery\n27.71429\n5.313953\n7\n5.313953\n194\n\n\nclimate change\n27.00000\n2.828427\n2\n2.828427\n54\n\n\npoverty reduction\n27.00000\n14.514361\n4\n14.514361\n108\n\n\npublic health\n25.50000\n16.263456\n2\n16.263456\n51\n\n\npublic sector\n25.25000\n8.301606\n4\n8.301606\n101\n\n\ninstitutional capacity\n24.87500\n6.577831\n8\n6.577831\n199\n\n\nimprove access\n24.57143\n8.521681\n7\n8.521681\n172\n\n\nnational systems\n24.00000\nNA\n1\nNA\n24\n\n\n\n\n\n\nUsing top_bigrams_1FY which had breaks of 1FY\n\n\n# --- Step 1: Create n-year groups (using `f_generate_year_groups`)\ninterval_i = 1 # decide the interval\nyear_groups &lt;- f_generate_year_groups(bigrams_cleaned$FY_appr, interval = interval_i)\ntop_n_i = 12 # decide the top n bigrams to show\n\n# --- Step 2: Add the generated FY breaks and labels to data frame\ntop_bigrams_1FY &lt;- bigrams_cleaned %&gt;%\n   # cut divides the range of x into intervals\n   mutate(FY_group = base::cut(FY_appr, \n                               breaks = year_groups$breaks, \n                               include.lowest = TRUE, \n                               right = FALSE, \n                               labels = year_groups$labels)) %&gt;% \n   # Count the frequency of each bigram by n-year groups\n   group_by(FY_group, bigram) %&gt;%\n   summarise(count = n(), .groups = 'drop') %&gt;%\n   arrange(FY_group, desc(count)) %&gt;%\n   # Top ? bigrams for each n-year period\n   group_by(FY_group) %&gt;%\n   top_n(top_n_i, count) %&gt;%\n   ungroup()\n\n\n# Calculate the mean frequency and standard deviation of the counts for each bigram across periods\nstable_and_frequent_bigrams_1FY &lt;- top_bigrams_1FY %&gt;%\n   group_by( bigram) %&gt;%\n   summarise(mean_count = mean(count, na.rm = TRUE),     # Mean frequency across periods\n             sd_count = sd(count, na.rm = TRUE),         # Stability (lower sd = more stable)\n             total_count = sum(count)) %&gt;%               # Total count across all periods (optional)\n   arrange(desc(mean_count)) %&gt;%                      # Sort by frequency and then stability\n   # Filter out bigrams with low mean frequency or high instability (you can adjust thresholds)\n   # Focus on the top 25% most frequent bigrams\n   filter(mean_count &gt; quantile(mean_count, 0.70, na.rm = TRUE)) #%&gt;% \n   # Focus on the most stable 50% (lower sd) ---&gt; NO bc NA values\n   #filter( sd_count &lt; quantile(sd_count, 0.5, na.rm = TRUE))\n\n[TBL] Bigrams Over Time [1FY]\n\n# View the most frequent and stable bigrams\nstable_and_frequent_bigrams_1FY %&gt;% \n   slice_head(n = 15)   %&gt;% kableExtra::kable()\n\n\n\nbigram\nmean_count\nsd_count\ntotal_count\n\n\n\nmobile applications\n21.00000\nNA\n21\n\n\npublic health\n16.66667\n3.0550505\n50\n\n\nthreat posed\n16.50000\n2.1213203\n33\n\n\nhealth preparedness\n15.50000\n0.7071068\n31\n\n\nincrease access\n14.64706\n5.1713293\n249\n\n\neligible crisis\n14.62500\n10.1971635\n117\n\n\nstrengthen national\n14.00000\n2.8284271\n28\n\n\nvulnerable households\n13.00000\nNA\n13\n\n\nrespond promptly\n12.50000\n10.6066017\n25\n\n\naction plan\n12.00000\nNA\n12\n\n\ndisaster risk\n12.00000\nNA\n12\n\n\nlocal governments\n12.00000\nNA\n12\n\n\nnational systems\n12.00000\n1.4142136\n24\n\n\nworld bank\n12.00000\nNA\n12\n\n\nclimate resilience\n11.66667\n4.5092498\n35"
  },
  {
    "objectID": "analysis/01b_WB_project_pdo_EDA.html#explore-specific-bigrams",
    "href": "analysis/01b_WB_project_pdo_EDA.html#explore-specific-bigrams",
    "title": "WB Project PDO text EDA",
    "section": "Explore specific bigrams",
    "text": "Explore specific bigrams\n— Public/Private ~ compare frequency over FY\nA case in which looking at bigrams may be better than tokens is the question whether WB project are more focused on public or private sector. It is not easy to capture this information from the text, because:\n\n“government” may be referred to the subject/counterpart of the project (e.g. “government of Mozambique”)\n“private” is not necessarily referred to the “private sector” (e.g. “private households”)\n“public” is not necessarily referred to the “public sector” (e.g. “public health”)\n\nSo, I narrow down to consecutive bigrams “public sector” and “private sector” to get an indicative frequency of these terms.\n[FIG] Bigrams (“public sector”, “private sector”) freq plot\n\n# Filter for the specific bigrams \"public sector\" and \"private sector\"\nbigrams_pub_priv_sec &lt;- bigrams %&gt;%\n   filter(bigram %in% c(\"public sector\", \"private sector\"))\n\n# Display the result\n#bigrams_pub_priv_sec\n\n# prepare data for plotting (count)\nsector_bigr_df &lt;- bigrams_pub_priv_sec %&gt;% \n   count(FY_appr, bigram) %&gt;% \n   # reorder values by frequency\n   mutate(bigram = factor(bigram, levels = c(\"public sector\", \"private sector\")))\n\n\n# ---- Prepare data for plotting\n# Evaluate the title with glue first\ntitle_text &lt;- glue::glue(\"Frequency of bigrams \\\"public sector\\\" and \\\"private sector\\\" in PDOs over FY {min(sector_bigr_df$FY_appr)}-{max(sector_bigr_df$FY_appr)}\") \n\ntwo_col_contrast &lt;- c( \"#005ca1\",  \"#e60066\" )\n\n# Create a named vector for the legend labels with totals in a single pipeline\nlegend_labels &lt;- sector_bigr_df %&gt;%\n   group_by(bigram) %&gt;%\n   # Calculate total counts for each bigram\n   summarize(total_n = sum(n)) %&gt;% \n   # Append totals to bigram names\n   mutate(label = paste0(bigram, \" (\", total_n, \")\")) %&gt;%  \n   # Create a named vector with bigram as names and labels as values\n   {setNames(.$label, .$bigram)} # curly braces {} in a dplyr pipeline using . as ouptu from previous..\n\n# ---- Plot\npdo_pub_pri_bigr &lt;- ggplot(data = sector_bigr_df, aes(x = FY_appr, y = n, group = bigram, color = bigram)) +\n   geom_line(linetype = \"solid\", alpha = 0.75, size = .5) +\n   geom_point(size = 3) +\n   scale_x_continuous(breaks = seq(2001, 2023, by = 1)) +\n   scale_color_manual(values = two_col_contrast, \n                      labels = legend_labels) +  # Use modified labels\n   lulas_theme +\n   theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n   labs(title = title_text, \n        x = \"\", \n        y = \"\", \n        color = \"\") \n   \n\npdo_pub_pri_bigr\n\n\n\n\n\n\n\n\n# Save the plot\n#f_save_plot(\"pdo_pub_pri_bigr\", pdo_pub_pri_bigr)\nf_save_plot_obj(pdo_pub_pri_bigr, \"pdo_pub_pri_bigr\")\n\n\nNote:\n\n\nthese are much less common than the single words.\nWhat happens in FY 2014-2016 that makes these bigram drop in frequency of mention?"
  },
  {
    "objectID": "analysis/01b_WB_project_pdo_EDA.html#clean-trigrams",
    "href": "analysis/01b_WB_project_pdo_EDA.html#clean-trigrams",
    "title": "WB Project PDO text EDA",
    "section": "Clean trigrams",
    "text": "Clean trigrams\nThe challenge is to clean but without separating consecutive words… so I do this split-reunite process to remove stopwords and punctuation. Basically only keeping bigrams made of 2 nouns or ADJ+noun.\n\n# Split the trigrams into three tokens\ntrigrams_split &lt;- trigrams %&gt;% \n   separate(trigram, c(\"token1\", \"token2\", \"token3\"), sep = \" \")  \n\n# Remove stopwords and punctuation\ntrigrams_clean &lt;- trigrams_split %&gt;% \n   filter(!token1 %in% custom_stop_words,\n          !token2 %in% custom_stop_words,\n          !token3 %in% custom_stop_words) %&gt;%\n   filter(token1 != \"na\",\n          token2 != \"na\",\n          token3 != \"na\") %&gt;%\n   # Remove punctuation   \n   filter(!stringr::str_detect(token1, \"[[:punct:]]\"), \n          !stringr::str_detect(token2, \"[[:punct:]]\"),\n          !stringr::str_detect(token3, \"[[:punct:]]\"))  %&gt;% \n   unite(trigram, token1, token2, token3, sep = \" \") %&gt;%\n   select(FY_appr, proj_id, pdo, sid, tid, trigram)\n\n\n# Count the frequency of each trigram\ntrigram_freq &lt;- trigrams_clean %&gt;% \n   count(trigram, sort = TRUE) \n\n[FIG] Most frequent trigrams in PDOs\n\nExcluding bigrams where 1 word is among stopwords or a punctuation sign\nExcluding “development objective/s”, “proposed project”, “program development” because not very informative\n\n\n# Evaluate the title with glue first\ntitle_text &lt;- glue::glue(\"Most frequent trigrams in PDOs over FY {min(trigrams_clean$FY_appr)}-{max(trigrams_clean$FY_appr)}\")\n \n# Define colors for specific highlights\nhighlight_colors &lt;- c(\"Health\" =  \"#d02e4c\", \"Environment\" =\"#3F7E44\", \"Other\" = \"grey\")\n\n\n# Plot the most frequent trigrams\npdo_trigram_freq_plot &lt;- trigram_freq %&gt;%\n   dplyr::filter(!trigram %in% c(\"project development objective\",\n                          \"project development objectives\",\n                          \"overall development objective\",\n                          \"program development objective\",\n                          \"program development objectives\",\n                          \"proposed project development\", \n                          \"proposed development objectives\", \n                          \"proposed development objective\",\n                          \"revised project development\"\n                          )) %&gt;%\n   top_n(25) %&gt;%\n   # plot the top 25 trigrams\n   ggplot(aes(x = reorder(trigram, n), y = n,\n              fill = dplyr::case_when(\n                 stringr::str_detect(trigram, \"health\") ~ \"Health\",\n                 stringr::str_detect(trigram, \"environment\") ~ \"Environment\",\n                 stringr::str_detect(trigram, \"climate\") ~ \"Environment\",\n                 stringr::str_detect(trigram, \"greenhouse\") ~ \"Environment\",\n                 # stringr::str_detect(trigram, \"sustain\") ~ \"Environment\",\n                 TRUE ~ \"Other\"))) +\n   geom_col() +\n   # coord flipped so n is Y axis\n   scale_y_continuous(breaks = seq(min(trigram_freq$n)-1, max(trigram_freq$n), by = 50)) +\n   coord_flip() +\n   labs(title = title_text, subtitle = \"(top 25 trigrams)\",\n        x = \"\", y = \"\") +\n   scale_fill_manual(values = highlight_colors) +\n   guides(fill = \"none\") +\n   lulas_theme\n\npdo_trigram_freq_plot"
  },
  {
    "objectID": "analysis/01b_WB_project_pdo_EDA.html#concordances-with-specific-bigrams",
    "href": "analysis/01b_WB_project_pdo_EDA.html#concordances-with-specific-bigrams",
    "title": "WB Project PDO text EDA",
    "section": "Concordances with specific bigrams",
    "text": "Concordances with specific bigrams\nConcordancing is central to analyses of text and they often represents the first step in more sophisticated analyses of language data, because concordances are extremely valuable for understanding how a word or phrase is used, how often it is used, and in which contexts is used.\nA concordance list is a list of all contexts in which a particular token appears in a corpus or text. Here I use it in association with the bigram “eligible crisis” to see in which context it appears in the PDOs.\n\nHere I did it at the level of sentence, i.e. without tokenizing the text into words.\n\n— eligible crisis ~ notable bigrams over FY\n\n# reduce back to the original data\npdo_t &lt;- pdo_train_t %&gt;% \n   select(proj_id, pdo,pr_name, FY_appr, FY_clos, status, regionname, countryname,\n          sector1, theme1,lendinginstr, env_cat, ESrisk, curr_total_commitment) %&gt;%\n   group_by(proj_id) %&gt;% \n   slice(1)\n\nFirst of all, let’s see what are the sentence that contain the bigram “eligible crisis” in the PDOs.\n\n# Tokenize the text data into sentences\nsentences &lt;- pdo_t %&gt;%\n   unnest_tokens(sentence, pdo, token = \"sentences\", drop = FALSE)\n\n# Count the number of sentences in each document\nsentence_count &lt;- sentences %&gt;%\n   group_by(proj_id) %&gt;%\n   summarise(num_sentences = n())\n\nn_distinct(sentence_count$proj_id)  # number of projects\nsum(sentence_count$num_sentences)   # total number of sentences\n\n\n# ---- Define the bigram you want to find\ntarget_bigram &lt;- \"eligible crisis\"\n\n\n# Filter sentences that contain the specific bigram\nsentences_with_targ &lt;- sentences %&gt;%\n   filter(stringr::str_detect(sentence, target_bigram))\n\n# Define how many characters before and after the bigram to extract\nchars_before &lt;- 60  # Number of characters before the bigram\nchars_after &lt;- 60   # Number of characters after the bigram\n\n# Add the extracted bigram and surrounding characters to the same dataframe\nsentences_with_eligcris &lt;- sentences_with_targ %&gt;%\n   mutate(closest_text = str_extract(sentence, paste0(\".{0,\", chars_before, \"}\", target_bigram, \".{0,\", chars_after, \"}\"))) %&gt;% \n   # View the updated dataframe with the closest_text column\n   select(proj_id, #sentence, \n          closest_text)\n\n\n# Define how many words before and after the bigram to extract\nwords_before &lt;- 8  # Number of words before the bigram\nwords_after &lt;- 8   # Number of words after the bigram\n\n# Add the extracted bigram and surrounding words to the same dataframe\nsentences_with_eligcris2 &lt;- sentences_with_targ %&gt;%\n   mutate(closest_text = str_extract(sentence, \n                                     paste0(\"(\", # Start a capture group\n                                            # Match preceding words\n                                            \"(?:\\\\S+\\\\s+){0,\", words_before, \"}\", \n                                            target_bigram, \n                                            # Match following words\n                                            \"(?:\\\\s+\\\\S+){0,\", words_after, \"}\", \n                                            \")\"\n                                           ))) %&gt;% \n   # View the updated dataframe with the closest_text column\n   select(proj_id,  sentence, \n          closest_text)\n\nn_distinct(sentences_with_eligcris2$proj_id)\n\n\nThere are 112 projects, for which the PDO has a sentences containing the bigram “eligible crisis” in the PDOs.\n\n[TBL] Close phrase around bigram “eligible crisis”\nIt appears “eligible crisis or emergency” is a commonly used phrase in the PDOs, often accompanied by similar phrasing: “to respond promptly and effectively”. as well as “provide immediate and effective response to”. Presumably, a standard sentence that refers to a situation that qualifies for specific types of assistance or intervention under certain policies.\n\n# Define the phrase you want to search for in the vicinity of the target bigram\nphrase_to_search &lt;- \"respond promptly and effectively\"\n\n# Count how often the phrase appears in the vicinity of the target bigram\nphrase_count &lt;- sentences_with_eligcris2 %&gt;%\n  mutate(contains_phrase = stringr::str_detect(closest_text, phrase_to_search)) %&gt;%  # Check if the phrase is present\n  summarise(count = sum(contains_phrase))  # Count how many times the phrase is found\n\n# View the result\ntabyl(phrase_count$count)\n\n\n32% of the (112) times, the bigram “eligible crisis” in the PDOs, it is accompanied by the phrase “respond promptly and effectively”.\n\nHere are a few examples of the sentences containing the bigram “eligible crisis” and the phrase “respond promptly and effectively” OR immediate and effective response:\n\nset.seed(555)\n# Filter the sentences that contain the phrase\nsample_with_eligcris2 &lt;- sentences_with_eligcris2 %&gt;% \n   ungroup() %&gt;% \n   # take a random sample of 5 sentences\n   sample_n(10) %&gt;%\n   select(proj_id, closest_text) %&gt;% \n   mutate(\n     closest_text = paste0(\"(...) \", closest_text),\n     # Make \"eligible crisis\" bold by adding &lt;b&gt; tags\n     closest_text = gsub(\"eligible crisis\", \"&lt;b&gt;eligible crisis&lt;/b&gt;\", closest_text),\n     # Highlight by adding &lt;mark&gt; tags\n     closest_text = gsub(\"(?i)(promptly and effectively|immediate and effective response)\", # (?i) makes the match case-insensitive.\n                         \"&lt;mark style='background-color: #d8e600;'&gt;\\\\1&lt;/mark&gt;\", closest_text, perl = TRUE)\n     )\n\n# Print out sample in a kable \nelcr_k &lt;- kable(sample_with_eligcris2, format = \"html\", \n                # Display the table with bold formatting\n                escape = FALSE,\n                col.names = c(\"WB Project ID\",\"Excerpt of PDO Sentences with 'Eligible Crisis'\")) %&gt;% \n   kable_styling(full_width = FALSE)\n\nelcr_k\n\n\n\n\nWB Project ID\nExcerpt of PDO Sentences with 'Eligible Crisis'\n\n\n\nP179499\n(...) and effective response in the case of an eligible crisis or emergency.\n\n\nP176608\n(...) promptly and effectively in the event of an eligible crisis or emergency.\n\n\nP151442\n(...) assistance programs and, in the event of an eligible crisis or emergency, to provide immediate and effective response\n\n\n\nP177329\n(...) eligible crisis or emergency, respond promptly and effectively to it.\n\n\nP127338\n(...) capacity to respond promptly and effectively in an eligible crisis or emergency, asrequired.\n\n\nP158504\n(...) immediate and effective response in case of an eligible crisis or emergency.\n\n\nP173368\n(...) immediate and effective response in case of an eligible crisis or emergency in the kingdom of cambodia.\n\n\nP178816\n(...) the project regions and to respond to an eligible crisis\n\n\n\nP160505\n(...) theproject area, and, in the event of an eligible crisis or emergency, to provide immediate and effective response\n\n\n\nP149377\n(...) mozambique to respond promptly and effectively to an eligible crisis or emergency.\n\n\n\n\n\n# Save the table as an HTML file\nwrite_rds(elcr_k, here(\"analysis\", \"output\", \"tables\" ,\"elcr_k.rds\"))\n\n— climate change ~ notable bigrams over FY [CMPL 🟠]\nFirst of all, let’s see what are the sentence that contain the bigram “eligible crisis” in the PDOs.\n\n# ---- Define the bigram you want to find\ntarget_bigram &lt;- \"climate change\"\n\n# # Filter sentences that contain the specific bigram\n# sentences_with_targ &lt;- sentences %&gt;%\n#    filter(stringr::str_detect(sentence, target_bigram))\n# \n# # Define how many words before and after the bigram to extract\n# words_before &lt;- 8  # Number of words before the bigram\n# words_after &lt;- 8   # Number of words after the bigram\n\n# Add the extracted bigram and surrounding words to the same dataframe\nsentences_with_climchang &lt;- sentences %&gt;%\n   filter(stringr::str_detect(sentence, target_bigram)) %&gt;% \n   mutate(closest_text = str_extract(sentence, \n                                     paste0(\"(\", # Start a capture group\n                                            # Match preceding words\n                                            \"(?:\\\\S+\\\\s+){0,\", words_before, \"}\", \n                                            target_bigram, \n                                            # Match following words\n                                            \"(?:\\\\s+\\\\S+){0,\", words_after, \"}\", \n                                            \")\"\n                                           ))) %&gt;% \n   # View the updated dataframe with the closest_text column\n   select(proj_id, pdo, sentence,\n          closest_text)\n\n\nThere are 92 projects, for which the PDO has a sentences containing the bigram “climate change”in the PDOs.\n\n[TBL] Close phrase around bigram “climate change”\nI want to know which of these commonly used phrases are most often found in the vicinity of the bigram “climate change” in the PDOs.\n\n# Count how often the phrase appears in the vicinity of the target bigram\nclose_words &lt;- sentences_with_climchang %&gt;%\n  mutate(contains_what = dplyr::case_when(\n     stringr::str_detect(sentence, \"mitigat\") ~ \"mitigate\",\n     stringr::str_detect(sentence, \"adapt\") ~ \"adapt\",\n     stringr::str_detect(sentence, \"vulnerab\") ~ \"vulnerability\",\n     stringr::str_detect(sentence, \"hazard\") ~ \"hazard\",\n     stringr::str_detect(sentence, \"resil\") ~ \"resilience\",\n     TRUE ~ \"...\"))\n \n# Count how often the phrase is found\nclose_words_sort &lt;-  close_words %&gt;% \n   filter(contains_what != \"...\") %&gt;% \n  group_by(contains_what) %&gt;% \n  summarise(count = n()) %&gt;% \n  mutate(percentage = scales::percent(count/sum(count))) %&gt;% \n   arrange(desc(count))\n\n# Specify the words to highlight\nhighlight_words &lt;- c(\"mitigate\")\nhighlight_words2 &lt;- c(  \"resilience\", \"adapt\")\n\n\nclch_close_k &lt;- close_words_sort %&gt;% \n   kable(format = \"html\", \n         col.names = c(\"Near 'climate change'\", \"Count\", \"Percentage\")) %&gt;% \n   kable_styling(full_width = FALSE) %&gt;% \n    # Light yellow background\n   row_spec(which(close_words_sort$contains_what %in% highlight_words), \n            background = \"#d8e600\") %&gt;% \n   row_spec(which(close_words_sort$contains_what %in% highlight_words2), \n            background = \"#a6bd23\")  \n\nclch_close_k\n\n\n\n\nNear 'climate change'\nCount\nPercentage\n\n\n\nvulnerability\n25\n39.1%\n\n\nmitigate\n14\n21.9%\n\n\nresilience\n14\n21.9%\n\n\nadapt\n6\n9.4%\n\n\nhazard\n5\n7.8%\n\n\n\n\n\n# save as object\nwrite_rds(clch_close_k, here(\"analysis\", \"output\", \"tables\" ,\"clch_close_k.rds\"))\n\n\n#   &lt;chr&gt;         &lt;int&gt;       &lt;chr&gt;     \n# 1 vulnerab         18       32.1%     \n# 2 mitigate         12       21.4%     \n# 3 resil            12       21.4%     \n# 4 hazard            9       16.1%     \n# 5 adapt             5       8.9% \n\nHere are a few examples of the sentences containing the bigram “climate change” and the words “mitigate|adaptation”:\n\nset.seed(888)\n# Filter the sentences that contain the phrase\nsentences_with_climchang2_k &lt;-  sentences_with_climchang %&gt;%\n   filter(proj_id != \"P125447\") %&gt;%\n   # add a column to identify the phrases\n   mutate(contains_what = case_when(\n      stringr::str_detect(closest_text, \"mitig\") ~ \"mitig\",\n      stringr::str_detect(closest_text, \"adapt\") ~ \"adapt\",\n      stringr::str_detect(closest_text, \"vulnerab\") ~ \"vulnerab\",\n      stringr::str_detect(closest_text, \"hazard\") ~ \"hazard\",\n      stringr::str_detect(closest_text, \"resil\") ~ \"resil\",\n      TRUE ~ \"...\")) %&gt;% \n   filter(contains_what != \"...\") %&gt;% \n   # take a random sample of 3  by word \n   group_by(contains_what) %&gt;% \n   slice_sample(n = 3, replace = FALSE ) %&gt;%\n   select(contains_what, proj_id, closest_text) %&gt;%\n   mutate(closest_text = paste0(\"(...) \", closest_text),\n          # Make \"mutate\" bold by adding &lt;b&gt; tags\n          closest_text = gsub(\"climate change\", \"&lt;b&gt;climate change&lt;/b&gt;\", closest_text), \n          # highlight the phrases by adding &lt;mark&gt; tags (adapt, mitigate, etc.)\n          closest_text = gsub(\"(?i)(adaptation|resilience)\", # (?i) makes the match case-insensitive.\n                              \"&lt;mark style='background-color: #a6bd23;'&gt;\\\\1&lt;/mark&gt;\", closest_text, perl = TRUE),\n          closest_text = gsub(\"(?i)(mitigation|mitigate)\",  \n                              \"&lt;mark style='background-color: #8e94d6;'&gt;\\\\1&lt;/mark&gt;\", closest_text, perl = TRUE),\n          closest_text = gsub(\"(?i)(hazard|vulnerability)\", \n                              \"&lt;mark style='background-color: #e28293;'&gt;\\\\1&lt;/mark&gt;\", closest_text, perl = TRUE)\n          )\n\n# save as object\nwrite_rds(sentences_with_climchang2_k, here(\"analysis\", \"output\", \"tables\" ,\"sentences_with_climchang2_k.rds\"))\n\n\n#paint(sentences_with_climchang2_k)\n\n# Prepare the kable table with subheaders based on 'contains_what'\nsentences_with_climchang2_k %&gt;%\n  ungroup() %&gt;%\n  arrange(contains_what) %&gt;%\n  select(contains_what, proj_id, closest_text) %&gt;%\n  kable(format = \"html\", \n        escape = FALSE,\n        col.names = c(\"Near word (root)\", \"WB Project ID\", \"Closest Text\")) %&gt;%\n  kable_styling(full_width = FALSE)   \n\n\n\n\nNear word (root)\nWB Project ID\nClosest Text\n\n\n\nadapt\nP090731\n(...) pilot adaptation measures addressing primarily, the impacts of climate change on their natural resource base, focused on biodiversity\n\n\nadapt\nP120170\n(...) a multi-sectoral dpl to enhance climate change adaptation capacity is anticipated in the cps.\n\n\nadapt\nP129375\n(...) objectives of the project are to: (i) integrate climate change adaptation and disaster risk reduction across the recipient’s\n\n\nhazard\nP174191\n(...) and health-related hazards, including the adverse effects of climate change and disease outbreaks.\n\n\nhazard\nP123896\n(...) agencies to financial protection from losses caused by climate change and geological hazards.\n\n\nhazard\nP117871\n(...) buildings and infrastructure due to natural hazards or climate change impacts; and (b) increased capacity of oecs governments\n\n\nmitig\nP074619\n(...) to help mitigate global climate change through carbon emission reductions (ers) of 138,000 tco2e\n\n\nmitig\nP164588\n(...) institutional capacity for sustainable agriculture, forest conservation and climate change mitigation.\n\n\nmitig\nP094154\n(...) removing carbon from the atmosphere and to mitigateclimate change in general.\n\n\nresil\nP154784\n(...) to increase agricultural productivity and build resilience to climate change risks in the targeted smallholder farming and pastoralcommunities\n\n\nresil\nP112615\n(...) the resilience of kiribati to the impacts of climate change on freshwater supply and coastal infrastructure.\n\n\nresil\nP157054\n(...) to improve durability and enhance resilience to climate change\n\n\n\nvulnerab\nP149259\n(...) to measurably reduce vulnerability to natural hazards and climate change impacts in grenada and in the eastern caribbean\n\n\nvulnerab\nP146768\n(...) at measurably reducing vulnerability to natural hazards and climate change impacts in the eastern caribbean sub-region.\n\n\nvulnerab\nP117871\n(...) at measurably reducing vulnerability to natural hazards and climate change impacts in the eastern caribbean sub-region.\n\n\n\n\n\n   # Add subheaders based on the unique values in `contains_what`\n  #group_rows(index = table(sentences_with_climchang2$contains_what))"
  },
  {
    "objectID": "analysis/01b_WB_project_pdo_EDA.html#keyword-in-context-kwic",
    "href": "analysis/01b_WB_project_pdo_EDA.html#keyword-in-context-kwic",
    "title": "WB Project PDO text EDA",
    "section": "— Keyword In Context (KWIC)",
    "text": "— Keyword In Context (KWIC)\n\n\n\nKeyword In Context (KWIC), or concordances, are the most frequently used method in corpus linguistics. The idea is very intuitive: we get to know more about the semantics of a word by examining how it is being used in a wider context.\nUsually, the process involves: 1) tokenizing the text, 2) perform a search for a word and retrieve its concordances from the corpus. Typically, these extractions are displayed through keyword-in-context displays (KWICs), where the search term, also referred to as the node word, is showcased within its surrounding context, comprising both preceding and following words."
  },
  {
    "objectID": "analysis/01b_WB_project_pdo_EDA.html#concordances",
    "href": "analysis/01b_WB_project_pdo_EDA.html#concordances",
    "title": "WB Project PDO text EDA",
    "section": "— Concordances",
    "text": "— Concordances\n\n\n\n\nUsing quanteda\n\nfile:///Users/luisamimmi/Github/slogan_old/docs/01b_WDR_data-exploration_abstracts.html\n\n# I use again data = pdo_words\npdo_q_corpus &lt;- quanteda::corpus(as.data.frame(projs_train), \n                               docid_field = \"id\",\n                               text_field = \"pdo\",\n                               meta = list(\"pr_name\", \"boardApprovalFY\")\n)\n \n# --- example with individual keyword \n# Step 1) tokens\npdo_q_tokens &lt;- quanteda::tokens(x = pdo_q_corpus,\n                       remove_punct = TRUE,\n                       remove_symbols = TRUE#,remove_numbers = TRUE\n ) %&gt;% \n  quanteda::tokens_tolower() #%&gt;%\n #quanteda::tokens_remove(pattern = custom_stop_words) %&gt;%\n #quanteda::tokens_remove(pattern = c(\"project\", \"development\", \"bank\", \"world\", \"project\", \"projects\"))\n                                      \n# #______ Step 2) kwic (individual exe )\n# kwic_pdo_data &lt;- quanteda::kwic(x = pdo_q_tokens, # define text(s)\n#                                  # define pattern\n#                                  pattern = quanteda::phrase(c(\"gender\", \"climate\", \"sustainab*\")),\n#                                  # define window size\n#                                  window = 5) %&gt;%\n#     # convert into a data frame\n#     as_tibble() %&gt;%\n#     left_join(projs_train, by = c(\"docname\" =  \"id\")) %&gt;%\n#     # remove superfluous columns\n#      dplyr::select( 'Year' = boardapprovalFY, 'Prj title' = pr_name, pre, keyword, post) %&gt;%\n#   #  slice_sample( n = 50) %&gt;%\n#    kbl(align = \"c\") # %&gt;% kable_styling()\n \n# ____ Step 2) kwic (on vector)\n# Iterate `quanteda::kwic` over a vector of tokens | regex-modified-keywords\nkeywords &lt;- c(\"gender\", \"climate\", \"sustainab*\", \"conditional*\" )\n\n# apply iteratively kwic over a vector of keywords\noutputs_key &lt;-  map(keywords, \n      ~quanteda::kwic(pdo_q_tokens,\n                      pattern =  .x,\n                      window = 5) %&gt;% \n        as_tibble() %&gt;%\n        left_join(projs_train, by = c(\"docname\" =  \"id\")) %&gt;%  \n        # remove superfluous columns\n       dplyr::select( 'Year' = boardapprovalFY, 'Prj title' = pr_name, pre, keyword, post)\n  )\n\n# # all togetha 3\nn = length(keywords)\n\n# check the first element  \noutputs_key[[1]] %&gt;%\n   kbl(align = \"c\")\noutputs_key[[2]] %&gt;%\n   kbl(align = \"c\")\n\n# this list  has no element names \nnames(outputs_key)\n\n— create kwic with phrases | purrr + print + save png\n\n# Iterate `quanteda::kwic` over a vector of phrases/bigrams \nkeywords_phrase &lt;- c(\"pro-poor\", \"gender equality\", \"gender mainstreaming\" )\n \n# Step 1) tokens\n# (done above) -&gt; abs_q_tokens\n\n# Step 2) kwic \n# apply iteratively kwic over a vector of bigrams\noutputs_bigrams &lt;- map(keywords_phrase,\n                       ~quanteda::kwic(x = pdo_q_tokens, # define text(s) \n                                       # define pattern\n                                       pattern = quanteda::phrase(.x),\n                                       # define window size\n                                       window = 5) %&gt;%\n                          # convert into a data frame\n                          as_tibble() %&gt;%\n                          left_join(projs_train, by = c(\"docname\" =  \"id\")) %&gt;%  \n                          ## remove superfluous columns\n                          dplyr::select( 'Year' = boardapprovalFY, 'Prj title' = pr_name, pre, keyword, post)\n)  \n\n#  number ofo cbigrams \nn_bi = length(keywords_phrase)\nn_bi # 7\n# name this list's elements \noutputs_bigrams &lt;- outputs_bigrams %&gt;% \n  set_names(paste0(\"kwic_\", keywords_phrase))  \n\n# get rid of empty output dfs in list  \noutputs_bigrams2 &lt;- outputs_bigrams[sapply(\n  outputs_bigrams, function(x) dim(x)[1]) &gt; 0] # 4 left!\n \n#or \noutputs_bigrams3 &lt;- purrr::keep(outputs_bigrams, ~nrow(.) &gt; 0)  # 4 left!\n\n# -------------- print all \n#  walk + print -\n#walk(.x = outputs_bigrams2, .f = print)\n\n\n# -------------- save  all -&gt; create multiple tables from a single dataframe and save them as images\n# https://stackoverflow.com/questions/69323569/how-to-save-multiple-tables-as-images-using-kable-and-map/69323893#69323893\n\nout_dir_tab &lt;-  here::here(\"analysis\", \"output\",\"tables\")\n \noutputs_bigrams2  %&gt;%\n  imap(~save_kable(file = paste0(out_dir_tab, '/', 'pdo_', .y, '_.png'),\n                   # bs_theme = 'journal', \n                   self_contained = T, \n                   x = kbl(.x, booktabs = T, align = c('l','l', 'c')) %&gt;%\n                     kable_styling() \n  )\n  )"
  },
  {
    "objectID": "analysis/01b_WB_project_pdo_EDA.html#compare-pdo-words-v-sector-the-tag",
    "href": "analysis/01b_WB_project_pdo_EDA.html#compare-pdo-words-v-sector-the-tag",
    "title": "WB Project PDO text EDA",
    "section": "COMPARE PDO words v sector (the tag)",
    "text": "COMPARE PDO words v sector (the tag)\nBasically I want to compare the trend over time of the frequency of my custom sector word (pdo_train_t$tok_sector_broad) in the PDO text, against the frequency of the sector tag in the dataset (sector1).\n—- make sector1_broad\n\n\nTHIS STARTs FROM projs_train bc I needed the PROJECTS\n\n\n# Data input\ntabyl(projs_train$sector1)   \n\n# let's select some clear cut sectors e.g. WATER AND SANITATION\nprojs_train &lt;- projs_train %&gt;%\n   mutate (sector1_broad = case_when(\n      # WAT_SAN\n      sector1 == \"Other Water Supply, Sanitation and Waste Management\" ~ \"WAT_SAN\",\n      sector1 == \"Public Administration - Water, Sanitation and Waste Management\" ~ \"WAT_SAN\",\n      sector1 == \"Sanitation\" ~ \"WAT_SAN\",\n      sector1 == \"Water Supply\" ~ \"WAT_SAN\",\n      sector1 == \"Waste Management\" ~ \"WAT_SAN\",\n      # ENERGY\n      sector1 == \"Energy Transmission and Distribution\" ~ \"ENERGY\",\n      sector1 == \"Non-Renewable Energy Generation\" ~ \"ENERGY\",\n      sector1 == \"Other Energy and Extractives\" ~ \"ENERGY\",\n      sector1 == \"Public Administration - Energy and Extractives\" ~ \"ENERGY\",\n      sector1 == \"Renewable Energy Biomass\"  ~ \"ENERGY\", \n      sector1 == \"Renewable Energy Geothermal\"  ~ \"ENERGY\", \n      sector1 == \"Renewable Energy Hydro\"  ~ \"ENERGY\", \n      sector1 == \"Renewable Energy Solar\"  ~ \"ENERGY\", \n      sector1 == \"Renewable Energy Wind\"  ~ \"ENERGY\", \n      sector1 == \"Renewable energy\"  ~ \"ENERGY\", \n      \n      # TRANSPORT\n      sector1 == \"Other Transportation\" ~ \"TRANSPORT\",\n      sector1 == \"Public Administration - Transportation\" ~ \"TRANSPORT\",\n      sector1 == \"Urban Transport\" ~ \"TRANSPORT\",\n      sector1 == \"Rural and Inter-Urban Roads\" ~ \"TRANSPORT\",\n      sector1 == \"Roads and highways\" ~ \"TRANSPORT\",\n      sector1 == \"Ports/Waterways\" ~ \"TRANSPORT\",\n      sector1 == \"Railways\" ~ \"TRANSPORT\",\n      sector1 == \"Airports\" ~ \"TRANSPORT\",\n        # URBAN\n      #niente  \n      #  MINING_OIL_GAS\n      sector1 == \"MINING_OIL_GAS\" ~ \"MINING_OIL_GAS\",\n      sector1 == \"Oil and Gas\" ~ \"MINING_OIL_GAS\",\n      # ICT\n      sector1 == \"ICT Infrastructure\" ~ \"ICT\",\n      sector1 == \"ICT Services\" ~ \"ICT\",\n      sector1 == \"Public Administration - Information and Communications Technologies\" ~ \"ICT\",\n      sector1 == \"Other Information and Communications Technologies\" ~ \"ICT\",\n     # EDUCATION\n      sector1 == \"Other Education\" ~ \"EDUCATION\",\n      sector1 == \"Primary education\" ~ \"EDUCATION\",\n      sector1 == \"Public Administration - Education\" ~ \"EDUCATION\",\n      sector1 == \"Tertiary education\" ~ \"EDUCATION\",\n      sector1 == \"Secondary education\" ~ \"EDUCATION\",\n      sector1 == \"Workforce Development and Vocational Education\" ~ \"EDUCATION\",\n      sector1 == \"Adult, Basic and Continuing Education\" ~ \"EDUCATION\",\n      sector1 == \"Early Childhood Education\" ~ \"EDUCATION\",\n      # HEALTH\n      sector1 == \"Health\" ~ \"HEALTH\",\n      sector1 == \"Public Administration - Health\" ~ \"HEALTH\",\n      sector1 == \"Health facilities and construction\" ~ \"HEALTH\",\n       # else\n      TRUE ~ sector1\n   ))\n\n# check\npdo_train_t %&gt;% \n   filter(tok_sector_broad %in% \n             c(\"WAT_SAN\", \"ENERGY\", \"TRANSPORT\", \"MINING_OIL_GAS\", \"ICT\", \"EDUCATION\", \"HEALTH\")) %&gt;%\n   tabyl(tok_sector_broad, show_missing_levels =  T) \n\n\nprojs_train %&gt;% \n   filter(sector1_broad %in% \n             c(\"WAT_SAN\", \"ENERGY\", \"TRANSPORT\", \"MINING_OIL_GAS\",           \"ICT\", \"EDUCATION\", \"HEALTH\")) %&gt;% \n   tabyl(sector1_broad) \n\n—- prep data sector_broad_tag\n\n\npaint(projs_train )\n\n# prep data\nsector_broad_tag &lt;- projs_train %&gt;% \n      mutate(FY_appr = boardapprovalFY) %&gt;%\n   filter(!is.na(sector1_broad)) %&gt;% \n   filter(sector1_broad %in% \n             c(\"WAT_SAN\", \"ENERGY\", \"TRANSPORT\", \"MINING_OIL_GAS\",           \"ICT\", \"EDUCATION\", \"HEALTH\")) %&gt;% \n   select (FY_appr,  sector1_broad )  %&gt;% \n   # count(FY_appr, sector1_broad) %&gt;% \n   # filter(n &gt; 0) %&gt;% \n   mutate(sector1_broad = factor(sector1_broad, levels = c(\n      \"WAT_SAN\", \"ENERGY\", \"TRANSPORT\",#\"URBAN\",\n      \"MINING_OIL_GAS\",\"ICT\", \"HEALTH\", \"EDUCATION\" ))) # reorder values by frequency\n#df$FY\n\n\n# data long by sector1_broad (sector_broad_tag)\npaint(sector_broad_tag)\n\n# which tag_sector (gia tolto NA!!!)\n#tabyl(sector_broad_tag$sector1 )\ntabyl(sector_broad_tag$sector1_broad )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n—- [FUNC] Plot each tag sector\nHere I have much bigger numbers\n\n# --- Split data long into a LIST of subset by sector\nsector_list &lt;- base::split(x =  sector_broad_tag, f = sector_broad_tag$sector1_broad)\nstr(sector_list) \n \n# --- FUNCTION to plot iteratively each sector (like f_plot_sector)\nf_plot_tag_sector &lt;- function( name_sec){\n # Ensure name_sec is treated as a character\n   data_sec &lt;- sector_list[[as.character(name_sec)]]\n #  data_sec &lt;- sector_list[[\"ENERGY\"]]\n\n      data_sec &lt;- data_sec %&gt;% \n      group_by(FY_appr)  %&gt;% \n       count() %&gt;% \n       ungroup() #%&gt;% \n      # #mutate(FY_appr = as.Date(FY_appr, format = \"%Y-%m-%d\"))\n   \n   # plot\n   ggplot(data = data_sec, aes(x = FY_appr, y = n)) +\n      geom_line(color = sector_colors[name_sec], linetype = \"dotted\", alpha = 0.5, size = 1) +   \n      geom_point(color = sector_colors[name_sec], size = 3) +     \n      scale_x_continuous(breaks = seq(2001, 2023, by = 1)) +\n      scale_y_continuous(breaks = seq(0, max(data_sec$n), by = 5)) +\n      labs(title = name_sec, x = \"Year\", y = \"Number of projects\") +\n      # custom\n      lulas_theme + \n      theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n      labs(\n         title = paste(\"\\\"\",name_sec,\"\\\" in tag by fiscal years of approval\"),  # Use facet-specific title\n         subtitle = \"[Using variable \\\"sector1\\\"]\",\n         x = \"\", \n         y = \"\"  # Remove y-axis label\n      ) \n\n}\n\n# --- Plot one sector \n# name_sec EDUCATION    ENERGY    HEALTH       ICT     MINING_OIL_GAS TRANSPORT    WAT_SAN \n# data_sec EX sector_list[[\"WAT_SAN\"]]\nf_plot_tag_sector( name_sec = \"WAT_SAN\")\nf_plot_tag_sector( name_sec = \"ENERGY\")\nf_plot_tag_sector( name_sec = \"TRANSPORT\")\nf_plot_tag_sector( name_sec = \"ICT\")\nf_plot_tag_sector( name_sec = \"HEALTH\")\nf_plot_tag_sector( name_sec = \"EDUCATION\")\n# Use purrr::map to apply the function over the names of sector_list\n map(names(sector_list), f_plot_tag_sector)"
  },
  {
    "objectID": "analysis/01b_WB_project_pdo_EDA.html#combine-two-sets-of-data-sector_broad_tag-and-sector_broad_pdo",
    "href": "analysis/01b_WB_project_pdo_EDA.html#combine-two-sets-of-data-sector_broad_tag-and-sector_broad_pdo",
    "title": "WB Project PDO text EDA",
    "section": "—- Combine two sets of data sector_broad_tag and sector_broad_pdo\n",
    "text": "—- Combine two sets of data sector_broad_tag and sector_broad_pdo\n\n\n# not sure why \nsector_broad_tag &lt;- sector_broad_tag %&gt;% \n   count(FY_appr, sector1_broad)\n\n# Combine two sets of data\nstr(sector_broad_pdo)\nstr(sector_broad_tag)\n\nsector_broad_combo &lt;- left_join(sector_broad_pdo, sector_broad_tag, \n                                by = c(\"FY_appr\", \"tok_sector_broad\" = \"sector1_broad\") ,\n                                suffix = c(\"_pdo\", \"_tag\")\n                                ) %&gt;% \n   filter (!is.na(n_tag))\n\nsector_broad_combo\n\n— [TAB] Kolmorogov-Smirnov test test of similarity with a table\nIn Kolmorogov-Smirnov test:\n\nthe null hypothesis is that the two distributions are the same\n\nThe alternative hypothesis is that the two distributions are different.\n\n\nThe test statistic is the maximum difference between the two cumulative distribution functions. The p-value is the probability of observing a test statistic as extreme as the one observed, assuming the null hypothesis is true.\n\n# Function to calculate KS test results and save to a table without plotting\nks_results_k &lt;- sector_broad_combo  %&gt;%\n   group_by(tok_sector_broad) %&gt;%\n   summarize(\n      # ks_alt_hyp = ks.test(\n      #   (n_pdo - min(n_pdo)) / (max(n_pdo) - min(n_pdo)),\n      #   (n_tag - min(n_tag)) / (max(n_tag) - min(n_tag))\n      # )$alternative, \n \n      # a) with normalization     \n      ks_statistic = ks.test(\n         (n_pdo - min(n_pdo)) / (max(n_pdo) - min(n_pdo)),\n         (n_tag - min(n_tag)) / (max(n_tag) - min(n_tag)))$statistic, \n      \n      ks_p_value = ks.test(\n         (n_pdo - min(n_pdo)) / (max(n_pdo) - min(n_pdo)),\n         (n_tag - min(n_tag)) / (max(n_tag) - min(n_tag)))$p.value,\n      similarity = ifelse(ks_p_value &gt; 0.05, \"Similar\", \"Dissimilar\"),\n      \n      # # b) without normalization\n      #  ks_statistic_raw = ks.test(n_pdo, n_tag)$statistic,\n      #  ks_p_value_raw = ks.test(n_pdo, n_tag)$p.value,\n       ) %&gt;%\n   ungroup()  %&gt;% \n   arrange(ks_p_value)\n\n# save as object\nwrite_rds(ks_results_k, here(\"analysis\", \"output\", \"tables\" ,\"ks_results_k.rds\"))\n\n# Count how often the phrase appears in the vicinity of the target bigram\nks_results_k %&gt;% \n   kable(format = \"html\", \n         col.names = c(\"SECTORS\", \"KS statistic\",\"KS p-value\",  \"Distributions\"#, \"KS statistic R\",\"KS p-valueR\" \n                       ),\n         # Round  to 4 digits) \n         digits = c(0, 4, 4, 0#, 4,4\n                    )) %&gt;% \n   kable_styling(full_width = FALSE) %&gt;%\n   row_spec(which(ks_results_k$similarity == \"Dissimilar\"), background = \"#e7d8da\")\n\n\n\n\nSECTORS\nKS statistic\nKS p-value\nDistributions\n\n\n\nENERGY\n0.6522\n0.0001\nDissimilar\n\n\nHEALTH\n0.3913\n0.0487\nDissimilar\n\n\nWAT_SAN\n0.3913\n0.0544\nSimilar\n\n\nEDUCATION\n0.3478\n0.1002\nSimilar\n\n\nICT\n0.2857\n0.3399\nSimilar\n\n\nMINING_OIL_GAS\n0.3333\n0.3442\nSimilar\n\n\nTRANSPORT\n0.2174\n0.6410\nSimilar\n\n\n\n\n\n\nAdditional plots\n— [FIG] Kolmogorov-Smirnov Test for Similarity of PDO and TAG Distributions by Sector\n\nks_results_k %&gt;% \n   ggplot(aes(x = reorder(tok_sector_broad, ks_p_value), y = ks_p_value)) +\n   geom_col(fill = \"#0073C2FF\") +\n   geom_text(aes(label = round(ks_p_value, 4)), vjust = -0.5) +\n   coord_flip() +\n   labs(\n      title = \"Kolmogorov-Smirnov Test for Similarity of PDO and TAG Distributions by Sector\",\n      x = \"Sector\",\n      y = \"P-Value\"\n   ) +\n   theme_minimal() +\n   theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\nFigure 1: Kolmogorov-Smirnov Test for Similarity of PDO and TAG Distributions by Sector\n\n\n\n\n\n\n\n— [FIG] Correlation between PDO and TAG by sector\nCorrelation Coefficients: Display the correlation between n_pdo and n_tag within each sector\n\nsector_broad_combo %&gt;%\n   ggplot(aes(x = n_pdo, y = n_tag)) +\n   geom_point() +\n   geom_smooth(method = \"lm\", se = FALSE) +\n   facet_wrap(~tok_sector_broad, scales = \"free\") +\n   labs(\n      title = \"Correlation between PDO and TAG by Sector\",\n      x = \"Normalized PDO\",\n      y = \"Normalized TAG\"\n   ) +\n   theme_minimal()\n\n\n\nFigure 2: Correlation between PDO and TAG by sector"
  },
  {
    "objectID": "analysis/01b_WB_project_pdo_EDA.html#compare-pdo-words-v-sector",
    "href": "analysis/01b_WB_project_pdo_EDA.html#compare-pdo-words-v-sector",
    "title": "WB Project PDO text EDA",
    "section": "COMPARE PDO words v sector ($$)",
    "text": "COMPARE PDO words v sector ($$)\n—- count of PDO with sector words sector_broad_pdo corresponding to each tok_sector_broad per year\nThis is a count of OBS per cell\n\nsector_broad_pdo   # 345\n\n—- sum of sum_curr_total_commitment corresponding to each sector1_broad per year\n\nTHIS STARTs FROM projs_train bc I needed the PROJECTS\n\n\n# prep data\nsector_broad_commit &lt;- projs_train %&gt;% \n   select(FY_appr = boardapprovalFY, sector1_broad, curr_total_commitment) %&gt;% \n   # group_by(FY_appr, sector1_broad) %&gt;% \n   # summarise(sum_curr_total_commitment = sum(curr_total_commitment)) %&gt;% \n   # ungroup() %&gt;% \n   # mutate(FY_appr = as.character(FY_appr)) %&gt;% \n   filter (sector1_broad %in% c(\"WAT_SAN\", \"ENERGY\",\"TRANSPORT\", \"MINING_OIL_GAS\", \"ICT\", \"HEALTH\", \"EDUCATION\", \"URBAN\")) %&gt;% \n   mutate(FY_appr = as.numeric(FY_appr)) %&gt;% \n   arrange(sector1_broad,FY_appr) %&gt;% \n   group_by(sector1_broad, FY_appr ) %&gt;% \n   summarise(sum_commit = sum(curr_total_commitment) , .groups = \"drop\") %&gt;%\n   complete(sector1_broad, FY_appr = full_seq(FY_appr, 1), fill = list(sum_commit = 0))  # Fill missing years\n\n\nsector_broad_pdo &lt;- sector_broad_pdo %&gt;% \n   filter(tok_sector_broad %in% c(\"WAT_SAN\", \"ENERGY\",\"TRANSPORT\", \"MINING_OIL_GAS\", \"ICT\", \"HEALTH\", \"EDUCATION\" ))  \n\npaint(sector_broad_pdo)\nnrow(sector_broad_pdo) # 161 \ntabyl(sector_broad_pdo$tok_sector_broad, show_missing_levels = F, show_na = F)  \ntabyl(sector_broad_pdo$FY_appr, show_missing_levels = F, show_na = F)  \n\npaint(sector_broad_commit)\nnrow(sector_broad_commit) # 161  \ntabyl(sector_broad_commit$sector1_broad, show_missing_levels = F, show_na = F)  \ntabyl(sector_broad_commit$FY_appr, show_missing_levels = F, show_na = F)  \n\n\n# merge the two datasets\nsector_broad_pdo_comm &lt;-  left_join (sector_broad_pdo, sector_broad_commit, by = c(\"tok_sector_broad\" = \"sector1_broad\", \"FY_appr\" = \"FY_appr\"))  \n\n— [TAB] Kolmorogov-Smirnov test test of similarity with a table\nIn Kolmorogov-Smirnov test:\n\nthe null hypothesis is that the two distributions are the same\n\nThe alternative hypothesis is that the two distributions are different.\n\n\nThe test statistic is the maximum difference between the two cumulative distribution functions. The p-value is the probability of observing a test statistic as extreme as the one observed, assuming the null hypothesis is true.\n\n# Function to calculate KS test results and save to a table without plotting\nks_results2_k &lt;- sector_broad_pdo_comm  %&gt;%\n   group_by(tok_sector_broad) %&gt;%\n   # min -max normalization\n   mutate(n_scaled = (n - min(n, na.rm = TRUE)) / \n             (max(n, na.rm = TRUE) - min(n, na.rm = TRUE)),\n          sum_commit_scaled = (sum_commit - min(sum_commit, na.rm = TRUE)) / \n             (max(sum_commit, na.rm = TRUE) - min(sum_commit, na.rm = TRUE)) ) %&gt;%\n   summarize(\n      # -- a) with normalization     \n      ks_statistic = ks.test(n_scaled, sum_commit_scaled)$statistic,\n      ks_p_value = ks.test(n_scaled, sum_commit_scaled )$p.value,\n      similarity = ifelse(ks_p_value &gt; 0.05, \"Similar\", \"Dissimilar\"),\n      # -- b) without normalization\n      #  ks_statistic_raw = ks.test(n_pdo, n_tag)$statistic,\n      #  ks_p_value_raw = ks.test(n_pdo, n_tag)$p.value,\n       ) %&gt;%\n   ungroup()  %&gt;% \n   arrange(ks_p_value)\n\n# save as object\nwrite_rds(ks_results2_k, here(\"analysis\", \"output\", \"tables\" ,\"ks_results2_k.rds\"))\n\n# Count how often the phrase appears in the vicinity of the target bigram\nks_results2_k %&gt;% \n   kable(format = \"html\", \n         col.names = c(\"SECTORS\", \"KS statistic\",\"KS p-value\",  \"Distributions\"#, \"KS statistic R\",\"KS p-valueR\" \n                       ),\n         # Round  to 4 digits) \n         digits = c(0, 4, 4, 0#, 4,4\n                    )) %&gt;% \n   kable_styling(full_width = FALSE) %&gt;%\n   row_spec(which(ks_results2_k$similarity == \"Dissimilar\"), background = \"#e7d8da\")\n\n\n\n\nSECTORS\nKS statistic\nKS p-value\nDistributions\n\n\n\nEDUCATION\n0.6522\n0.0001\nDissimilar\n\n\nICT\n0.6522\n0.0001\nDissimilar\n\n\nHEALTH\n0.5652\n0.0010\nDissimilar\n\n\nMINING_OIL_GAS\n0.5217\n0.0031\nDissimilar\n\n\nENERGY\n0.3478\n0.1235\nSimilar\n\n\nTRANSPORT\n0.2609\n0.4218\nSimilar\n\n\nWAT_SAN\n0.2609\n0.4218\nSimilar\n\n\n\n\n\n\n— [FUNC] standardize and plot\n\n\nStandardization is done by subtracting the mean and dividing by the standard deviation. This is done for both the n and sum_commit columns. In this way we can compare the two distributions on the same scale.\n\nRobust Scaling: Subtract the median and divide by the IQR. This is more robust to outliers than standardization, but it doesn’t ensure the distributions have the same variance.\n✅ Min-Max Scaling: Rescale both n and sum_commit to a [0, 1] range. This doesn’t assume normality and ensures both distributions are within the same bounds, though it doesn’t account for the shape of the distributions.\n\n\nrobust or min-max scaling alternatives can provide more reliable comparisons, especially with skewed data.\n\n\n\nKolmogorov-Smirnov (KS) Test P-Values: Display the p-value from a Kolmogorov-Smirnov test comparing rescaled trends within each sector producing a p-value that indicates the probability of observing these distributions if they were the same.\n\nDIFFERENT = A low p-value (typically &lt; 0.05) suggests the distributions are significantly different, while a higher p-value suggests similarity.\nSIMILAR = A high p-value does not necessarily mean the distributions are identical, only that there is not enough evidence to reject the null hypothesis of similarity.\nThe KS test is non-parametric and makes no assumptions about the underlying distributions, making it a versatile tool for comparing distributions.\n\n\n\n\n# --- FUNCTION to 1) standardize 2 distributions and 2) plot iteratively each sector  \nf_plot_sector_comm &lt;- function(data, sector) {\n\n      # ---- Filter data for the specified sector\n   sector_data &lt;- data %&gt;%\n      filter(tok_sector_broad == sector) %&gt;%\n      group_by(tok_sector_broad) %&gt;%\n      # # ---- Standardize n and sum_commit within each sector\n      # mutate(n_standardized = (n - mean(n, na.rm = TRUE)) / sd(n, na.rm = TRUE),\n      #        sum_commit_standardized = (\n      #           sum_commit - mean(sum_commit, na.rm = TRUE)) / sd(sum_commit, na.rm = TRUE)) %&gt;%\n      # ---- Min-Max Scaling\n      mutate(n_scaled = (n - min(n, na.rm = TRUE)) / \n                (max(n, na.rm = TRUE) - min(n, na.rm = TRUE)),\n             sum_commit_scaled = (sum_commit - min(sum_commit, na.rm = TRUE)) / \n                (max(sum_commit, na.rm = TRUE) - min(sum_commit, na.rm = TRUE)) ) %&gt;%\n      ungroup()\n\n      # ---- Calculate Spearman correlation and KS test p-value for the selected sector\n   sector_stats &lt;- sector_data %&gt;%\n      summarize(\n         spearman_cor = cor(n_scaled, sum_commit_scaled, method = \"spearman\", use = \"complete.obs\"),\n         ks_p_value = ks.test(n_scaled, sum_commit_scaled)$p.value,\n         similarity = ifelse(ks_p_value &gt; 0.05, \"Similar\", \"Dissimilar\")\n      )\n\n      \n   # Extract the color for the sector line (you can set a specific color or use ggplot's color palette)\n   pdo_color &lt;- \"#8e550a\" # Get a color from ggplot's default palette\n   commit_color &lt;-\"#00689D\"  # Set a color for the secondary line\n   \n   # Plot the data for the selected sector\n   ggplot(sector_data, aes(x = FY_appr)) +\n      # --- geom_bar for rel_freq_n_pdo\n      geom_line(aes(y = n_scaled), color = pdo_color, alpha = 0.75) +\n      geom_point(aes(y = n_scaled), color = pdo_color, alpha = 0.75, size = 2) +\n      # --- geom_line and geom_point for rel_freq_commitment\n      geom_line(aes(y = sum_commit_scaled ), color = commit_color, linetype = \"dashed\" ) +\n      geom_point(aes(y = sum_commit_scaled), color = commit_color, size = 2) +\n      # --- scale\n      scale_x_continuous(breaks = seq(2001, 2023, by = 1)) +\n      scale_y_continuous(\n         name = \"N words in PDOs (mean = 0, sd = 1)\",\n         sec.axis = sec_axis(~., name = \"$$ Committed (mean = 0, sd = 1)\")\n      ) +\n      \n            # --- Annotate KS test results directly on the plot\n      annotate(\n         \"text\", x = Inf, y = Inf, label = paste(\"KS test p-value:\", round(sector_stats$ks_p_value, 4)),\n         hjust = 1.1, vjust = 1.1, color = \"black\", size = 4\n      ) +\n      \n       # Customize colors and set common legend title\n        labs(\n         title = paste(\"Word frequency in PDO v. amount committed for\", sector),\n         subtitle = \"n_pdo and sum_commit are rescaled with Min-Max scaling \\nKolmogorov-Smirnov test for similarity between the two trends\",\n         x = \"\"\n      ) +\n     \n      # custom\n      lulas_theme + \n      theme(   legend.position = \"none\",\n               axis.text.x = element_text(angle = 45, hjust = 1),\n               axis.title.y = element_text(color = pdo_color ), \n               axis.title.y.right = element_text(color =  commit_color ) \n      )\n}\n# --- Plot one sector \n# name_sec EDUCATION    ENERGY    HEALTH       ICT     MINING_OIL_GAS TRANSPORT    WAT_SAN \n# data_sec EX sector_list[[\"WAT_SAN\"]]\nf_plot_sector_comm(sector_broad_pdo_comm, sector = \"TRANSPORT\") # KS p-val = 0.42 similar\nf_plot_sector_comm(sector_broad_pdo_comm, sector = \"WAT_SAN\") # KS p-val = 0.42 similar \nf_plot_sector_comm(sector_broad_pdo_comm, sector = \"ENERGY\") # KS p-val = 0.12 similar\nf_plot_sector_comm(sector_broad_pdo_comm, sector = \"ICT\") # KS p-val = 0.0001 DIFFERENT\nf_plot_sector_comm(sector_broad_pdo_comm, sector = \"HEALTH\") # KS p-val = 0.001 DIFFERENT\nf_plot_sector_comm(sector_broad_pdo_comm, sector = \"EDUCATION\") # KS p-val = 0.0001 DIFFERENT\n# many with non commitment \nf_plot_sector_comm(sector_broad_pdo_comm, sector = \"MINING_OIL_GAS\") # KS p-val = 0.0031 DIFFERENT\n\n— [FIG] Plot sector WAT_SAN\n\nvery similar trends in PDO and commitment\n\n\n\n\nFigure 10\n\n\n\n\n\n\n\n— [FIG] Plot sector ICT\n\nvery different trends in PDO and commitment\n\n\n\n\nFigure 11"
  },
  {
    "objectID": "analysis/01a_WB_project_pdo_prep.html",
    "href": "analysis/01a_WB_project_pdo_prep.html",
    "title": "WB Project PDOs Data Preprocessing",
    "section": "",
    "text": "Warning\n\n\n\n\n\nWORK IN PROGRESS! (Please expect unfinished sections, and unpolished code. Feedback is welcome!)"
  },
  {
    "objectID": "analysis/01a_WB_project_pdo_prep.html#ingest-projects-data-manually-from-.xlsx-file",
    "href": "analysis/01a_WB_project_pdo_prep.html#ingest-projects-data-manually-from-.xlsx-file",
    "title": "WB Project PDOs Data Preprocessing",
    "section": "✅ Ingest Projects data (manually from *.xlsx file)",
    "text": "✅ Ingest Projects data (manually from *.xlsx file)\n\nall_projects_as_of29ago2024 &lt;- read_excel(here::here (\"data\", \"raw_data\", \"project2\",\"all_projects_as_of29ago2024.xls\"), \n                                            col_names = FALSE,\n                                            skip = 1) \n# Nomi delle colonne\ncnames &lt;- read_excel(here::here(\"data\", \"raw_data\", \"project2\", \n                                \"all_projects_as_of29ago2024.xls\"), \n                         col_names = FALSE,\n                         skip = 1,\n                     n_max = 2) \n# file completo\nall_proj &lt;- read_excel(here::here(\"data\", \"raw_data\", \"project2\", \n                                  \"all_projects_as_of29ago2024.xls\"), \n                         col_names = TRUE,\n                         skip = 2) \n# Save as .RDS \nsave(all_proj, file = here::here(\"data\", \"raw_data\", \"project2\", \n                                 \"all_projects_as_of29ago2024.Rdata\") ) \nrm(all_projects_as_of29ago2024)"
  },
  {
    "objectID": "analysis/01a_WB_project_pdo_prep.html#recap-content",
    "href": "analysis/01a_WB_project_pdo_prep.html#recap-content",
    "title": "WB Project PDOs Data Preprocessing",
    "section": "Recap content",
    "text": "Recap content\n\nA lot of PDOs are missing, especially from earlier FYs\n\n\n\n22,569 Projects’ IDs, of which…\n\n9,774 (non missing) PDOs … 49,7% are missing\n22,569-4981 = 17,588 (non missing) board approval FY … 22.1% are missing\n\nranging from 1947 - 2026\n\n\n\n[FUN] Count missing/distinct values of columns\n\n# Function to count missing values and distinct values in a subset of columns\nf_recap_values &lt;- function(data, columns) {\n   # Select the subset of columns\n   df_subset &lt;- data %&gt;% select(all_of(columns))\n\n   # 1) Use skimr to skim the data\n   skimmed &lt;- skim(df_subset)\n   \n   # 2) Get the number of rows in the dataset\n   total_rows &lt;- nrow(df_subset)\n\n   \n   # 3) Calculate the number of distinct values for each column\n   distinct_counts &lt;- df_subset %&gt;%\n      summarise(across(everything(), n_distinct)) %&gt;%\n      pivot_longer(everything(), names_to = \"skim_variable\", values_to = \"n_distinct\")\n   \n   # Extract the relevant columns for column names, missing values, and distinct counts\n   missing_table &lt;- skimmed %&gt;%  # 1) \n      select(skim_variable, n_missing) %&gt;%\n      # Add the total number of rows\n      mutate(total_rows = total_rows) %&gt;%  # 2) \n      # Join with distinct counts\n      left_join(distinct_counts, by = \"skim_variable\") %&gt;%  # 3) \n      relocate(n_distinct, n_missing, .after = total_rows) %&gt;%\n      mutate(missing_perc = round((n_missing/total_rows)*100, 1), \n             missing_perc = glue::glue(\"{missing_perc}%\")) %&gt;%\n      arrange(desc(n_distinct))\n   \n   # Return the table\n   return(missing_table) \n}\n\n# exe use \n#f_recap_values(df, c(\"col1\",\"col2\"))\n\n\n# Use the function on a subset of columns\nf_recap_values(all_proj_t, c(\"id\",\"pdo\", \"projectstatusdisplay\", \"boardapprovalFY\", \"regionname\",\"sector1\", \"theme1\", \"projectfinancialtype\"))"
  },
  {
    "objectID": "analysis/01a_WB_project_pdo_prep.html#which-pdos-are-missing",
    "href": "analysis/01a_WB_project_pdo_prep.html#which-pdos-are-missing",
    "title": "WB Project PDOs Data Preprocessing",
    "section": "Which PDOs are missing?",
    "text": "Which PDOs are missing?\nIdeally, the PDOs are missing in a non systematic way. To check it, I compare the distributions across some key features of ALL PROJs v. NON-missing-PDO-PROJs\n\nmissing_pdo &lt;- all_proj_t %&gt;% \n   #select(id, pdo, countryname, projectstatusdisplay, lendinginstr, boardapprovalFY, projectfinancialtype) %&gt;% \n   filter(is.na(pdo))\n\n# Now I compare to get a sense of distribution in all_proj_t v. missing_pdo... \ntabyl(all_proj_t$projectstatusdisplay) %&gt;%  adorn_pct_formatting()\ntabyl(missing_pdo$projectstatusdisplay) %&gt;%  adorn_pct_formatting()\n# Region  (seem same)\ntabyl(all_proj_t$regionname)  %&gt;% adorn_pct_formatting() \ntabyl(missing_pdo$regionname)  %&gt;% adorn_pct_formatting() \n# FY (seem same)\ntabyl(all_proj_t$boardapprovalFY) %&gt;%  adorn_pct_formatting()\ntabyl(missing_pdo$boardapprovalFY) %&gt;%  adorn_pct_formatting()\n# too many sectors... (seem same)\ntabyl(all_proj_t$sector1)  %&gt;% adorn_pct_formatting() \ntabyl(missing_pdo$sector1)  %&gt;% adorn_pct_formatting() \n# too little filled themes\ntabyl(all_proj_t$theme1)  %&gt;% adorn_pct_formatting() # 51.9% NA\ntabyl(missing_pdo$theme1)  %&gt;% adorn_pct_formatting() # 67.4%  NA\n# Environmental Assessment Category\ntabyl(all_proj_t$envassesmentcategorycode)  %&gt;% adorn_pct_formatting() # 92.1%   NA\ntabyl(missing_pdo$envassesmentcategorycode)  %&gt;% adorn_pct_formatting() \n# Environmental and Social Risk\ntabyl(all_proj_t$esrc_ovrl_risk_rate)  %&gt;% adorn_pct_formatting() # 98.4%  NA\ntabyl(missing_pdo$esrc_ovrl_risk_rate)  %&gt;% adorn_pct_formatting() \n# by fin instrum \ntabyl(all_proj_t$projectfinancialtype)  %&gt;% adorn_pct_formatting() \ntabyl(missing_pdo$projectfinancialtype)  %&gt;% adorn_pct_formatting() \n# by lending instrum\ntabyl(all_proj_t$lendinginstr)  %&gt;% adorn_pct_formatting()  # Spec Inv Loan 6567 |29.1%\ntabyl(missing_pdo$lendinginstr)  %&gt;% adorn_pct_formatting() # Spec Inv Loan 4928 |43.9%\n\n[Chi-Squared Test in the case of projectfinancialtype]\n\n\n# Chi-Square Test: if a discrete distribution of a sample reflects the population, you can use a chi-square goodness-of-fit test\n\n# by fin instrum \npop &lt;- tabyl(all_proj_t$projectfinancialtype, show_na = TRUE)  %&gt;% \n   adorn_pct_formatting() %&gt;% \n   mutate(across(ends_with(\"percent\"), ~parse_number(.)))\nobs &lt;- tabyl(missing_pdo$projectfinancialtype, show_na = TRUE)  %&gt;% \n   adorn_pct_formatting() %&gt;% \n   mutate(across(ends_with(\"percent\"), ~parse_number(.)))\n\n# ---- Sample data (observed counts)\n# Sample counts for categories A, B, and C\nobserved &lt;- obs[,\"n\"]\nobserved\n# ---- Population data (expected proportions or counts)\n# Proportions of A, B, C in the population\nexpected_proportions &lt;- pop[, (\"percent\")]/100   \nexpected_proportions\n\n# Total number of observations in the sample\ntotal_sample_size &lt;- sum(observed)  \n\n# Perform the chi-square test\nchisq_test &lt;- chisq.test(observed, p = expected_proportions)\n\n# Display the results\nchisq_test\n# data:  observed\n# X-squared = 3421.4, df = 4, p-value &lt; 2.2e-16\n\n# low p-value (typically &lt; 0.05) suggests that the sample distribution is significantly different from the population!!!!\n\n[Chi-Squared Test in the case of lendinginstr]\n\n# Chi-Square Test: if a discrete distribution of a sample reflects the population, you can use a chi-square goodness-of-fit test\n\n# by fin instrum \npop2 &lt;- tabyl(all_proj_t$lendinginstr, show_na = TRUE)  %&gt;% \n   adorn_pct_formatting() %&gt;% \n   mutate(across(ends_with(\"percent\"), ~parse_number(.)))\nobs2 &lt;- tabyl(missing_pdo$lendinginstr, show_na = TRUE)  %&gt;% \n   adorn_pct_formatting() %&gt;% \n   mutate(across(ends_with(\"percent\"), ~parse_number(.)))\n\n# ---- Sample data (observed counts)\n# Sample counts for categories A, B, and C\nobserved2 &lt;- obs2[,\"n\"]\nobserved2\n# ---- Population data (expected proportions or counts)\n# Proportions of A, B, C in the population\nexpected_proportions2 &lt;- pop2[, (\"percent\")]/100   \nexpected_proportions2\n\n# Total number of observations in the sample\ntotal_sample_size &lt;- sum(observed2)  \n\n# Perform the chi-square test\nchisq_test2 &lt;- chisq.test(observed2, p = expected_proportions2)\n\n# Display the results\nchisq_test2\n# data:  observed\n# X-squared = 3421.4, df = 4, p-value &lt; 2.2e-16\n\n# low p-value (typically &lt; 0.05) suggests that the sample distribution is significantly different from the population!!!!\n\nBased on some available project features, I would say that even if many projects have missing feature value, PDO texts’ missingness seems to happen at random, except maybe for:\n\napproval FY\n\nprojectfinancialtype (Grants, IBRD, etc) but there are many missing type (many more in with-PDO sample)…\n\nlendinginstr specific Investment Loan are missing PDO in 4928 pr (43.9%).\n\nWhy?"
  },
  {
    "objectID": "analysis/01a_WB_project_pdo_prep.html#duplicated-pdos",
    "href": "analysis/01a_WB_project_pdo_prep.html#duplicated-pdos",
    "title": "WB Project PDOs Data Preprocessing",
    "section": "Duplicated PDOs 🤯",
    "text": "Duplicated PDOs 🤯\n\nstr(projs)\nskim(projs$id)\nskim(projs$pdo)\n\nn_distinct(projs$id) # 8811\nn_distinct(projs$pdo) # 7582  !!!!!!!! \n\n# Detect duplicated PDOs and the corresponding IDs\nduplicates &lt;- projs %&gt;%\n  group_by(pdo) %&gt;%\n  filter(n() &gt; 1) %&gt;%   # Filter PDOs that appear more than once\n  select(id, pdo)       # Select only id and pdo columns\n\n# View the duplicated PDOs and their corresponding IDs\nnrow(duplicates) # 2235\n\n# Count duplicates per each unique ID based on duplicated PDOs\ncount_dp &lt;- duplicates %&gt;%          # Filter PDOs that appear more than once\n  group_by(pdo) %&gt;%             # Group by id\n  summarise(dup_count = n())   # Count occurrences of duplicated PDOs per id\n\nmin(count_dp$dup_count) # 2\nmax(count_dp$dup_count) # 9\nmean(count_dp$dup_count) # 2.22332\nn_distinct(duplicates$id)  # 2235\nn_distinct(duplicates$pdo)  # 1006\n\nThere are 2235 projects with NON-UNIQUE PDO text in the dataset. In some cases, evidently, the same PDO is used for multiple projects (from a minimum of 2 to a maximum of 9 time!!!), most likely when there is a parent project or subsequent phases of the same."
  },
  {
    "objectID": "analysis/01a_WB_project_pdo_prep.html#pos-tagging-with-cleannlp",
    "href": "analysis/01a_WB_project_pdo_prep.html#pos-tagging-with-cleannlp",
    "title": "WB Project PDOs Data Preprocessing",
    "section": "PoS tagging with cleanNLP\n",
    "text": "PoS tagging with cleanNLP\n\n\nHere’s the general process for tagging (or “annotating”) text with the cleanNLP package:\n\nMake a dataset where one column is the id (line number, chapter number, book+chapter, etc.), and another column is the text itself.\nInitialize the NLP tagger. You can use any of these:\n\n\ncnlp_init_udpipe(): Use an R-only tagger that should work without installing anything extra (a little slower than the others, but requires no extra steps!)\n\ncnlp_init_spacy(): Use spaCy (if you’ve installed it on your computer with Python)\n\ncnlp_init_corenlp(): Use Stanford’s NLP library (if you’ve installed it on your computer with Java)\n\n\nFeed the data frame from step 1 into the cnlp_annotate() function and wait.\nSave the tagged data on your computer so you don’t have to re-tag it every time.\n\nPrep HYPHENATED words\n\n# Replace hyphens with a placeholder before annotation\npdo_train_to_tag &lt;- projs_train %&gt;%\n   select(id, pdo) %&gt;%\n   mutate(pdo_2 = case_when(\n      str_detect(pdo, \"scale-up|scaled-up\") ~ str_replace_all(pdo, \"scale-up|scaled-up\", \"SCALEUPPLACEHOLDER\"), # 17 \n      str_detect(pdo, \"follow-up\") ~ str_replace_all(pdo, \"follow-up\", \"FOLLOWUPPLACEHOLDER\"), # 6\n      str_detect(pdo, \"know-how\") ~ str_replace_all(pdo, \"know-how\", \"KNOWHOWPLACEHOLDER\"), # 5 \n      str_detect(pdo, \"Covid-19|COVID-19|covid-19\") ~ str_replace_all(pdo, \"Covid-19|COVID-19|covid-19\", \"COVIDPLACEHOLDER\"), # ???\n      # last !!!!!!!!\n      str_detect(pdo, \"(?&lt;=\\\\p{L})-(?=\\\\p{L})\") ~ str_replace_all(pdo, \"-\", \"HYPHENWORD\"), # 1396 \n      TRUE ~ pdo\n   ))"
  },
  {
    "objectID": "analysis/01a_WB_project_pdo_prep.html#looong-annotate-with-cleannlpcnlp_annotate",
    "href": "analysis/01a_WB_project_pdo_prep.html#looong-annotate-with-cleannlpcnlp_annotate",
    "title": "WB Project PDOs Data Preprocessing",
    "section": "[LOOONG] Annotate with cleanNLP::cnlp_annotate()\n",
    "text": "[LOOONG] Annotate with cleanNLP::cnlp_annotate()\n\n[Only the 1st time]\n\n# # ---- Initialize the tagger\n# cleanNLP::cnlp_init_udpipe()\n# \n# # ---- Use the built-in R-based tagger\n# pdo_train_tagged &lt;- cleanNLP::cnlp_annotate(pdo_train_to_tag, \n#                                   text_name = \"pdo_2\", \n#                                   doc_name = \"id\")\n# \n# # save the input data as .rds\n# saveRDS(pdo_train_tagged, here(\"data\",\"derived_data\",\"pdo_train_tagged.rds\"))\n\n[Conditionally re-annotate]\n\n# save the input data as .rds\nsaveRDS(pdo_train_to_tag, here(\"data\",\"derived_data\",\"pdo_train_to_tag.rds\"))\n# define the path to save the tagged data\ninput_path &lt;- here(\"data\",\"derived_data\",\"pdo_train_to_tag.rds\")\noutput_path &lt;- here(\"data\",\"derived_data\",\"pdo_train_tagged.rds\")\n\n\n# ---- Initialize the tagger\ncleanNLP::cnlp_init_udpipe()\n\n# ---- Conditionally annotate the data only if it has changed since the last time\n# Check if previous input data exists; if not, save it for the first time\nif (!file.exists(input_path)) {\n  # Save pdo_train_to_tag to initialize the tracking\n  saveRDS(pdo_train_to_tag, input_path)\n  message(\"Initial input saved.\")\n}\n\n# Load the previous input if it exists\nprevious_input &lt;- readRDS(input_path)\n\n# Only re-run if the input data has changed\nif (!identical(pdo_train_to_tag, previous_input)) {\n  # Run the annotation\n  pdo_train_tagged &lt;- cleanNLP::cnlp_annotate(pdo_train_to_tag, \n                                              text_name = \"pdo_2\", \n                                              doc_name = \"id\")\n  \n  # Save the updated input and annotated result\n  saveRDS(pdo_train_to_tag, input_path)\n  saveRDS(pdo_train_tagged, output_path)\n  \n  message(\"Annotation updated.\")\n} else {\n  # Load the previously saved output if data is unchanged\n  if (file.exists(output_path)) {\n    pdo_train_tagged &lt;- readRDS(output_path)\n    message(\"Loaded previous annotation.\")\n  } else {\n    message(\"No previous annotation found. Please run the annotation first.\")\n  }\n}\n\nManipulate the tagged data\n\n# ---- Extract $token & Convert annotations to a tibble (data frame format)\npdo_train_tag_t &lt;-  pdo_train_tagged$token %&gt;% \n   # ... convert annotations to a tibble (data frame format)\n   as_tibble()    # 225,360\n\n# ---- Replace the placeholder back with a hyphen\npdo_train_tag_t &lt;- pdo_train_tag_t %&gt;% \n   mutate(word = token) %&gt;%\n   \n   # Replace placeholders in the 'token' column\n   mutate(token = case_when(\n      str_detect(word, \"HYPHENWORD\") ~ str_replace_all(word, \"HYPHENWORD\", \"-\"),\n      str_detect(word, \"SCALEUPPLACEHOLDER\") ~ str_replace_all(word, \"SCALEUPPLACEHOLDER\", \"scale-up\"),\n      str_detect(word, \"FOLLOWUPPLACEHOLDER\") ~ str_replace_all(word, \"FOLLOWUPPLACEHOLDER\", \"follow-up\"),\n      str_detect(word, \"KNOWHOWPLACEHOLDER\") ~ str_replace_all(word, \"KNOWHOWPLACEHOLDER\", \"know-how\"),\n      str_detect(word, \"COVIDPLACEHOLDER\") ~ str_replace_all(word, \"COVIDPLACEHOLDER\", \"covid-19\"),\n      TRUE ~ word\n   )) %&gt;%\n   \n   # Replace placeholders in the 'token_ws' column\n   mutate(token_with_ws = case_when(\n      str_detect(token_with_ws, \"HYPHENWORD\") ~ str_replace_all(token_with_ws, \"HYPHENWORD\", \"-\"),\n      str_detect(token_with_ws, \"SCALEUPPLACEHOLDER\") ~ str_replace_all(token_with_ws, \"SCALEUPPLACEHOLDER\", \"scale-up\"),\n      str_detect(token_with_ws, \"FOLLOWUPPLACEHOLDER\") ~ str_replace_all(token_with_ws, \"FOLLOWUPPLACEHOLDER\", \"follow-up\"),\n      str_detect(token_with_ws, \"KNOWHOWPLACEHOLDER\") ~ str_replace_all(token_with_ws, \"KNOWHOWPLACEHOLDER\", \"know-how\"),\n      str_detect(token_with_ws, \"COVIDPLACEHOLDER\") ~ str_replace_all(token_with_ws, \"COVIDPLACEHOLDER\", \"covid-19\"),   \n      TRUE ~ token_with_ws\n   )) %&gt;%\n   \n   # Replace placeholders in the 'lemma' column\n   mutate(lemma = case_when(\n      str_detect(lemma, \"HYPHENWORD\") ~ str_replace_all(lemma, \"HYPHENWORD\", \"-\"),\n      str_detect(lemma, \"Scaleupplaceholder\") ~ str_replace_all(lemma, \"Scaleupplaceholder\", \"scale-up\"),\n      str_detect(lemma, \"Followupplaceholder\") ~ str_replace_all(lemma, \"Followupplaceholder\", \"follow-up\"),\n      str_detect(lemma, \"Knowhowplaceholder\") ~ str_replace_all(lemma, \"Knowhowplaceholder\", \"know-how\"),\n      str_detect(lemma, \"Covidplaceholder\") ~ str_replace_all(lemma, \"Covidplaceholder\", \"covid-19\"),\n      TRUE ~ lemma\n   )) %&gt;%\n \n   relocate(word, .after = doc_id) # 225,360\n\nCheck for duplicates\n\n# check  \nprojs_train$id %&gt;% n_distinct() # 4403\npdo_train_tagged$token$doc_id %&gt;% n_distinct() # 4403  OK!\npdo_train_tag_t$doc_id %&gt;% n_distinct() # 4403  OK! \n\nRe-add cols from projs_train to pdo_train_t\n\n\n# ---- RE-add cols from `projs_train_token ` `\npdo_train_t &lt;-  pdo_train_tag_t %&gt;% \n   left_join(projs_train, by = c(\"doc_id\" = \"id\"))  \n# ---- Select cols \npdo_train_t &lt;- pdo_train_t %&gt;% \n   select(\n      proj_id=  doc_id                ,\n      pdo,\n      sid                   , # sentence ID\n      tid                   , # token ID within sentence\n      word         ,\n      token                 , # Tokenized form of the token.\n      token_with_ws         , # Token with trailing whitespace.\n      lemma                 , # Lemmatized form of the token.\n      upos                  , # Universal part-of-speech tag.\n      xpos                  , # Language-specific part-of-speech tag\n      feats                 , # Morphological features of the token.\n      tid_source            , # Token ID in the source document.\n      relation              , # Dependency relation to the head of the token.\n      pr_name               , # Name of the parent token.\n      pdo                   ,\n      FY_appr = boardapprovalFY       ,\n      FY_clos = closingdateFY         ,\n      status                ,\n      regionname            ,\n      countryname           ,\n      sector1               ,\n      theme1                ,\n      lendinginstr          ,\n      env_cat               ,\n      ESrisk                ,\n      curr_total_commitment \n   )\n\nEnsure tid is numeric\n\n# Ensure token_id is numeric\npdo_train_t &lt;- pdo_train_t %&gt;% \n  mutate(tid = as.numeric(tid))  # Convert token_id to numeric\n\nAdd low case token\n\npdo_train_t &lt;- pdo_train_t %&gt;% \n  mutate(token_l = tolower(token)) %&gt;% \n   relocate(token_l, .after = token) %&gt;% \n   select(-token_with_ws) \n\nRestore variations of “hyphenword” with “-”\n\n#Replace variations of \"hyphenword\" with \"-\"\npdo_train_t &lt;- pdo_train_t %&gt;% \n  mutate(\n    lemma = str_replace_all(lemma, regex(\"hyphenword|hyphenwor\", \n                                         ignore_case = TRUE), \"-\")\n  )"
  },
  {
    "objectID": "research/hypotheses.html",
    "href": "research/hypotheses.html",
    "title": "Research questions",
    "section": "",
    "text": "In general, a research question’s nature depends on the goal and type of the pursued analysis. Table 1 provides a useful framework (Source: fig 3.9 in Francom 2024).\n\n\nTable 1: Overview of analysis types\n\n\n\n\n\n\n\n\n\nType\nAims\nApproach\nEvaluation\n\n\n\nExploratory\nExplore: gain insight\nInductive, data-driven, and iterative\nAssociative\n\n\nPredictive\nPredict: validate associations\nSemi-deductive, data-/ theory-driven, and iterative\nModel performance, feature importance, and associative\n\n\nInferential\nExplain: test hypotheses\nDeductive, theory-driven, and non-iterative\nCausal\n\n\n\n\n\n\n\n\nIs there a pattern in the WB project document corpus1 that reveals non-random variation in the frequency of certain words, phrases, or policy concepts over time?\n1 WB project documents refer here to Project Development Objectives (PDOs), which are brief descriptive texts.\nThe hypothesis is that the WB project document corpus exhibits non-random variation in the frequency of specific policy concepts2 over time. This question is approached through a data-driven analysis, where patterns observed in the text data inspire the data interrogation rather than starting with a predetermined assumption. \n2 Concepts include “policy focus,” “sector,” “strategy,” or “emerging priority” within the development funding landscape.\nIs there any external input (whether captured in other official documents or not) that could help “explain” or correlate with any observed non-random patterns in the text data?\nFor instance, a sudden rise in popularity of a particular policy goal or catchphrase might influence the choice of Project Development Objectives (PDO) in operations over a specific period.\n\nFraming this question for empirical investigation, I explored the possible correlation between the World Development Reports (WDR)3 and the frequency trends of specific sector and theme words in the PDO text data. In this analysis, the “alternative” hypothesis being tested is that the WDR has a “traction effect” on the PDOs of subsequent fiscal years.\n\n\n\n\n\n3 WDRs (World Development Reports) are the flagship reports that the World Bank Group has been publishing annually since 1978.\n\n\nGiven the incomplete feature tagging in the WB project document corpus, can predictive classification techniques help address such data limitations?\n\nThe hypothesis is that certain machine learning (ML) techniques can serve to enhance the quality of the source data. Some illustrative analysis has been conducted to predict the missing sector or theme tags, based on the text of the PDO description, plus other available metadata variables, testing various ML algorithms.\n\n\n\n\n\n\n\n\n\n\nFor now, the primary aim of the study is to EXPLORE (e.g., trends over time in phrase occurrence) and, to a lesser extent, to PREDICT (e.g., using ML to improve the quality of metadata variables). Potential follow-up questions will be shaped by the findings of this initial exploratory phase."
  },
  {
    "objectID": "research/hypotheses.html#exploratory-research-questions",
    "href": "research/hypotheses.html#exploratory-research-questions",
    "title": "Research questions",
    "section": "",
    "text": "Is there a pattern in the WB project document corpus1 that reveals non-random variation in the frequency of certain words, phrases, or policy concepts over time?\n1 WB project documents refer here to Project Development Objectives (PDOs), which are brief descriptive texts.\nThe hypothesis is that the WB project document corpus exhibits non-random variation in the frequency of specific policy concepts2 over time. This question is approached through a data-driven analysis, where patterns observed in the text data inspire the data interrogation rather than starting with a predetermined assumption. \n2 Concepts include “policy focus,” “sector,” “strategy,” or “emerging priority” within the development funding landscape.\nIs there any external input (whether captured in other official documents or not) that could help “explain” or correlate with any observed non-random patterns in the text data?\nFor instance, a sudden rise in popularity of a particular policy goal or catchphrase might influence the choice of Project Development Objectives (PDO) in operations over a specific period.\n\nFraming this question for empirical investigation, I explored the possible correlation between the World Development Reports (WDR)3 and the frequency trends of specific sector and theme words in the PDO text data. In this analysis, the “alternative” hypothesis being tested is that the WDR has a “traction effect” on the PDOs of subsequent fiscal years.\n\n\n\n\n\n3 WDRs (World Development Reports) are the flagship reports that the World Bank Group has been publishing annually since 1978."
  },
  {
    "objectID": "research/hypotheses.html#predictive-research-questions",
    "href": "research/hypotheses.html#predictive-research-questions",
    "title": "Research questions",
    "section": "",
    "text": "Given the incomplete feature tagging in the WB project document corpus, can predictive classification techniques help address such data limitations?\n\nThe hypothesis is that certain machine learning (ML) techniques can serve to enhance the quality of the source data. Some illustrative analysis has been conducted to predict the missing sector or theme tags, based on the text of the PDO description, plus other available metadata variables, testing various ML algorithms.\n\n\n\n\n\n\n\n\n\n\nFor now, the primary aim of the study is to EXPLORE (e.g., trends over time in phrase occurrence) and, to a lesser extent, to PREDICT (e.g., using ML to improve the quality of metadata variables). Potential follow-up questions will be shaped by the findings of this initial exploratory phase."
  },
  {
    "objectID": "posts/PDO_eda.html",
    "href": "posts/PDO_eda.html",
    "title": "A text exploration of the World Bank’s projects objectives (PDO)",
    "section": "",
    "text": "I have always been fascinated by the idea of analyzing language as data and I finally found some time to study Natural Language Processing (NLP) and Text Analytics techniques.\nFor this learning project, I explore a dataset of World Bank Projects & Operations, with a focus on the text data contained in the Project Development Objective (PDO) section of World Bank’s projects (loans, grants, technical assistance). A PDO outlines, in synthetic form, the proposed objectives of operations, as defined in the early stages of the World Bank project cycle. \nNormally, a few objectives are listed in paragraphs that are a couple sentences long. Table 1 shows two examples.\n\n\n\nTable 1: Illustrative PDOs text in Projects’ documents\n\n\n\n\n\nProject_ID\nProject_Name\nProject_Development_Objective\n\n\n\nP127665\nSecond Economic Recovery Development Policy Loan\nThis development policy loan supports the Government of Croatia's reform efforts with the aim to: (i) enhance fiscal sustainability through expenditure-based consolidation; and (ii) strengthen investment climate.\n\n\nP179010\nTunisia Emergency Food Security Response Project\nTo (a) ensure, in the short-term, the supply of (i) agricultural inputs for farmers to secure the next cropping seasons and for continued dairy production, and (ii) wheat for uninterrupted access to bread and other grain products for poor and vulnerable households; and (b) strengthen Tunisia’s resilience to food crises by laying the ground for reforms of the grain value chain.\n\n\n\n\n\n\n\n\n\nThe dataset also includes some relevant metadata about the projects, including: country, fiscal year of approval, project status, main sector, main theme, environmental risk category, or lending instrument.s\n\n\n\n\n\n\nNote\n\n\n\n\n\nI retrieved the data on this page WBG Projects. Such data is classified by the World Bank as “public” and accessible under a Creative Commons Attribution 4.0 International License."
  },
  {
    "objectID": "posts/PDO_eda.html#preprocessing-the-pdo-text-data",
    "href": "posts/PDO_eda.html#preprocessing-the-pdo-text-data",
    "title": "A text exploration of the World Bank’s projects objectives (PDO)",
    "section": "Preprocessing the PDO text data",
    "text": "Preprocessing the PDO text data\nCleaning text data entails extra steps compared to numerical data. A key process is tokenization, which breaks text into smaller units like words, bigrams, n-grams, or sentences. After that, a common cleaning task is normalization, where text is standardized (e.g., converting to lowercase). Similarly, data reduction techniques like stemming and lemmatization simplify words to their root form (e.g., “running,” “ran,” and “runs” become “run”). This can help to reduce dimensionality, especially with very large datasets, when the word form is not relevant.\nUpon tokenization, it is very common to remove irrelevant elements like punctuation or stop words (unimportant words like “the”, “ii)”, “at”, or repeated ones in context like “PDO”) which add noise to the data.\nIn contrast, data enhancement techniques like part-of-speech tagging add value by identifying grammatical components, allowing focus on meaningful elements like nouns, verbs, or adjectives."
  },
  {
    "objectID": "posts/PDO_eda.html#words-and-stems",
    "href": "posts/PDO_eda.html#words-and-stems",
    "title": "A text exploration of the World Bank’s projects objectives (PDO)",
    "section": "Words and stems",
    "text": "Words and stems\nEvidently, after stemming, more words (or stems) reach the threshold frequency count of 800 (as they have been combined by root). Despite the pre-processing of PDOs’ text data, these aren’t particularly informative words.\n\n\n\n\n\nFigure 1"
  },
  {
    "objectID": "posts/PDO_eda.html#bigrams",
    "href": "posts/PDO_eda.html#bigrams",
    "title": "A text exploration of the World Bank’s projects objectives (PDO)",
    "section": "Bigrams",
    "text": "Bigrams\nFigure 2 shows the most frequent bigrams in the PDO text data. The top-ranking bigrams align with expectations, featuring phrases like “increase access”, “service delivery” ,“institutional capacity”, “poverty reduction” etc., at the top. Notably, while “health” appears in several bigrams (e.g., “health services”, “public health”, “health care”), “education” is absent from the top 25. Another noteworthy observation is the frequent mention (over 100 instances) of “eligible crisis”, which was somewhat unexpected.\n\n\n\n\nFigure 2"
  },
  {
    "objectID": "posts/PDO_eda.html#trigrams",
    "href": "posts/PDO_eda.html#trigrams",
    "title": "A text exploration of the World Bank’s projects objectives (PDO)",
    "section": "Trigrams",
    "text": "Trigrams\nFigure 3 shows the most frequent trigrams in the PDO text data. Here, the recurrence of phrases involving “health” is reiterated, along with a few phrases revolving around “environmental” goals, along with terms that inherently belong together: like “water resource management”, “social safety net”, etc..\n\n\n\n\nFigure 3"
  },
  {
    "objectID": "posts/PDO_eda.html#sectors-in-the-pdo-text",
    "href": "posts/PDO_eda.html#sectors-in-the-pdo-text",
    "title": "A text exploration of the World Bank’s projects objectives (PDO)",
    "section": "Sectors in the PDO text",
    "text": "Sectors in the PDO text\nTo focus on a meaningful set of tokens, I examined the frequency of sector-related terms within the PDO text data. To capture the broader concept of “sector,” I created a comprehensive SECTOR variable that encompasses all relevant words within an expanded definition.\n\n\n\n\n\n\nCustom Sector Definitions\n\n\n\n\n\nThe “sector” term discussed here is not the sector variable available in the data, but it is an artificial construct reflecting the occurrence of terms referred to the same sector semantic field. Besides conceptual association, these definitions are rooted in the World Bank’s own classification of sector and sub-sector.\nBelow are the “broad SECTOR” definitions used in this analysis:\n\n\nWAT_SAN = water|wastewater|sanitat|sewer|sewage|irrigat|drainag|river basin|groundwater\n\nTRANSPORT = transport|railway|road|airport|waterway|bus|metropolitan|inter-urban|aviation|highway|transit|bridge|port\n\nURBAN = urban|housing|inter-urban|peri-urban|waste manag|slum|city|megacity|intercity|inter-city|town\n\nENERGY = energ|electri|hydroele|hydropow|renewable|transmis|grid|transmission|electric power|geothermal|solar|wind|thermal|nuclear power|energy generation\n\nHEALTH = health|hospital|medicine|drugs|epidem|pandem|covid-19|vaccin|immuniz|diseas|malaria|hiv|aids|tb|maternal|clinic|nutrition\n\nEDUCATION = educat|school|vocat|teach|univers|student|literacy|training|curricul|pedagog\n\nAGR_FOR_FISH = agricultural|agro|fish|forest|crop|livestock|fishery|land|soil\n\nMINING_OIL_GAS = minin|oil|gas|mineral|quarry|extract|coal|natural gas|mine|petroleum|hydrocarbon\n\nSOCIAL_PROT = social protec|social risk|social assistance|living standard|informality|insurance|social cohesion|gig economy|human capital|employment|unemploy|productivity|wage lev|intergeneration|lifelong learn|vulnerab|empowerment|sociobehav\n\nFINANCIAL = bank|finan|investment|credit|microfinan|loan|financial stability|banking|financial intermed|fintech\n\nICT = information|communication|ict|internet|telecom|cyber|data|ai|artificial intelligence|blockchain|e-learn|e-commerce|platform|software|hardware|digital\n\nIND_TRADE_SERV = industry|trade|service|manufactur|tourism|trade and services|market|export|import|supply chain|logistic|distribut|e-commerce|retail|wholesale|trade facilitation|trade policy|trade agreement|trade barrier|trade finance|trade promotion|trade integration|trade liberalization|trade balance|trade deficit|trade surplus|trade war|trade dispute|trade negotiation|trade cooperation|trade relation|trade partner|trade route|trade corridor\n\nINSTIT_SUPP = government|public admin|institution|central agenc|sub-national gov|law|justice|governance|policy|regulation|public expenditure|public investment|public procurement\n\nGENDER_EQUAL = gender|women|girl|woman|femal|gender equal|gender-base|gender inclus|gender mainstream|gender sensit|gender respons|gender gap|gender-based|gender-sensitive|gender-responsive|gender-transform|gender-equit|gender-balance\n\nCLIMATE = climate chang|environment|sustain|resilience|adaptation|mitigation|green|eco|eco-|carbon|carbon cycle|carbon dioxide|climate change|ecosystem|emission|energy effic|greenhouse|greenhouse gas|temperature anomalies|zero net|green growth|low carbon|climate resilient|climate smart|climate tech|climate variab\n\n\n\n\nThe occurrence trends over time for key sector terms are shown in Figure 4.\nInterestingly, all the broadly defined “sector term” in the PDO present one or more peaks at some point in time. For the (broadly defined) HEALTH sector, it is likely that Covid-19 triggered the peak in 2020. What about the other sectors? What could be the driving reason?\n\n\n\n\nFigure 4\n\n\n\n\n\n\n\nA possible explanation is that the PDOs may echo themes from the World Development Reports (WDR), the World Bank’s flagship annual publication that analyzes a key development issue each year. Far from being speculative research, each WDR is grounded in the Bank’s field-based insights and, in turn, it informs the Bank’s policy and operational priorities. This would suggest a likely alignment between WDR themes and project objectives in the PDOs.\nTo some extent, visual exploration (see examples below) seems to support this hypothesis: thematically relevant WDRs consistently appear in close proximity to peaks in sector-related term frequencies. However, further validation is necessary. Additionally, preparing each WDR typically takes 2-3 years, so a temporal alignment with project documents may include some lag.\n\n\n\nExamples of sectors-term trend\nFigure 5 shows a “combined sector” that is quite broadly defined (AGRICULTURE, FORESTRY, FISHING) with the highest peak in 2010, two years after the publication of the WDR on “Agriculture for Development”. Perhaps the “alignment” hypothesis is not very meaningful with such a broadly defined sector.\n\n\n\n\nFigure 5\n\n\n\n\n\n\n\nFigure 6, tracking frequency of CLIMATE-related terms, shows how the highest peak coincided with the publication of the WDR on “Development and Climate Change” in 2010.\n\n\n\n\nFigure 6\n\n\n\n\n\n\n\nFigure 7 reports two WDR publications relevant to EDUCATION, which seemingly preceded two peaks in the sector-related terms in the PDOs:\n\nin 2007, on “Development and the Next Generation”\n\nin 2018, on “Learning to Realize Education’s Promise”\n\n\n\n\n\n\nFigure 7\n\n\n\n\n\n\n\nFigure 8 shows that the highest frequency of terms related to GENDER EQUALITY was instead recorded a couple of years before the publication of the WDR on “Gender Equality and Development” in 2012.\n\n\n\n\nFigure 8"
  },
  {
    "objectID": "posts/PDO_eda.html#comparing-pdo-text-against-variable-sector",
    "href": "posts/PDO_eda.html#comparing-pdo-text-against-variable-sector",
    "title": "A text exploration of the World Bank’s projects objectives (PDO)",
    "section": "Comparing PDO text against variable sector\n",
    "text": "Comparing PDO text against variable sector\n\nThe available data includes not only text but also relevant metadata, such as the sector1 variable, which captures the project’s primary sector. Do the terms in the PDO text align with this sector label? To examine this, I applied the two-sample Kolmogorov-Smirnov test to compare the distribution of sector-related terms in the PDO text with the distribution of sector1.\n\n\n\n\n\n\nNote\n\n\n\n\n\nThe Kolmogorov-Smirnov test is non-parametric and makes no assumptions about the underlying distributions, making it a versatile tool for comparing distributions. The null hypothesis is that the two samples are drawn from the same distribution. Hence, if the p-value is less than the significance level (0.05), the null hypothesis is rejected, suggesting the observed distributions are in fact different. The test statistic is the maximum difference between the cumulative distribution functions (CDF) of the two samples.\n\n\nKS statistic: The vectors of observed distributions have been rescaled (bringing n_pdo and n_tag to a [0, 1] range before applying the Kolmogorov-Smirnov (KS) test). This is useful when distributions differ substantially in scale or units, as it makes them directly comparable in relative terms.\n\n\n\n\nAs shown in Table 2, the results indicate similar distributions across most sectors. This is promising, as it suggests that in cases where metadata is lacking, sector assignments can be reasonably inferred from the PDO text.\n\n\n\nTable 2: Comparing the freqeuncy distributions of SECTOR in text and metadata\n\n\n\n\n\nSECTORS\nKS statistic\nKS p-value\nDistributions\n\n\n\nENERGY\n0.6522\n0.0001\nDissimilar\n\n\nHEALTH\n0.3913\n0.0487\nDissimilar\n\n\nWAT_SAN\n0.3913\n0.0544\nSimilar\n\n\nEDUCATION\n0.3478\n0.1002\nSimilar\n\n\nICT\n0.2857\n0.3399\nSimilar\n\n\nMINING_OIL_GAS\n0.3333\n0.3442\nSimilar\n\n\nTRANSPORT\n0.2174\n0.6410\nSimilar\n\n\n\n\n\n\n\n\n\nBelow is a graphical representation of two illustrative sectors, showing the most similar and the most dissimilar distributions of the sector as deducted form text data, versus the proper metadata sector labeling.\nFigure 9 shows the distributions of the TRANSPORT sector in the PDOs’ text and in the metadata. The two distributions are the most similar, as confirmed by the Kolmogorov-Smirnov test with a p-value of 0.641.\n\n\n\n\nFigure 9\n\n\n\n\n\n\n\nFigure 10 compares visually the distributions of the ENERGY sector in the PDOs’ text data and the metadata. The two distributions are the most dissimilar, as the Kolmogorov-Smirnov test confirms with a p-value of 0.0001.\n\n\n\n\nFigure 10"
  },
  {
    "objectID": "posts/PDO_eda.html#comparing-pdo-text-against-variable-amount-committed",
    "href": "posts/PDO_eda.html#comparing-pdo-text-against-variable-amount-committed",
    "title": "A text exploration of the World Bank’s projects objectives (PDO)",
    "section": "Comparing PDO text against variable amount committed\n",
    "text": "Comparing PDO text against variable amount committed\n\nA similar question is: do word trends observed in PDOs also reflect the allocation of funds by sector? I explored this question with the same approach as before, but this time I compared the distribution of sector-related terms in the PDOs’ text against the distribution of the sum of the amount committed in corresponding projects (i.e. filtered by sector1 category). Given the very different ranges, I compared rescaled values (using the Kolmogorov-Smirnov two-sample test) to evaluate the independence of these two distributions.\nAs shown in Table 3, the results indicate less homogeneity of the distributions across key sectors, somthing that could be further investigated.\n\n\n\nTable 3: Comparing the distributions of SECTOR in text and in corresponding $$ committed\n\n\n\n\n\nSECTORS\nKS statistic\nKS p-value\nDistributions\n\n\n\nEDUCATION\n0.6522\n0.0001\nDissimilar\n\n\nICT\n0.6522\n0.0001\nDissimilar\n\n\nHEALTH\n0.5652\n0.0010\nDissimilar\n\n\nMINING_OIL_GAS\n0.5217\n0.0031\nDissimilar\n\n\nENERGY\n0.3478\n0.1235\nSimilar\n\n\nTRANSPORT\n0.2609\n0.4218\nSimilar\n\n\nWAT_SAN\n0.2609\n0.4218\nSimilar\n\n\n\n\n\n\n\n\n\nLet us pick a couple of examples of specific sectors to check visually.\nWATER & SANITATION sector: words v. funding\nThe distributions in the “WATER & SANITATION” sector are among the most similar pairs (K-S test p-value is = 0.4218).\n\n\n\n\nFigure 11\n\n\n\n\n\n\n\nICT sector: words v. funding\nThe distributions in the ICT sector are among the least similar (K-S test p-value is = 0.0001).\n\n\n\n\nFigure 12"
  },
  {
    "objectID": "posts/PDO_eda.html#concordances-a.k.a.-keywords-in-context",
    "href": "posts/PDO_eda.html#concordances-a.k.a.-keywords-in-context",
    "title": "A text exploration of the World Bank’s projects objectives (PDO)",
    "section": "Concordances: a.k.a. keywords in context",
    "text": "Concordances: a.k.a. keywords in context\nAnother useful analysis that can be done exploring text data refers to concordance, which enables a closer look at the context surrounding a word (or combination of words). This approach can help clarify the word’s specific meaning or reveal underlying patterns in the data.\nThe bigram “eligible crisis” in the PDOs\nFor instance, among the most frequent bigrams (two-word combinations) in the PDO text (illustrated in Figure 2), the phrase “eligible crisis” stands out. Besides appearing in the PDOs of 112 projects, this phrase is often used in a similar context. Specifically, in 32% of these cases, it is paired with phrases like “respond promptly and effectively” or “immediate and effective response”. As shown in Table 4, this suggests a sort of recurring standard phrasing.\n\n\n\nTable 4: Context of the bigram “eligible crisis” in the PDOs\n\n\n\n\n\nWB Project ID\nExcerpt of PDO Sentences with 'Eligible Crisis'\n\n\n\nP179499\n(...) and effective response in the case of an eligible crisis or emergency.\n\n\nP176608\n(...) promptly and effectively in the event of an eligible crisis or emergency.\n\n\nP151442\n(...) assistance programs and, in the event of an eligible crisis or emergency, to provide immediate and effective response\n\n\n\nP177329\n(...) eligible crisis or emergency, respond promptly and effectively to it.\n\n\nP127338\n(...) capacity to respond promptly and effectively in an eligible crisis or emergency, asrequired.\n\n\nP158504\n(...) immediate and effective response in case of an eligible crisis or emergency.\n\n\nP173368\n(...) immediate and effective response in case of an eligible crisis or emergency in the kingdom of cambodia.\n\n\nP178816\n(...) the project regions and to respond to an eligible crisis\n\n\n\nP160505\n(...) theproject area, and, in the event of an eligible crisis or emergency, to provide immediate and effective response\n\n\n\nP149377\n(...) mozambique to respond promptly and effectively to an eligible crisis or emergency.\n\n\n\n\n\n\n\n\n\nThe bigram “climate change” in the PDOs\nAnother frequently occurring bigram is “climate change”, found in 92 PDOs. Table 5 displays words that commonly appear near this bigram. Notably, the word “mitigation” (which I associate with a more aspirational, long-term response) appears more frequently than “adaptation” (which I view as a more practical, short-term response). However, the ratio would flip considering that “resilience” may convey a similar practical intent as “adaptation”. Another interesting insight worth exploring further in the future.\n\n\n\nTable 5: Frequent words near “climate change”\n\n\n\n\n\nNear 'climate change'\nCount\nPercentage\n\n\n\nvulnerability\n25\n39.1%\n\n\nmitigate\n14\n21.9%\n\n\nresilience\n14\n21.9%\n\n\nadapt\n6\n9.4%\n\n\nhazard\n5\n7.8%\n\n\n\n\n\n\n\n\n\nTable 6 shows a few examples for each of the words most frequently found in the vicinity of the bigram “climate change”.\n\n\n\nTable 6: Context of the bigram “climate change” in the PDOs\n\n\n\n\n\nNear word (root)\nWB Project ID\nClosest Text\n\n\n\nadapt\n\n\nadapt\nP090731\n(...) pilot adaptation measures addressing primarily, the impacts of climate change on their natural resource base, focused on biodiversity\n\n\nadapt\nP120170\n(...) a multi-sectoral dpl to enhance climate change adaptation capacity is anticipated in the cps.\n\n\nadapt\nP129375\n(...) objectives of the project are to: (i) integrate climate change adaptation and disaster risk reduction across the recipient’s\n\n\nhazard\n\n\nhazard\nP174191\n(...) and health-related hazards, including the adverse effects of climate change and disease outbreaks.\n\n\nhazard\nP123896\n(...) agencies to financial protection from losses caused by climate change and geological hazards.\n\n\nhazard\nP117871\n(...) buildings and infrastructure due to natural hazards or climate change impacts; and (b) increased capacity of oecs governments\n\n\nmitig\n\n\nmitig\nP074619\n(...) to help mitigate global climate change through carbon emission reductions (ers) of 138,000 tco2e\n\n\nmitig\nP164588\n(...) institutional capacity for sustainable agriculture, forest conservation and climate change mitigation.\n\n\nmitig\nP094154\n(...) removing carbon from the atmosphere and to mitigateclimate change in general.\n\n\nresil\n\n\nresil\nP154784\n(...) to increase agricultural productivity and build resilience to climate change risks in the targeted smallholder farming and pastoralcommunities\n\n\nresil\nP112615\n(...) the resilience of kiribati to the impacts of climate change on freshwater supply and coastal infrastructure.\n\n\nresil\nP157054\n(...) to improve durability and enhance resilience to climate change\n\n\n\nvulnerab\n\n\nvulnerab\nP149259\n(...) to measurably reduce vulnerability to natural hazards and climate change impacts in grenada and in the eastern caribbean\n\n\nvulnerab\nP146768\n(...) at measurably reducing vulnerability to natural hazards and climate change impacts in the eastern caribbean sub-region.\n\n\nvulnerab\nP117871\n(...) at measurably reducing vulnerability to natural hazards and climate change impacts in the eastern caribbean sub-region."
  },
  {
    "objectID": "posts/PDO_eda.html#using-ml-models-to-predict-a-missing-feature",
    "href": "posts/PDO_eda.html#using-ml-models-to-predict-a-missing-feature",
    "title": "A text exploration of the World Bank’s projects objectives (PDO)",
    "section": "Using ML models to predict a missing feature",
    "text": "Using ML models to predict a missing feature\nThe goal at hand has to do with text classification, that is assigning categories to some observations. To predict a missing feature based on a mix of text data and other available predictors, several machine learning (ML) algorithms can be applied. I tested a few suitable algorithms.\nThe sample splitting (necessary in ML to save testing dataset for model evaluation) was done based on the availability of the env_cat variable. The sample was actually split into three groups:\n\n\nTraining set (with env_cat available) 2,264 observations\n\nTesting set (with env_cat available) 972 observations\n\nValidation set (with env_cat missing) 1,167 observations"
  },
  {
    "objectID": "posts/PDO_eda.html#choosing-the-ml-algorithm",
    "href": "posts/PDO_eda.html#choosing-the-ml-algorithm",
    "title": "A text exploration of the World Bank’s projects objectives (PDO)",
    "section": "Choosing the ML algorithm",
    "text": "Choosing the ML algorithm\nTo predict the missing binary categorical outcome env_cat_f2, I tried several models, including: Lasso logistic regression (with different specifications including only text or a mix of text and other predictors) and Naive Bayes classification (Here I only report the results, but details can be found on this webpage). Since text data is sparse and high-dimensional, it is critical to perform some pre-treatment of the features (i.e. the explanatory variables) before modeling.\n\n\n\n\n\n\nModels syntethic description\n\n\n\n\n\n\nLASSO models (for logistic regression) is an approach that basically defines how much of a penalty to put on some features in order to select only the most useful out of all the original possible variables (tokens). It is a good choice when dealing with a high-dimensional dataset, like text data.\nNaïve Bayes classification is a simple and efficient algorithm for text classification. It assumes feature independence, which may not always hold, but it’s often a good baseline, particularly with short texts.\n\nOther supervised ML algorithms could be used in this case, such as Random Forest, Support-Vector Machines, K-Nearest Neighbors, but they were not tested here.\nThe steps to predict the missing feature\n\nOutcome label engineering: Define what to predict (outcome variable, \\(y\\)), and its functional form (binary or multiclass, log form or not if numeric)./ \nSample design: Select the observations to use. In ML this is typically done by splitting the sample into training and testing sets. \n\nFeature Engineering: Define the input data (predictors, \\(X\\)) and their format. Here, text data was combined with other predictors (e.g. sector, region, FY approved, etc.) to create a feature matrix.\n\n\nText preprocessing: The text data was preprocessed by tokenization, filtering of tokens by frequency, removal of stopwords, weighting via TF-IDF (Term Frequency-Inverse Document Frequency), to make it suitable for ML algorithms.\n\n   \n\n\nModel selection and fitting: The models were trained on the training set.\n\nDifferent algorithms will have different parameters that can be adjusted which can affect the performance of the model (hyperparameters tuning, typically done while training the model).\n\n\n\n  \n\nPrediction: The best model was used to predict the missing env_cat_f2 and evaluate the model’s performance on the hold-out sample (testing set).\n\nEvaluation: The predictions were evaluated on the testing set based on performance metrics:\n\n\naccuracy, which is the proportion of correct predictions, and\n\nROC-AUC (Receiver Operating Characteristic - Area Under the Curve), which summarizes how well the model can distinguish between classes.\n\n   \n\nInterpretation: The model was interpreted to understand which features were most important in predicting the outcome.\n\n\nML is an iterative process, so it is common to revise (some of) the above steps multiple times to refine the model."
  },
  {
    "objectID": "posts/PDO_eda.html#models-and-results",
    "href": "posts/PDO_eda.html#models-and-results",
    "title": "A text exploration of the World Bank’s projects objectives (PDO)",
    "section": "Models and Results",
    "text": "Models and Results\nTable 9 reports the specifications of the models and their performance.\n\n\n\nTable 9: Comparison of models and results for binary outcome\n\n\n\n\n\nAlgorithm\nFeatures\nSpecification\nAccuracy\nROC_auc\n\n\n\nLASSO logistic regression\nText only\nenv_cat_f2 ~ pdo\n0.750\n0.777\n\n\nLASSO logistic regression (more preprocessing)\nText only\nenv_cat_f2 ~ pdo\n0.762\n0.807\n\n\nLASSO logistic regression (more preprocessing)\nText + other predictors\nenv_cat_f2 ~ pdo + sector_f + regionname + FYapprov\n0.790\n0.850\n\n\nNaïve Bayes classification\nText + other predictors\nenv_cat_f2 ~ pdo + sector_f + regionname + FYapprov\n0.691\n0.784\n\n\n\n\n\n\n\n\n\nThe best model performance was achieved by the LASSO logistic regression model that combined both PDOs’ text and some available metadata information to predict the missing env_cat_f2 in the testing set. The model achieved an accuracy of 0.79 and an ROC-AUC of 0.85, whereas:\n\n\naccuracy is the proportion of correct predictions made by the model out of all predictions or, in other words, how often the model is correct overall.\n\nROC-AUC (Receiver Operating Characteristic - Area Under the Curve) goes further by evaluating the model’s ability to distinguish between classes across various thresholds. It summarizes how well the model can separates the classes, providing a more nuanced view of its performance, especially useful when the class distribution is uneven."
  },
  {
    "objectID": "posts/PDO_eda.html#performance-of-the-preferred-ml-model",
    "href": "posts/PDO_eda.html#performance-of-the-preferred-ml-model",
    "title": "A text exploration of the World Bank’s projects objectives (PDO)",
    "section": "Performance of the preferred ML model",
    "text": "Performance of the preferred ML model\nFigure 13 presents the confusion matrix for the preferred ML model used to predict the missing environment risk category assigned to World Bank projects. This matrix shows the distribution of true and predicted classifications. Ideally, a high-performing model would have most observations (or darker shading) along the diagonal, indicating correct classifications—specifically, true positives in the top-left quadrant and true negatives in the bottom-right quadrant.\nIn this case, the model performs well in predicting the environment risk category for the High-Med group but struggles with the Low & Other group. Many of these cases are incorrectly classified as High-Med Risk (false positives). This result is understandable, as the Low & Other category is more loosely defined and even includes Missing observations (which, in hindsight, could have been excluded from the prediction).\n\n\n\n\nFigure 13"
  },
  {
    "objectID": "posts/PDO_eda.html#most-important-features-for-prediction",
    "href": "posts/PDO_eda.html#most-important-features-for-prediction",
    "title": "A text exploration of the World Bank’s projects objectives (PDO)",
    "section": "Most important features for prediction",
    "text": "Most important features for prediction\nIt’s also insightful to examine which coefficients are most influential in the model. This can be done visually through the feature importance plot (see Figure 14).\nThe feature importance plot displays the top 50 predictors of the environmental risk (binary) category, ranked by their impact in a LASSO logistic regression model. For clarity, predictors are divided according to the risk level they predict. As expected, given the structure of the data, words from the PDO text (those variables starting with pdo_*) are among the most important predictors. However, other predictors also play a significant role, such as sector_f_TRANSPORT (left panel), regionname, and sector_f_FINANCIAL (right panel).\n\n\n\n\nFigure 14: Top 50 most important features in the preferred ML model"
  },
  {
    "objectID": "posts/PDO_eda.html#prediction-and-interpretation",
    "href": "posts/PDO_eda.html#prediction-and-interpretation",
    "title": "A text exploration of the World Bank’s projects objectives (PDO)",
    "section": "Prediction and Interpretation",
    "text": "Prediction and Interpretation\nWhile the model’s prediction performance is not particularly remarkable, it is sufficient to illustrate the potential of this analysis to enhance the quality of incomplete datasets. With further improvements in preprocessing, feature engineering, algorithm selection, and hyperparameter tuning, there is significant potential to optimize a similar ML model.\nAlthough not reported here, I also explored predicting a multiclass outcome (sector, grouped into 7 levels). However, the results were less favorable compared to the binary classification. This outcome is expected, as multiclass classification is inherently more challenging, particularly with imbalanced data or limited sample sizes."
  },
  {
    "objectID": "analysis/01c_WB_project_pdo_feat_class.html",
    "href": "analysis/01c_WB_project_pdo_feat_class.html",
    "title": "WB Project PDO features classification",
    "section": "",
    "text": "Warning\n\n\n\n\n\nWORK IN PROGRESS! (Please expect unfinished sections, and unpolished code. Feedback is welcome!)"
  },
  {
    "objectID": "analysis/01c_WB_project_pdo_feat_class.html#what-ml-models-work-with-text",
    "href": "analysis/01c_WB_project_pdo_feat_class.html#what-ml-models-work-with-text",
    "title": "WB Project PDO features classification",
    "section": "What ML models work with text?",
    "text": "What ML models work with text?\n\nRemember that text data is SPARSE!\n\nTo predict a missing feature (e.g., sector) based on available features from text data, several supervised machine learning algorithms can be applied. Given that you have a mixture of text and structured data, here are some suitable algorithms:\n\n\nLogistic Regression / Multinomial Logistic Regression: If you’re predicting a categorical variable like “sector”, logistic regression can work well, especially with appropriate feature engineering for text (e.g., converting text data into numeric features using TF-IDF or word embeddings).\n\nLasso regression/classification learns how much of a penalty to put on some features (sometimes penalizing all the way down to zero) so that we can select only some features out of the high-dimensional space of original possible variables (tokens) for the final model.\n\nk-Nearest Neighbors (k-NN): k-NN can be useful for text data, especially when you have a mix of structured and unstructured data. It’s a simple algorithm that can work well with text data, but it can be computationally expensive.\n\nDecision Trees / Random Forests: These algorithms handle both numeric and categorical data efficiently and can manage missing values quite well. You can input text-based features as well, though you might need to preprocess the text into numeric form (e.g., using embeddings).\n\nNaive Bayes: Naive Bayes is a simple and efficient algorithm for text classification. It assumes feature independence, which may not always hold, but it’s often a good baseline, particularly with short texts.\n\nSupport Vector Machines (SVMs): SVMs are useful when you have high-dimensional data, which is common with text after feature extraction (like TF-IDF). They can perform well with a mix of structured and unstructured data.  \n\n\nAll available models are listed at parsnip\nSome model parameters can be learned from data during fitting/training. Some CANNOT 😱. These are hyperparameters of a model, and we estimate them by training lots of models with different hyperparameters and comparing them\n— Check missing feature\n\nsum(!is.na(projs_train$pdo))\nsum(!is.na(projs_train$sector1)) /4403# 99\nsum(!is.na(projs_train$regionname)) / 4403  # 100%\nsum(!is.na(projs_train$countryname)) / 4403  # 100%\nsum(!is.na(projs_train$status)) / 4403  # 100%\nsum(!is.na(projs_train$lendinginstr)) / 4403  # 99% \nsum(!is.na(projs_train$ESrisk)) / 4403  # 96% \nsum(!is.na(projs_train$curr_total_commitment)) / 4403  # 100% \n\nsum(!is.na(projs_train$theme1)) /4403 # 71% \ntable(projs_train$theme1, useNA = \"ifany\") # 71 levels\nsum(!is.na(projs_train$env_cat)) / 4403  # 73% \ntable(projs_train$env_cat , useNA = \"ifany\") # 7 levels\n\n\n# source function\nsource(here(\"R\",\"f_recap_values.R\")) \n\n# check candidate lables for classification \nf_recap_values(projs_train, c(\"sector1\", \"theme1\",\"env_cat\",\"ESrisk\" ) ) %&gt;% kable()\n\n\n\nskim_variable\ntotal_rows\nn_distinct\nn_missing\nmissing_perc\n\n\n\nESrisk\n4403\n5\n3980\n90.4%\n\n\ntheme1\n4403\n73\n1254\n28.5%\n\n\nenv_cat\n4403\n8\n1167\n26.5%\n\n\nsector1\n4403\n71\n17\n0.4%\n\n\n\n\n\n— Identify features for classification\nThese could be:\n\n\nfeatures derived from raw text (e.g. characters, words, ngrams, etc.),\n\nfeature vectors (e.g. word embeddings), or\n\nmeta-linguistic features (e.g. part-of-speech tags, syntactic parses, or semantic features)\n\nHow do we use them?\n\nDo we use raw token counts?\n\nDo we use normalized frequencies?\nDo we use some type of weighting scheme? ✅\n\nyes, we use tf-idf (a weighting scheme, which will downweight words that are common across all documents and upweight words that are unique to a document)\n\n\nDo we use some type of dimensionality reduction? ✅ # TEXT CLASSIFICATION for Environmental Assessment Category\n\nFrancom text Classification (in R) Stanford slide"
  },
  {
    "objectID": "analysis/01c_WB_project_pdo_feat_class.html#select-and-engineer-the-features-using-projs_train",
    "href": "analysis/01c_WB_project_pdo_feat_class.html#select-and-engineer-the-features-using-projs_train",
    "title": "WB Project PDO features classification",
    "section": "1) Select and engineer the features [using projs_train]",
    "text": "1) Select and engineer the features [using projs_train]\nRecode env_cat variable\n\nprojs_train &lt;- projs_train %&gt;% \n   # useful for later \n   rename(., proj_id = \"id\") %&gt;%\n   # recode as factors \n   mutate (across (c(status, boardapprovalFY, regionname, countryname, sector1, \n                     theme1, lendinginstr), as.factor))  %&gt;% \n   # env risk category 7 levels\n   mutate(env_cat_f = fct_na_value_to_level(env_cat, level = \"Missing\")) %&gt;% \n   mutate(env_cat_f = fct_recode(env_cat_f, \n                              \"A_high risk\" = \"A\", \n                              \"B_med risk\" = \"B\", \n                              \"C_low risk\" = \"C\", \n                              \"F_fin expos\" = \"F\", \n                              \"Other\" = \"H\", \n                              \"Other\" = \"M\", \n                              \"Other\" = \"U\", \n                              \"Missing\" = \"Missing\" )) %&gt;% \n   relocate(env_cat_f , .after = env_cat) %&gt;% \n   # collaapse env_cat_f into 2 levels\n   mutate(env_cat_f2 = fct_collapse(env_cat_f, \n                                    \"High-Med-risk\" = c(\"A_high risk\", \"B_med risk\"),\n                                    \"Low-risk_Othr\" = c(\"C_low risk\", \"F_fin expos\", \"Other\", \"Missing\")\n   )) %&gt;% \n   relocate(env_cat_f2, .after = env_cat_f)\n\ntabyl(projs_train, env_cat, show_na = TRUE) # 7 levels\ntabyl(projs_train, env_cat_f, show_na = TRUE) # 2 levels\ntabyl(projs_train, env_cat_f2, show_na = TRUE) # 7levels\n\n\n# Show as contingency table env_cat_f and env_cat_f2\nenv_cat_f_f2_k &lt;- table(projs_train$env_cat_f, projs_train$env_cat_f2) %&gt;% \n   kable() %&gt;% \n   kable_styling(\"striped\", full_width = F)\n\nenv_cat_f_f2_k\nsaveRDS(env_cat_f_f2_k, here(\"analysis\", \"output\", \"tables\", \"env_cat_f_f2_k.rds\"))\n\n\nTable 1: Recoded Environmental Assessment Category\n\n\n\n\n\n\nHigh-Med-risk\nLow-risk_Othr\n\n\n\nA_high risk\n351\n0\n\n\nB_med risk\n1830\n0\n\n\nC_low risk\n0\n880\n\n\nF_fin expos\n0\n127\n\n\nOther\n0\n48\n\n\nMissing\n0\n1167\n\n\n\n\n\n\n\n\n\nRecode sector1 variable\n(this I use later as MULTI-CLASS outcome)\n\n# !!!!! `sector_f` e' diverso da `tok_sector_broad` XCHE si basa su `sector1` !!!! \nprojs_train &lt;- projs_train %&gt;% # sector1 99 levels\n   mutate(sector_f = case_when(\n      str_detect(sector1, regex(\"water|wastewater|sanitat|Sewer|Irrigat|Drainag\", ignore_case = T)) ~ \"WAT & SAN\",\n      str_detect(sector1, regex(\"transport|railway|road|airport|waterway|bus|metropolitan|inter-urban|aviation\", ignore_case = T)) ~ \"TRANSPORT\",\n      sector1 == \"port\" ~ \"TRANSPORT\",\n      str_detect(sector1, regex(\"urban|housing|inter-urban|peri-urban|waste\", ignore_case = T)) ~ \"URBAN\",\n      str_detect(sector1, regex(\"energ|electri|hydroele|hydropow|renewable|transmis\", ignore_case = T)) ~ \"ENERGY\",  # Matches either \"energy\" or \"power\"\n      str_detect(sector1, regex(\"health|hospital|medicine|drugs|epidem|pandem|covid-19|vaccin\", ignore_case = T)) ~ \"HEALTH\",\n      str_detect(sector1, regex(\"educat|school|vocat|teach|univers|student|literacy|training|curricul\", ignore_case = T)) ~ \"EDUCATION\",\n      \n      str_detect(sector1, regex(\"Agricultural|Agro|Fish|Forest|Crop|livestock|agri-business\", ignore_case = T)) ~ \"AGR FOR FISH\",\n      str_detect(sector1, regex(\"Minin|oil|gas|mineral|Extract\", ignore_case = T)) ~ \"MINING OIL&GAS\",\n      str_detect(sector1, regex(\"Social Protec\", ignore_case = T)) ~ \"SOCIAL PROT.\",\n      \n      str_detect(sector1, regex(\"Bank|finan|Investment\", ignore_case = T)) ~ \"FINANCIAL\",\n      str_detect(sector1, regex(\"Information|Communication|ICT|Internet|Technologies\", ignore_case = T)) ~ \"ICT\",\n      str_detect(sector1, regex(\"Tourism|Trade and Services|Manuf|Other Industry|Trade and Services\", ignore_case = T)) ~ \"IND TRADE SERV\",\n      str_detect(sector1, regex(\"Government|Public Admin|Institution|Central Agenc|Sub-national Gov|law|justice|governance\", ignore_case = T)) ~ \"INSTIT. SUPP.\",\n      TRUE ~ \"Missing\")) %&gt;% \n   relocate(sector_f, .after = sector1)  \n\ntabyl(projs_train, sector1, show_na = TRUE) # 99 levels\ntabyl(projs_train, sector_f, show_na = TRUE) # 7 levels\n#tabyl(projs_train, tok_sector_broad, show_na = TRUE) # 7 levels"
  },
  {
    "objectID": "analysis/01c_WB_project_pdo_feat_class.html#split-sample-based-on-env_cat-variable",
    "href": "analysis/01c_WB_project_pdo_feat_class.html#split-sample-based-on-env_cat-variable",
    "title": "WB Project PDO features classification",
    "section": "2) Split sample based on env_cat variable",
    "text": "2) Split sample based on env_cat variable\n\n\nSampling strategy\n\n\n— [1/2] Proportional sub-set dplyr::slice_sample\n\n\n# # Calculate proportions of missing and non-missing values in env_cat\n# proportion_missing &lt;- projs_train %&gt;%\n#   mutate(class_status = ifelse(is.na(env_cat), \"Missing\", \"Not Missing\")) %&gt;%\n#   count(class_status) %&gt;%\n#   mutate(prop = n / sum(n))\n# \n# # Ensure the number of samples adds up to 500\n# set.seed(123)  # For reproducibility\n# \n# # Define the number of samples for each group (rounding and adjusting for total = 500)\n# n_samples &lt;- round(500 * proportion_missing$prop)\n# n_samples[1] &lt;- 500 - sum(n_samples[-1])  # Adjust to ensure total is exactly 500\n# \n# # Split the data into missing and non-missing groups\n# missing_group &lt;- projs_train %&gt;%\n#   filter(is.na(theme1)) %&gt;%\n#   slice_sample(n = n_samples[proportion_missing$class_status == \"Missing\"])\n# \n# not_missing_group &lt;- projs_train %&gt;%\n#   filter(!is.na(theme1)) %&gt;%\n#   slice_sample(n = n_samples[proportion_missing$class_status == \"Not Missing\"])\n# \n# # Combine the two groups\n# projs_train_smpl &lt;- bind_rows(missing_group, not_missing_group)\n# \n# # View the sample\n# print(projs_train_smpl)\n\n— [2/2] Proportional sub-set rsample::initial_split\n\nBased on availability of env_cat_f.\nWe will use the strata argument to stratify the data by the outcome variable (env_cat_f). This will ensure that the training and validation sets have the same proportion.\n\n# Create a stratified split based on missing vs non-missing env_cat\nprojs_train %&gt;% tabyl(env_cat_f) # 7 levels\n\n# Split BUT only \"Not Missing\" `env_cat_f` \n## --- 0) THIS WILL BE 4 TRAINING & VALIDATION \nenv_cat_use &lt;- projs_train %&gt;% \n   filter(env_cat_f != \"Missing\") # 3236 proj \n\n# SPLIT INTO TRAINING, VALIDATION \nset.seed(123)  # Ensure reproducibility\nenv_split &lt;- initial_split(env_cat_use, prop = 0.7, # 70% training, 30% testing\n                       strata = env_cat_f) # stratify by OUTCOME \n\n## -- 1) for training (labelled `env_cat_f`)\nenv_cat_train &lt;- training(env_split)   # 2265 proj\n    \n## -- 2) for validation (labelled `env_cat_f`)\nenv_cat_test &lt;- testing(env_split)  # 971 proj\n   \n# # UNLABELLED PORTION \n## -- 3) for actual test (UNlabelled `env_cat_f`)\nenv_cat_missing &lt;- projs_train %&gt;% \n  filter(env_cat_f == \"Missing\") # 1167 proj \n\n# check ditribution of `env_cat_f` in training and validation\ntabyl(env_cat_train, env_cat_f) |&gt; adorn_totals(\"row\") |&gt; adorn_pct_formatting(digits = 1)# \ntabyl(env_cat_test, env_cat_f)|&gt; adorn_totals(\"row\") |&gt; adorn_pct_formatting(digits = 1)# \n\n\nrm( env_cat_use, env_cat_missing)\n\n\n# # Rebalance the classes\n# tabyl(env_cat_train, env_cat_f) |&gt; adorn_totals(\"row\") |&gt; adorn_pct_formatting(digits = 1)\n# \n# ds_rec &lt;-  recipe(env_cat_f ~ ., data = env_cat_train) %&gt;% \n#  step_downsample(env_cat_f , under_ratio = 3, trained = FALSE) %&gt;%\n#    prep() \n# \n# training &lt;- ds_rec %&gt;%\n#   bake(new_data = NULL) %&gt;%\n#   count(env_cat_f, name = \"training\")\n# training\n# \n# \n# env_cat_train %&gt;%  count(env_cat_f) \n\n#__________"
  },
  {
    "objectID": "analysis/01c_WB_project_pdo_feat_class.html#define-preprocessing-steps",
    "href": "analysis/01c_WB_project_pdo_feat_class.html#define-preprocessing-steps",
    "title": "WB Project PDO features classification",
    "section": "3) Define preprocessing steps",
    "text": "3) Define preprocessing steps\nPrep recipe [env_recipe]\n{textrecipes} provides a number of step functions for pre-processing text data. These include functions to tokenize (e.g. step_tokenize()), remove stop words (e.g. step_stopwords()), and to derive meta-features (e.g. step_lemma(), step_stem(), etc.) Furthermore, there are functions to engineer features in ways that are particularly relevant to text data, such as feature frequencies and weights (e.g. step_tf(), step_tfidf(), etc.) and token filtering (e.g. step_tokenfilter()).\n\nstep_tokenize()\n\nstep_tfidf()\n\n\nsmooth_idf = FALSE (terms that appear in many (or all) documents will not be down weighted as much as they would be if the smoothing term was not added)\n\n\n\n\n# add step to recipe\nenv_recipe &lt;- recipe (formula = env_cat_f2 ~ pdo,\n                      data = env_cat_train) %&gt;%\n   step_tokenize(pdo) %&gt;%   # tokenize\n   step_tfidf(pdo, smooth_idf = FALSE) # tf-idf  creates matrix of term frequencies weighted by inverse document frequency \n\n# Review the recipe   \nenv_recipe\n\n# Run the recipe \nenv_recipe_bake &lt;-  env_recipe %&gt;% \n   # chooses the parameters for the recipe based on the data\n   prep(training = NULL) %&gt;% \n   # applies the recipe to the data\n   bake(new_data = NULL)\n\n# preview the baked recipe -- TOO SPARSE \ndim(env_recipe_bake)\n#[1] 2264 7516\n\nThe resulting engineered features data frame has 2264 observations and 7516 variables!!! I.e. for each writing sample, only a small subset of them will actually appear, most of our cells will be filled with zeros. This is what is known as a sparse matrix. Furthermore, the more features we have, the more chance these features will capture the nuances of these particular writing samples increasing the likelihood we overfit the model.\nImprove recipe [env_recipe]\n\nWe can filter out features by stopword list or\nFilter by frequency of occurrence\n\n\n# -- Rebuild recipe with tokenfilter step\nenv_recipe &lt;- recipe (formula = env_cat_f2 ~ pdo,\n                      data = env_cat_train) %&gt;%\n   # tokenize\n   step_tokenize(pdo) %&gt;%   \n   # filter by frequency of occurrence\n   step_tokenfilter(pdo, max_tokens = 100) %&gt;%  \n   # tf-idf  creates matrix of weighted term frequencies  \n   step_tfidf(pdo, smooth_idf = FALSE)      \n\n# -- Run the recipe \nenv_recipe_bake &lt;-  env_recipe %&gt;% \n   # chooses the parameters for the recipe based on the data\n   prep(training = NULL) %&gt;% \n   # applies the recipe to the data\n   bake(new_data = NULL)\n\n# -- preview the baked recipe\ndim(env_recipe_bake)\n#[1] 2264 7516 --&gt; #[1] 2264 101\n\n# subset check\nenv_recipe_bake[1:5, 1:10 ]"
  },
  {
    "objectID": "analysis/01c_WB_project_pdo_feat_class.html#select-classification-model",
    "href": "analysis/01c_WB_project_pdo_feat_class.html#select-classification-model",
    "title": "WB Project PDO features classification",
    "section": "4) Select classification model",
    "text": "4) Select classification model\nLogistic Regr Model [env_spec]\nLet’s start with a simple logistic regression model to see how well we can classify the texts in the training set with the features we have engineered. We will use the parsnip::logistic_reg() function to specify the logistic regression model. We then select the implementation engine (glmnet General Linear Model) and the mode of the model (classification).\n— Model specification\n\n# Create a model specification\nenv_spec &lt;-\n   # lasso regularized model\n   parsnip::logistic_reg(\n      # non-negative number ~ the total amount of regularization\n      penalty = tune(),  # 0 = no penalty, 1 = max\n      # number between zero and one (inclusive) \n      mixture = 1 # specifies a pure lasso model,\n   ) %&gt;%\n   set_mode(\"classification\") %&gt;%\n   set_engine(\"glmnet\")\n\n# Preview \nenv_spec\n\nCreate workflow [env_wf]\nCheck the resulting workflow (a container object that aggregates information required to fit and predict from a model) by adding the recipe and model to it.\n\n# Create a workflow\nenv_wf &lt;- workflows::workflow() %&gt;%\n   add_recipe(env_recipe) %&gt;%\n   add_model(env_spec)\n\nenv_wf\n\n— Evaluate so far\n\n# set.seed(123)\n# # 1. Define the resampling folds\n# env_folds &lt;- vfold_cv(env_cat_train)\n# \n# # 2. Define a tuning grid for the parameters\n# grid &lt;- grid_regular(penalty(), mixture(),  levels = 10)  # Adjust the levels as needed\n# \n# env_rs &lt;- fit_resamples(\n#    env_wf,                      # Workflow\n#    resamples = env_folds,        # Cross-validation folds\n#    grid = grid,                  # Tuning grid\n#    control = control_resamples(save_pred = TRUE)\n# )"
  },
  {
    "objectID": "analysis/01c_WB_project_pdo_feat_class.html#tuning-hyperparameters",
    "href": "analysis/01c_WB_project_pdo_feat_class.html#tuning-hyperparameters",
    "title": "WB Project PDO features classification",
    "section": "5) Tuning hyperparameters",
    "text": "5) Tuning hyperparameters\nDifferent algorithms will have different parameters that can be adjusted which can affect the performance of the model (hyperparameters) ≠ parameters (features) –&gt; hyperparameters tuning which is topically done during fitting the model to the training set and evaluating its performance\n— Penalty tuning [env_grid]\nIn logistic regression, the penalty hyperparameter is like a control that helps prevent the model from becoming too complex and overfitting to the training data. There are two common types of penalties:\n\nL1 (Lasso): Encourages the model to use fewer features by making some of the coefficients exactly zero. This can simplify the model.\nL2 (Ridge): Tries to keep all the coefficients small but not exactly zero, which can help stabilize the model and avoid overfitting.\n\nthe logistic regression model using glmnet can be tuned to prevent overfitting by adjusting the penalty and mixture (combination of L1 and L2) hyperparameters\n\nIn our env_spec model, tune() was a placeholder for a range of values for the penalty hyperparameter.\nTo tune the penalty hyperparameter, we use thegrid_regular() function from {dials} to specify a grid of values to try.\n\n\nThe package dials contains infrastructure to create and manage values of tuning parameters for the tidymodels packages.\n\n\n# Create a grid of values for the penalty hyperparameter (random set of 10 values)\nenv_grid &lt;- dials::grid_regular(\n  penalty(), levels = 10)\n\n# Preview\nenv_grid \n# 0 no penalty\n# ... \n# 1 max penalty\n\n— K-fold cross-validation (for penalty optimal #) [ env_fold, env_tune]\nNow to perform the tuning and choose an optimal value for penalty we need to create a tuning workflow. We use the strategy of resampling (splitting env_cat_train in multiple training/testing sets) called k-fold cross-validation to arrive at the optimal value for the penalty hyperparameter.\n\n# Create a resampling object\nenv_vfold &lt;- rsample::vfold_cv(env_cat_train, v = 10)\n\n# Create a tuning workflow\nenv_tune &lt;- tune::tune_grid(\n  object = env_wf,\n  resamples = env_vfold,\n  grid = env_grid,\n  control = control_grid(save_pred = TRUE)\n)\n\n# preview\nenv_tune\n\nThe env_tune object contains the results of the tuning for each fold. We can see the results of the tuning for each fold by calling the collect_metrics() function on the cls_tune object\n\n# Collect the results of the tuning\nenv_tune_metrics &lt;- tune::collect_metrics(env_tune)\n\n# visualize the results\nautoplot(env_tune) +\n  labs(\n    title = \"Lasso model performance across regularization penalties\",\n    subtitle = \"Performance metrics can be used to identify the best penalty\"\n  )\n# in roc_auc: many many of the penalty values performed similarly, with a drop-off in performance at the higher val- ues\n\nThe most common metrics for model performance in classification are accuracy and the area under the receiver operating characteristic area under the curve (ROC-AUC). Accuracy is simply the proportion of correct predictions. The ROC-AUC provides a single score which summarizes how well the model can distinguish between classes. The closer to 1 the more discriminative power the model has.\nConveniently, the show_best() function from {tune} takes a tune_grid object and returns the best performing hyperparameter values.\n\n# Show the best hyperparameter values\nshow_best(env_tune, metric = \"roc_auc\") # 0.779 \n\n# Make selection programmatically\nenv_best &lt;- select_best(env_tune, metric =\"roc_auc\")\nenv_best_acc &lt;- select_best(env_tune, metric =\"accuracy\")"
  },
  {
    "objectID": "analysis/01c_WB_project_pdo_feat_class.html#update-model-specification-and-workflow-with-best-hp",
    "href": "analysis/01c_WB_project_pdo_feat_class.html#update-model-specification-and-workflow-with-best-hp",
    "title": "WB Project PDO features classification",
    "section": "6) Update model specification and workflow with best HP",
    "text": "6) Update model specification and workflow with best HP\nUpdate workflow [env_wf_lasso]\nNow we can update the model specification and workflow with the best performing hyperparameter value using the previous cls_wf_tune workflow and the finalize_workflow() function.\n\n# Update the workflow/model specification\nenv_wf_lasso &lt;- env_wf %&gt;% \n   tune::finalize_workflow(env_best)\n\n# Preview updated workflow object (with defined penalty paramv  0.00599)\nenv_wf_lasso\n\n\nInstead of penalty = tune() like before, now our workflow has finalized values for all arguments."
  },
  {
    "objectID": "analysis/01c_WB_project_pdo_feat_class.html#assess-the-model-performance-on-training-set",
    "href": "analysis/01c_WB_project_pdo_feat_class.html#assess-the-model-performance-on-training-set",
    "title": "WB Project PDO features classification",
    "section": "7) Assess the model performance on training set",
    "text": "7) Assess the model performance on training set\n— See the results [env_lasso_fit]\nHere we access the model coefficients to see which features are most important in the model + We see here, for the penalty we chose, what terms contribute the most to a en cat NOT being high risk .\n\n# Fit the model to the training data\nenv_lasso_fit &lt;- fit (env_wf_lasso, data = env_cat_train)\n\n— Coefficients [enf_fitted_coeff]\n\nenv_fitted_coeff &lt;- env_lasso_fit %&gt;% extract_fit_parsnip() %&gt;% \n   tidy() %&gt;%\n   arrange(-estimate)\n\n— [FIG] Assessing performanceon training set\n\n# Example of a data frame containing actual and predicted values\npred_long  &lt;- predict(env_lasso_fit, new_data = env_cat_train , type = \"prob\")|&gt;\n   bind_cols(env_cat_train) %&gt;% \n   select(env_cat_f2,  pred_high_risk = '.pred_High-Med-risk', pred_low_risk = '.pred_Low-risk_Othr')   %&gt;%\n   pivot_longer(cols = c(pred_high_risk, pred_low_risk),\n                names_to = \"risk_type\", values_to = \"risk_value\")\n\n# Plot the predictions with boxplots and jittered points without duplicate legends\nggplot(pred_long, aes(x = env_cat_f2, y = risk_value, fill = risk_type)) +\n  geom_boxplot(alpha = 0.4, position = position_dodge(width = 0.8)) +\n  #geom_jitter(alpha = 0.6, position = position_dodge(width = 0.8)) +  # Remove width and use position_dodge\n   labs(title = \"Predicted High and Low Risk Distribution by Env Category\",\n        subtitle = \"Model: Lasso Regression fitted on training data\",\n       x = \"ACTUAL\",\n       y = \"PREDICTED\",\n       fill = \"Risk Type\") +  # Set label for fill legend\n  theme_minimal() +\n  guides(color = \"none\")  # Suppress the color legend\n\n\n\n\n\n\n\n— Assess the model w cross-valid [env_lasso_cv]\nThe next step is to assess the performance of the model (in wf env_wf_lasso) on the training set given the features we have engineered, the algorithm we have selected, and the hyperparameters we have tuned.\nInstead of evaluating the model on the training set directly, we will use cross-validation on the training set to gauge the variability of the model (as the model’s performance on the entire training set at once is not a reliable indicator of the model’s performance on new data). In fact: + Cross-validation is a technique that allows us to estimate the model’s performance on new data by simulating the process of training and testing the model on different subsets of the training data (from env_vfold. + the function tune::fit_resamples() fits the model to the training data and evaluate its performance.\n\n# (this is similar to env_tune) \nset.seed(123)\n# Cross validate the (optimized) workflow\nenv_lasso_cv &lt;- env_wf_lasso %&gt;%\n   tune::fit_resamples(\n      # 10 fold cross validation splits\n      resamples = env_vfold,\n      # save predictions for confusion matrix\n      control = control_resamples(save_pred = TRUE)\n   )\n\nWe want to aggregate the metrics across the folds to get a sense of the variability of the model. The collect_metrics() function takes the results of a cross-validation and returns a data frame with the metrics.\n\nenv_lasso_cv[[3]][[1]] # 1st split \nenv_lasso_cv[[3]][[3]] # 3rd split\n\n# Collect the results of the cross-validation (this is the average from the 10 splits!)\ncollect_metrics(env_lasso_cv)\n# accuracy    binary     0.745    10 0.00923 Preprocessor1_Model1\n# brier_class binary     0.175    10 0.00462 Preprocessor1_Model1\n# roc_auc     binary     0.778    10 0.0111  Preprocessor1_Model1\n\nFrom the accuracy and ROC-AUC metrics it appears we have a decent candidate model, but there is room for potential improvement. A good next step is to evaluate the model errors and see if there are any patterns that can be addressed before considering what approach to take to improve the model.\n— [FIG] Visualize the confusion matrix\nThe confusion matrix is a table that shows the number of true positives, true negatives, false positives, and false negatives. It is a useful tool for understanding the model’s errors and can help identify patterns that can be addressed to improve the model.\n\nThe conf_mat_resampled() function takes a fit_resamples object (with predictions saved) and returns a table (tidy = FALSE) with the confusion matrix for the aggregated folds. We can pass this to the autoplot() function to plot +this is done on the cross-valid results env_lasso_cv (?!)\n\n\n# Plot the confusion matrix\nenv_lasso_cv %&gt;%\n   tune::conf_mat_resampled(tidy = FALSE) %&gt;%\n   autoplot(type = \"heatmap\")\n\n\n\n\n\n\n# 137.2 = true positives \n# 33.6 = true negatives\n\n# 40.5 = false positives\n# 15.1 = false negatives\n\nThere are more false positives (low risk predicted to be high risk) than false negatives. (This is a common issue in imbalanced datasets and can be addressed by adjusting the decision threshold of the model.)"
  },
  {
    "objectID": "analysis/01c_WB_project_pdo_feat_class.html#workflow-and-specification-for-null-model",
    "href": "analysis/01c_WB_project_pdo_feat_class.html#workflow-and-specification-for-null-model",
    "title": "WB Project PDO features classification",
    "section": "Workflow and specification for NULL MODEL",
    "text": "Workflow and specification for NULL MODEL\nWe can build a classification null_model() specification and add it to a workflow() with the same preprocessing recipe we used in the previous section, to estimate performance.\n\n# Create a NULL model\nnull_classification &lt;- null_model() %&gt;% \n   set_engine(\"parsnip\") %&gt;% \n   set_mode(\"classification\")\n\nnull_rs &lt;- workflow() %&gt;% \n   add_recipe(env_recipe) %&gt;%\n   add_model(null_classification) %&gt;%\n  fit_resamples(\n    env_vfold\n  )"
  },
  {
    "objectID": "analysis/01c_WB_project_pdo_feat_class.html#assess-the-model-performance-on-training-set-1",
    "href": "analysis/01c_WB_project_pdo_feat_class.html#assess-the-model-performance-on-training-set-1",
    "title": "WB Project PDO features classification",
    "section": "Assess the model performance on training set",
    "text": "Assess the model performance on training set\nWhat results do we obtain from the null model, in terms of performance metrics?\n\ncollect_metrics(null_rs)\n\n# 1 accuracy    binary     0.673    10 0.00750 Preprocessor1_Model1\n# 2 brier_class binary     0.220    10 0.00258 Preprocessor1_Model1\n# 3 roc_auc     binary     0.5      10 0       Preprocessor1_Model1\n\n\nThe accuracy and ROC AUC indicate that this null model is, like in the regression case, dramatically worse than even our first model."
  },
  {
    "objectID": "analysis/01c_WB_project_pdo_feat_class.html#add-stopwords-exclusion-to-the-recipe",
    "href": "analysis/01c_WB_project_pdo_feat_class.html#add-stopwords-exclusion-to-the-recipe",
    "title": "WB Project PDO features classification",
    "section": "[🤞🏻] Add stopwords exclusion to the recipe",
    "text": "[🤞🏻] Add stopwords exclusion to the recipe\n3) Define preprocessing steps (NEW!)\n\n# Create a custom stopword list\nstop_vector &lt;- custom_stop_words_df %&gt;%  pull(word)\n\n— Improve recipe [env_stop_recipe]\n\n# ---  Create a recipe with a token filter step that excludes stopwords\n# Rebuild recipe with tokenfilter step\nenv_stop_recipe &lt;- recipes::recipe (\n   formula = env_cat_f2 ~ pdo,\n   data = env_cat_train) %&gt;%\n   step_tokenize(pdo) %&gt;%   # tokenize\n   # remove CUSTOM stopwords\n   step_stopwords(pdo, custom_stopword_source = stop_vector) %&gt;%  \n   step_tokenfilter(pdo, max_tokens = 100) %&gt;%  # filter by frequency of occurrence\n   step_tfidf(pdo, smooth_idf = FALSE)      # tf-idf  creates matrix of weighted term frequencies  \n\n# prep and bake the recipe\nenv_stop_recipe_bake &lt;-  env_stop_recipe %&gt;% \n  prep() %&gt;% \n   bake(new_data = NULL)\n\n# preview the baked recipe\ndim(env_stop_recipe_bake)\n#[1] 2264 101\nenv_recipe_bake[1:5, 1:10]\nenv_stop_recipe_bake[1:5, 1:10]\n\n4) Select a classification algorithm (same)\n— Model specification\n\n# Create a model specification\nenv_spec &lt;-\n   # generalized linear model for binary outcomes\n   parsnip::logistic_reg(\n      # A non-negative number representing the total amount of regularization\n      penalty = tune(),  # 0 = no penalty, 1 = max\n      #A number between zero and one (inclusive)\n      mixture = 1 # pecifies a pure lasso model,\n   ) %&gt;%\n   set_engine(\"glmnet\")\n                           ##### tune() IS A PLACEHOLDER\n# Preview\nenv_spec\n\n— Create workflow [env_stop_wf]\nenv_stop_recipe is actually the part that changed in this workflow adding step_stopwords().\n\n# Create a workflow\nenv_stop_wf &lt;- workflows::workflow() %&gt;%\n   add_recipe(env_stop_recipe) %&gt;%  # NEW RECIPE\n   add_model(env_spec)\n# Preview\nenv_stop_wf\n\n5) Tuning hyperparameters (same)\n— Penalty tuning [env_grid] (same)\n\n# Create a grid of values for the penalty hyperparameter (random set of 10 values)\nenv_grid &lt;- dials::grid_regular(\n  penalty(), levels = 10\n  )\n# Preview\nenv_grid \n\n— K-fold cross-val [env_fold, env_FEAT_tune] (same/NEW)\n\n# Create a resampling object\nenv_vfold &lt;- rsample::vfold_cv(env_cat_train, v = 10)\n\n# Create a tuning workflow\nenv_stop_tune &lt;- tune::tune_grid(\n  object = env_stop_wf, # changed ! \n  resamples = env_vfold,\n  grid = env_grid,\n  control = control_grid(save_pred = TRUE)\n)\n# preview\nenv_stop_tune\n\nThe env_stop_tune object contains the results of the tuning for each fold. We can see the results of the tuning for each fold by calling the collect_metrics() function on the env_stop_tune object\n\n# Collect the results of the tuning\nenv_stop_tune_metrics &lt;- tune::collect_metrics(env_stop_tune)\n\n# visualize the results\nautoplot(env_stop_tune) +\n  labs(\n    title = \"Lasso model performance across regularization penalties\",\n    subtitle = \"Performance metrics can be used to identify the best penalty\"\n  )\n# in roc_auc: many many of the penalty values performed similarly, with a drop-off in performance at the higher val- ues\n\nConveniently, the tune::show_best() function takes a tune_grid object and returns the best performing hyperparameter values.\n\n# Show the best hyperparameter values\nshow_best(env_stop_tune, metric = \"roc_auc\")\n\n# Make selection programmatically\nenv_stop_best &lt;- select_best(env_stop_tune, metric =\"roc_auc\")\nenv_stop_best_acc &lt;- select_best(env_stop_tune, metric =\"accuracy\")\nenv_stop_best_brier &lt;- select_best(env_stop_tune, metric =\"brier_class\")\n\n6) Update model specification and workflow with best HP (NEW)\nUpdate workflow [env_stop_wf_lasso]\nNow we can update the model specification and workflow with the best performing hyperparameter value using the previous cls_wf_tune workflow and the finalize_workflow() function.\n\n# Update the model specification\nenv_stop_wf_lasso &lt;- env_stop_wf %&gt;% \n   tune::finalize_workflow(env_stop_best)\n\n# Preview updated workflow object (with defined penalty paramv  0.00599)\nenv_stop_wf_lasso\n\n7) Assess the model performance on training set\n— See the results [env_lasso_fit]\nHere we access the model coefficients to see which features are most important in the model + We see here, for the penalty we chose, what terms contribute the most to a en cat NOT being high risk .\n\n# Fit the model to the training data\nenv_stop_lasso_fit &lt;- fit (env_stop_wf_lasso, data = env_cat_train)\n\n— Coefficients [enf_fitted_coeff]\n\nenv_stop_fitted_coeff &lt;- env_stop_lasso_fit %&gt;% extract_fit_parsnip() %&gt;% \n   tidy() %&gt;%\n   arrange(-estimate)\n\n“and” is not top coefficient anymore!!!\n— [FIG] Assessing performance [env_stop_lasso_fit] on training set\n\n# Example of a data frame containing actual and predicted values\npred_stop_long  &lt;- predict(env_stop_lasso_fit, new_data = env_cat_train , type = \"prob\")|&gt;\n   bind_cols(env_cat_train) %&gt;% \n   select(env_cat_f2,  pred_high_risk = '.pred_High-Med-risk', pred_low_risk = '.pred_Low-risk_Othr')   %&gt;%\n   pivot_longer(cols = c(pred_high_risk, pred_low_risk),\n                names_to = \"risk_type\", values_to = \"risk_value\")\n\n# Plot the predictions with boxplots and jittered points without duplicate legends\nggplot(pred_stop_long, aes(x = env_cat_f2, y = risk_value, fill = risk_type)) +\n  geom_boxplot(alpha = 0.4, position = position_dodge(width = 0.8)) +\n  #geom_jitter(alpha = 0.6, position = position_dodge(width = 0.8)) +  # Remove width and use position_dodge\n   labs(title = \"Predicted High and Low Risk Distribution by Env Category\",\n        subtitle = \"Model: Lasso Regression fitted on training data (stopwords)\",\n       x = \"ACTUAL\",\n       y = \"PREDICTED\",\n       fill = \"Risk Type\") +  # Set label for fill legend\n  theme_minimal() +\n  guides(color = \"none\")  # Suppress the color legend\n\n\n\n\n\n\n\nThis model did not improve much (especially on the LOW-risk-Other level prediction!\n— Assess the model w cross-valid [env_stop_lasso_cv]\n\n# (this is similar to env_tune) \n\n# Cross validate the (optimized) workflow\nenv_stop_lasso_cv &lt;- env_stop_wf_lasso %&gt;%\n   tune::fit_resamples(\n      # 10 fold cross validation splits\n      resamples = env_vfold,\n      # save predictions for confusion matrix\n      control = control_resamples(save_pred = TRUE)\n   )\n\nWe want to aggregate the metrics across the folds to get a sense of the variability of the model. The collect_metrics() function takes the results of a cross-validation and returns a data frame with the metrics.\n\nenv_stop_lasso_cv[[3]][[1]] # 1st split \nenv_stop_lasso_cv[[3]][[3]] # 3rd split\n\n# Collect the results of the cross-validation (this is the average from the 10 splits!)\ncollect_metrics(env_stop_lasso_cv)\n# 1 accuracy    binary     0.750    10 0.00745 Preprocessor1_Model1\n# 2 brier_class binary     0.172    10 0.00322 Preprocessor1_Model1\n# 3 roc_auc     binary     0.784    10 0.00881 Preprocessor1_Model1\n\n# OLD \ncollect_metrics(env_lasso_cv)\n# 1 accuracy    binary     0.750    10 0.0102  Preprocessor1_Model1\n# 2 brier_class binary     0.174    10 0.00352 Preprocessor1_Model1\n# 3 roc_auc     binary     0.777    10 0.00771 Preprocessor1_Model1\n\nSame accuracy but improve in roc_auc and brier_class compared to the previous model!\n— [FIG] Visualize the confusion matrix\n\n# BTW \ncollect_predictions(env_stop_lasso_cv)\n\nThis is done on the cross-valid results env_stop_lasso_cv (?!)\n\n# Plot the confusion matrix\nenv_stop_lasso_cv %&gt;%\n   tune::conf_mat_resampled(tidy = FALSE) %&gt;%\n   autoplot(type = \"heatmap\")\n\n\n\n\n\n\n# 137.2 = true positives  --&gt; 136.4 \n# 33.6 = true negatives  --&gt; 33.1\n\n# 40.5 = false positives  --&gt; 40.8\n# 15.1 = false negatives  --&gt; 15.3\n\nThere are more false positives (low risk predicted to be high risk) than false negatives. (This is a common issue in imbalanced datasets and can be addressed by adjusting the decision threshold of the model.)\n8) Evaluate the best model on the validation/test set\n\nTo do this we need to fit the tuned workflow to the training set, which is the actual training phase. We will use the last_fit() function from {workflows}\nLe’s use the updated workflow env_stop_wf_lasso\n— Fit the best model(training) and evaluate on the test set\n\n# fit the model to the training set and evaluate on the validation set\nenv_stop_lasso_final_fit &lt;- last_fit(\n   env_stop_wf_lasso, \n   split = env_split)\n\n# Evaluate the model on the validation set (in my case)\ncollect_metrics(env_stop_lasso_final_fit)\n\n# 1 accuracy    binary         0.762 Preprocessor1_Model1\n# 2 roc_auc     binary         0.807 Preprocessor1_Model1\n# 3 brier_class binary         0.163 Preprocessor1_Model1\n\nThe performance metrics are very close to those we achieved on the training set –&gt; good sign that the model is robust as it performs well on both training and test (validation) sets.\n— [FIG] Visualize the confusion matrix\n\n# Plot the confusion matrix\nenv_stop_lasso_final_fit %&gt;%\n   collect_predictions() %&gt;%\n   conf_mat(truth = env_cat_f2, estimate = .pred_class) %&gt;%\n   autoplot(type = \"heatmap\")\n\n\n\n\n\n\n\nStill (on the test set) imbalanced false positives (well) and false negatives (poor).\n— Visualize the ROC AUC curve\nTake the output of last_fit() and use it (env_stop_lasso_final_fit) to plot the ROC curve.\n\ncolnames(env_stop_lasso_final_fit)\n# Extract predictions from the final fit object\n# Extract the tibble from the list\nenv_stop_lassofinal_fit_pred &lt;-  env_stop_lasso_final_fit$.predictions[[1]]\nstr(env_stop_lassofinal_fit_pred)\n\n# Visualize the ROC curve \nenv_stop_lassofinal_fit_pred %&gt;% \n   roc_curve(truth = env_cat_f2, '.pred_High-Med-risk') %&gt;% \n   autoplot() +\n   labs(\n      title = \"ROC Curve for High-Med Risk Prediction\",\n      x = \"1 - Specificity (False Positive Rate)\",\n      y = \"Sensitivity (True Positive Rate)\",\n      caption = \"logistic regression model on text (stopwords)\"\n   )\n\n#__________"
  },
  {
    "objectID": "analysis/01c_WB_project_pdo_feat_class.html#logistic-with-pdo-sector_fregionnameboardapprovalfy-as-predictors",
    "href": "analysis/01c_WB_project_pdo_feat_class.html#logistic-with-pdo-sector_fregionnameboardapprovalfy-as-predictors",
    "title": "WB Project PDO features classification",
    "section": "[👍🏻] Logistic with pdo + sector_f|regionname|boardapprovalFY as predictors",
    "text": "[👍🏻] Logistic with pdo + sector_f|regionname|boardapprovalFY as predictors\n\n3) Define preprocessing steps [env_FEAT_recipe] (same)\n— Improve recipe [env_FEAT_recipe] (NEW!)\n\nusing sector_f to include the sector tag but with less dimensions\n\nstep_dummy because logistic regression, especially when using certain tuning functions in tidymodels, requires numeric or dummy variables.\n\n\n# ---  Create a recipe with a token filter step that excludes stopwords\n# Rebuild recipe with tokenfilter step\nenv_FEAT_recipe &lt;- recipe (env_cat_f2 ~ pdo + sector_f + regionname + boardapprovalFY,\n                           data = training(env_split)) %&gt;%\n   # tokenize the text\n   step_tokenize(pdo) %&gt;%  \n   # remove CUSTOM stopwords\n   step_stopwords(pdo, custom_stopword_source = stop_vector) %&gt;%  \n   # filter by frequency of occurrence\n   step_tokenfilter(pdo, max_tokens = 100) %&gt;%  \n   # creates tf-idf matrix of weighted term frequencies\n   step_tfidf(pdo, smooth_idf = FALSE) %&gt;%\n   # add NA as special factor level\n   step_unknown(sector_f ,new_level = \"Unknown sect\" ) %&gt;%\n   step_unknown(regionname ,new_level = \"Unknown reg\" ) %&gt;%\n   step_unknown(boardapprovalFY ,new_level = \"Unknown FY\" ) %&gt;%\n   # convert to dummy variables\n   step_dummy(sector_f, regionname, boardapprovalFY, one_hot = TRUE) \n\ncheck what changed…\n\n# prep and bake the recipe\nenv_FEAT_recipe_bake &lt;-  env_FEAT_recipe %&gt;% \n  prep() %&gt;% \n   bake(new_data = NULL)\n\n# preview the baked recipe\ndim(env_FEAT_recipe_bake)\n#[1] 2264 101 --&gt; 2264  150\nenv_FEAT_recipe_bake[1:5, 1:10]\n\n4) Select algorithm + workflow (same)\n— Model specification [env_spec]\n\n# Create a model specification\nenv_spec &lt;-\n   # generalized linear model for binary outcomes\n   parsnip::logistic_reg(\n      mode = \"classification\",\n      # A non-negative number representing the total amount of regularization\n      penalty = tune(),  # 0 = no penalty, 1 = max\n      #A number between zero and one (inclusive)\n      mixture = 1 # pecifies a pure lasso model,\n   ) %&gt;%\n   set_engine(\"glmnet\")\n                           ##### tune() IS A PLACEHOLDER\n# Preview\nenv_spec\n\n— Create workflow [env_FEAT_wf] (NEW!)\nenv_FEAT_recipe is actually the part that changed in this workflow adding step_stopwords().\n\n# Create a workflow\nenv_FEAT_wf &lt;- workflows::workflow() %&gt;%\n   add_recipe(env_FEAT_recipe) %&gt;%  # NEW RECIPE\n   add_model(env_spec) # same model\n# Preview\nenv_FEAT_wf\n\n5) Tuning hyperparameters (same)\n— Penalty tuning + folds [env_grid, env_fold] (same)\n\n# Create a grid of values for the penalty hyperparameter (random set of 10 values)\nenv_grid &lt;- dials::grid_regular(\n  penalty(), levels = 10\n  )\n# Create a resampling object\nenv_vfold &lt;- rsample::vfold_cv(env_cat_train, v = 10)\n\n— K-fold cross-val tuning [env_FEAT_tune] (NEW)\n\n# Create a tuning workflow\nenv_FEAT_tune &lt;- tune::tune_grid(\n  object = env_FEAT_wf, # changed ! \n  resamples = env_vfold,\n  grid = env_grid,\n  control = control_grid(save_pred = TRUE)\n)\n# preview\nenv_FEAT_tune\n\nThe env_FEAT_tune object contains the results of the tuning for each fold. We can see the results of the tuning for each fold by calling the collect_metrics() function on the env_FEAT_tune object\n\n# Collect the results of the tuning\nenv_FEAT_tune_metrics &lt;- tune::collect_metrics(env_FEAT_tune)\n\n# visualize the results\nautoplot(env_FEAT_tune)\n# in roc_auc: many many of the penalty values performed similarly, with a drop-off in performance at the higher val- ues\n\nConveniently, the tune::show_best() function takes a tune_grid object and returns the best performing hyperparameter values.\n\n# Show the best hyperparameter values\nshow_best(env_FEAT_tune, metric = \"roc_auc\")\n\n# Make selection programmatically\nenv_FEAT_best &lt;- select_best(env_FEAT_tune, metric =\"roc_auc\")\nenv_FEAT_best_acc &lt;- select_best(env_FEAT_tune, metric =\"accuracy\")\nenv_FEAT_best_brier &lt;- select_best(env_FEAT_tune, metric =\"brier_class\")\n\n6) Update model specification and workflow with best HP (NEW)\nUpdate workflow [env_FEAT_wf2]\nNow we can update the model specification and workflow with the best performing hyperparameter value using the previous env_FEAT_tune workflow and the finalize_workflow() function.\n\n# Update the model specification\nenv_FEAT_wf2 &lt;- env_FEAT_wf %&gt;% \n   tune::finalize_workflow(env_FEAT_best)\n\n# Preview updated workflow object (with defined penalty paramv  0.00599)\nenv_FEAT_wf2\n\n7) Assess the model performance on training set\n— See the results [env_lasso_fit]\nHere we access the model coefficients to see which features are most important in the model + We see here, for the penalty we chose, what terms contribute the most to a en cat NOT being high risk .\n\n# Fit the model to the training data\nenv_FEAT_fit &lt;- fit (env_FEAT_wf2, data = env_cat_train)\n\n— Coefficients [enf_fitted_coeff]\n\nenv_FEAT_fitted_coeff &lt;- env_FEAT_fit %&gt;% \n   extract_fit_parsnip() %&gt;% \n   tidy() %&gt;%\n   arrange(-estimate)\n\n\n“sector_f…” appear among the top coefficients!!!\n— [FIG] Assessing performance [env_FEAT_fit] on training set\nNow is env_split_train\n\n# Fit the model on the training set\nenv_FEAT_fit &lt;- env_FEAT_wf2 %&gt;% # NEW\n   fit(data = training(env_split))\n\n# Example of a data frame containing actual and predicted values\npred_FEAT_long  &lt;- predict(env_FEAT_fit, new_data = training(env_split), type = \"prob\")|&gt;\n   bind_cols(training(env_split)) %&gt;% \n   select(env_cat_f2,  pred_high_risk = '.pred_High-Med-risk', pred_low_risk = '.pred_Low-risk_Othr')   %&gt;%\n   pivot_longer(cols = c(pred_high_risk, pred_low_risk),\n                names_to = \"risk_type\", values_to = \"risk_value\")\n\n# Plot the predictions with boxplots and jittered points without duplicate legends\nggplot(pred_FEAT_long, aes(x = env_cat_f2, y = risk_value, fill = risk_type)) +\n  geom_boxplot(alpha = 0.4, position = position_dodge(width = 0.8)) +\n  #geom_jitter(alpha = 0.6, position = position_dodge(width = 0.8)) +  # Remove width and use position_dodge\n   labs(title = \"Predicted High and Low Risk Distribution by Env Category\",\n        subtitle = \"Model: Lasso Regression fitted on training data (stop and feat)\",\n       x = \"ACTUAL\",\n       y = \"PREDICTED\",\n       fill = \"Risk Type\") +  # Set label for fill legend\n  theme_minimal() +\n  guides(color = \"none\")  # Suppress the color legend\n\n\n\n\n\n\n\nSeems improved also LOW risk prediction (at least o average although more dispersion)\n\n# Fit the model on the testing set\nenv_FEAT_fit &lt;- env_FEAT_wf2 %&gt;% # NEW\n   fit(data = testing(env_split))\n\n# Example of a data frame containing actual and predicted values\npred_FEAT_long  &lt;- predict(env_FEAT_fit, new_data = testing(env_split), type = \"prob\")|&gt;\n   bind_cols(testing(env_split)) %&gt;% \n   select(env_cat_f2,  pred_high_risk = '.pred_High-Med-risk', pred_low_risk = '.pred_Low-risk_Othr')   %&gt;%\n   pivot_longer(cols = c(pred_high_risk, pred_low_risk),\n                names_to = \"risk_type\", values_to = \"risk_value\")\n\n# Plot the predictions with boxplots and jittered points without duplicate legends\nggplot(pred_FEAT_long, aes(x = env_cat_f2, y = risk_value, fill = risk_type)) +\n  geom_boxplot(alpha = 0.4, position = position_dodge(width = 0.8)) +\n  #geom_jitter(alpha = 0.6, position = position_dodge(width = 0.8)) +  # Remove width and use position_dodge\n   labs(title = \"Predicted High and Low Risk Distribution by Env Category\",\n        subtitle = \"Model: Lasso Regression fitted on testing data (stop and feat)\",\n       x = \"ACTUAL\",\n       y = \"PREDICTED\",\n       fill = \"Risk Type\") +  # Set label for fill legend\n  theme_minimal() +\n  guides(color = \"none\")  # Suppress the color legend\n\n\n\n\n\n\n\n— Assess the model w cross-valid [env_FEAT_cv] (NEW)\n\n# (this is similar to env_tune) \nset.seed(123)\n# Cross validate the (optimized) workflow\nenv_FEAT_cv &lt;- env_FEAT_wf2 %&gt;%\n   tune::fit_resamples(\n      # 10 fold cross validation splits\n      resamples = env_vfold,\n      # save predictions for confusion matrix\n      control = control_resamples(save_pred = TRUE)\n   )\n\nWe want to aggregate the metrics across the folds to get a sense of the variability of the model. The collect_metrics() function takes the results of a cross-validation and returns a data frame with the metrics.\n\nenv_FEAT_cv[[3]][[1]] # 1st split \nenv_FEAT_cv[[3]][[3]] # 3rd split\n\n# Collect the results of the cross-validation (this is the average from the 10 splits!)\ncollect_metrics(env_FEAT_cv)\n# 1 accuracy    binary     0.777    10 0.0118  Preprocessor1_Model1\n# 2 brier_class binary     0.155    10 0.00503 Preprocessor1_Model1\n# 3 roc_auc     binary     0.820    10 0.0101  Preprocessor1_Model1\n\n# OLD \ncollect_metrics(env_stop_lasso_cv)\n#1 accuracy    binary     0.754    10 0.00997 Preprocessor1_Model1\n#2 brier_class binary     0.170    10 0.00371 Preprocessor1_Model1\n#3 roc_auc     binary     0.785    10 0.00813 Preprocessor1_Model1\n\nImproved a bit roc_auc & accuracy and brier_class lower compared to the previous model!\n— [FIG] Visualize the confusion matrix\nThis is done on the cross-valid results env_FEAT_cv (?!) OKKIO: the number of obs were less because of the dropped missing factors\n\nset.seed(123)\n# Plot the confusion matrix\nenv_FEAT_cv %&gt;%\n   tune::conf_mat_resampled(tidy = FALSE) %&gt;%\n   autoplot(type = \"heatmap\")\n\n\n\n\n\n\n# env_stop_lasso_cv    --&gt;   env_FEAT_cv\n# 137.2 = true positives  --&gt;  135 \n# 33.6 = true negatives  --&gt;    33.7\n\n# 40.5 = false positives  --&gt;   33.8 \n# 15.1 = false negatives  --&gt;   16.7 \n\nCompared to previous model, there is just a little improvement in false positive (low risk predicted to be high risk) as they are less than before. This model did improve (especially in the low risk category): in fact the probability of being classified as HIGH RISK is less than 50% and of being classified LOW RISK above 50%.\n8) Evaluate the best model on the validation/test set\n\nTo do this we need to fit the tuned workflow to the training set, which is the actual training phase. We will use the last_fit() function from {workflows}\nLe’s use the updated workflow env_FEAT_wf2\nRECALL I DID\n\nfor training (labelled env_cat_f) env_cat_train &lt;- training(env_split) # 2265 proj\nfor validation (labelled env_cat_f) env_cat_test &lt;- testing(env_split) # 971 proj\n— Fit the best model(training) and evaluate on the test set\nAfter determining the best model, the final fit on the entire training set is needed and is then evaluated on the test set.\n\n# fit the model to the training set and evaluate on the validation set\nenv_FEAT_final_fit &lt;- last_fit(\n   env_FEAT_wf2, \n   split = env_split)\n\n# Evaluate the model on the validation set (in my case)\ncollect_metrics(env_FEAT_final_fit)\n\n# 1 accuracy     0.793 Preprocessor1_Model1 --&gt; 0.79 \n# 2 roc_auc      0.851 Preprocessor1_Model1 --&gt; 0.85\n# 3 brier_class  0.143 Preprocessor1_Model1 --&gt; 0.144\n\nThe performance metrics are very close to those we achieved on the training set (actually better!!) –&gt; good sign that the model is robust as it performs well on both training and test (validation) sets.\n— [FIG] Visualize the confusion matrix\n\n# Plot the confusion matrix\nenv_FEAT_final_fit %&gt;%\n   collect_predictions() %&gt;%\n   conf_mat(truth = env_cat_f2, estimate = .pred_class) %&gt;%\n   autoplot(type = \"heatmap\")\n\n\n\n\n\n\n\n\nlibrary(tidymodels)\nlibrary(ggplot2)\n\nlibrary(tidymodels)\nlibrary(ggplot2)\n\n# Create a table for the confusion matrix counts\nML_final_fit_cm_p &lt;- env_FEAT_final_fit %&gt;%\n  collect_predictions() %&gt;%\n  conf_mat(truth = env_cat_f2, estimate = .pred_class) %&gt;%\n  autoplot(type = \"heatmap\") +\n  labs(\n    title = \"Confusion Matrix for Lasso Logistic Regression Model\",\n    x = \"Predicted Class\",\n    y = \"True Class\",\n    fill = \"Count\"\n  ) +\n  scale_fill_gradient(low = \"#f2e8ea\", high = \"#964957\") +  # Adjust color gradient for better contrast\n  theme_minimal(base_size = 14) +                              # Set a clean theme with larger base text size\n  theme(\n    plot.title = element_text(hjust = 0.5, face = \"bold\"),     # Center and bold the title\n    #axis.text.x = element_text(angle = 45, hjust = 1),         # Angle x-axis text for readability\n    legend.position = \"right\"                                  # Place the legend on the right\n  )\n\nML_final_fit_cm_p\nf_save_plot_obj &lt;- function(plot_object, plot_obj_name) {\n   # Save the plot object\n   saveRDS(plot_object, here(\"analysis\", \"output\", \"figures\", paste0(plot_obj_name, \".rds\")))\n}\n\nf_save_plot_obj(ML_final_fit_cm_p, \"ML_final_fit_cm_p\")\n\n\n\nFigure 1: Confusion matrix for the final model on the validation set\n\n\n\n\n\n\n\nStill (on the validation set) imbalanced false positives (138) and false negatives (63).\n— [FIG] Visualize the ROC AUC curve\nTake the output of last_fit() and use it (env_FEAT_final_fit) to plot the ROC curve.\n\ncolnames(env_FEAT_final_fit)\n# Extract predictions from the final fit object\n# Extract the tibble from the list\nenv_FEAT_final_fit_pred &lt;-  env_FEAT_final_fit$.predictions[[1]]\nstr(env_FEAT_final_fit_pred)\n\n# Visualize the ROC curve \nenv_FEAT_final_fit_pred %&gt;% \n   roc_curve(truth = env_cat_f2, '.pred_High-Med-risk') %&gt;% \n   autoplot() +\n   labs(\n      title = \"ROC Curve for High-Med Risk Prediction\",\n      x = \"1 - Specificity (False Positive Rate)\",\n      y = \"Sensitivity (True Positive Rate)\",\n      caption = \"logistic regression model on text (stopwords) + features\"\n   )\n\n\n9) Interpret the model\n— Inspecting what levels of the outcome are most difficult to estimate\n\n# collect the predictions from the final model\nenv_FEAT_final_fit_feat &lt;- env_FEAT_final_fit %&gt;%\n   collect_predictions() %&gt;%\n   bind_cols(env_cat_test)  %&gt;%\n   rename(env_cat_f2 = 'env_cat_f2...6') %&gt;% \n   select ( -'env_cat_f2...22')\n\n#preview the predictions\nglimpse(env_FEAT_final_fit_feat)\n\nI will then select the columns with the actual outcome (env_cat_f2), the predicted outcome, the env_cat_f level, and the pdo text and separate the predicted outcome to inspect them separately\n\nenv_FEAT_final_fit_feat %&gt;%\n   filter(env_cat_f2 != .pred_class ) %&gt;%  \n   select(env_cat_f2, .pred_class,  env_cat_f, pdo, proj_id) \n\nInspect to see in which actual category (env_cat_f) are proj when they are actually env_cat_f2 == 'High-Med-risk' but falsely predicted to be .pred_class == 'Low-risk_Othr': not surprisingly most of them are med risk level. (this makes sense)\n\nenv_FEAT_final_fit_feat %&gt;%\n   filter(env_cat_f2 == 'High-Med-risk' & .pred_class == 'Low-risk_Othr') %&gt;%  \n   select(env_cat_f2, .pred_class,  env_cat_f, pdo, proj_id) %&gt;% \n   count(env_cat_f )\n\nlevels(env_FEAT_final_fit_feat$env_cat_f2)\n#[1] \"High-Med-risk\" \"Low-risk_Othr\"\n\n— Inspecting the most important features for predicting the outcome\n\nusing the extract_fit_parsnip() function from the workflows package to extract the model object from the workflow.\nestimates are the log odds of the outcome for each feature (i.e. the probability of the outcome (High risk) divided by the probability of the opposite outcome (low risk)).\n\n\nPositive coefficient: A positive coefficient indicate an increased likelihood of being in the “Low-risk_Othr” category compared to the “High-Med-risk” category.\n\nNegative coefficient: A negative coefficient indicate an increased likelihood of being in the “High-Med-risk” category compared to the “Low-risk_Othr” category.\n\n\n\nodds ratio (exponentiated coeff) means that the feature is associated with a lower probability of the outcome, while positive odds means that the feature is associated with a higher probability of the outcome.\n\n\nOdds ratio &gt; 1: Indicates that the predictor increases the likelihood of the outcome (e.g., “Low-risk_Othr”).\n\nOdds ratio &lt; 1: Indicates that the predictor decreases the likelihood of the outcome “High-Med-risk”.\n\n\n\n\n# Extract the estimate (log-odds)\nenv_FEAT_final_fit_features &lt;- extract_fit_parsnip(env_FEAT_final_fit) %&gt;% \n   tidy() %&gt;% \n   # Calculate the exponentiated estimate\n   mutate(odds = exp(estimate),\n          probability = odds / (1 + odds))  \n\n#  tibble: 206 × 5\n# term                   estimate penalty  odds probability\n# &lt;chr&gt;                     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;       &lt;dbl&gt;\n# (Intercept)            -1.26    0.00599 0.284      0.221 \n# tfidf_pdo_access       -0.00452 0.00599 0.995      0.499 \n# tfidf_pdo_activities    0.786   0.00599 2.19       0.687 \n\n\n\ntfidf_pdo_activities est 0.786 | odds 2.19 | prob 0.687 (associated with a LOW risk)\n\ntfidf_pdo_access est -0.004 | odds 0.995 | prob 0.499 (associated with a HIGH risk)\n— Extract the most important features\nA quick way to extract the most important features for predicting each outcome is to use the vi() function from {vip}.\n\nThe vi() function calculates the permutation importance of each feature in the model.\n\n\nlibrary(vip)\n\n# Extract the most important features\nenv_FEAT_var_importance &lt;-  extract_fit_parsnip(env_FEAT_final_fit) %&gt;% \n   vip::vi() %&gt;%\n   # it is kinda counterintuitive  \n   mutate(note = case_when(\n       Sign  ==  \"POS\" ~ \"More likely to be in Low-risk_Othr\",\n       Sign  ==  \"NEG\" ~ \"More likely to be in High-Med-risk\",    \n      TRUE ~ \"NEU\"\n   )) \n\n— [FIG] Plot the most important features\n\n# Recode variable and sign \nvar_importance_tbl &lt;- env_FEAT_var_importance %&gt;% \n   mutate(Feature =  str_remove(Variable, \"tfidf_\"),\n          EnvRiskOutcome = case_when(\n             Sign == \"NEG\" ~ \"High-Med-risk\",\n             Sign == \"POS\" ~ \"Low-risk_Othr\") ) %&gt;% \n   select(Feature, Importance,  EnvRiskOutcome)  \n\nsummary(var_importance_tbl$EnvRiskOutcome)\n\n\n# Plot the most important features\nML_feature_importance_p &lt;- var_importance_tbl %&gt;%\n   slice_max(Importance, n = 50) %&gt;%\n   ggplot(aes(x = reorder(Feature, Importance), y = Importance, color = EnvRiskOutcome)) +\n   geom_point() +\n   coord_flip() +\n   facet_wrap(~EnvRiskOutcome, ncol = 2, scales = \"free_y\") +\n   labs(\n      title = glue(\"Most influential features for predicting Environmental Risk\"),\n      subtitle = \"LASSO Logistic Regression model on text + metadata tags \\n(Importance = absolute value of the logistic regression coefficients)\",\n      #caption = \"(Importance of each feature calculated as the absolute value of the logistic regression coefficients)\",\n      x = \"\",\n      y = \"\",\n      fill = \"\"\n   ) +\n   lulas_theme + \n   theme(\n     plot.title = element_text(hjust = 0.5, face = \"bold\")\n   ) +\n   guides(color = \"none\")\n\nML_feature_importance_p\n\n\n\n\n\n\n\nThe feature importance plot highlights the top 50 predictors of environmental risk (binary) category, ranked by their influence in a LASSO logistic regression model. For better readability the predictors are split according to the level of risk predicted. It should be no surprise that words in the PDO text (those variables starting with pdo_*) are the most important predictors given the data. Still some of the other predictors are also important, such as sector_f_TRANSPORT (left panel) or regionname and sector_f_FINANCIAL (right panel).\nEach facet groups features by environmental risk outcome, allowing a comparison of which factors contribute most to each category. Features with higher importance values, like [mention a few key features], play a significant role in predicting environmental risk, offering insights for targeted risk assessment and decision-making.\n\n# show plot\nML_feature_importance_p\n# save as rds\nf_save_plot_obj(ML_feature_importance_p, \"ML_feature_importance_p\")"
  },
  {
    "objectID": "analysis/01c_WB_project_pdo_feat_class.html#naive-bayes-classific-with-text-and-sector_f-and-regionname-and-boardapprovalfy-as-predictors",
    "href": "analysis/01c_WB_project_pdo_feat_class.html#naive-bayes-classific-with-text-and-sector_f-and-regionname-and-boardapprovalfy-as-predictors",
    "title": "WB Project PDO features classification",
    "section": "[🫤] Naive bayes classific with text and sector_f and regionname and boardapprovalFY as predictors",
    "text": "[🫤] Naive bayes classific with text and sector_f and regionname and boardapprovalFY as predictors\n3) Define preprocessing steps (same)\n4) Select algorithm + workflow (same)\n— Model specification [env_spec]\n\nLet’s use a naive Bayes model, which is available in the tidymodels package discrim. One of the main advantages is its ability to handle a large number of features, such as those we deal with when using word count methods. Here we have only kept the 1000 most frequent tokens, but we could have kept more tokens and a naive Bayes model would still be able to handle such predictors well. For now, we will limit the model to a moderate number of tokens.\n\n# needed for naive Bayes\nlibrary(discrim)\n\n# Create a model specification\nenv_NB_spec &lt;-\n   # generalized linear model for binary outcomes\n   parsnip::naive_Bayes() %&gt;%\n   # Specify the mode of the model\n   set_mode(\"classification\") %&gt;%\n   # Specify the engine\n   set_engine(\"naivebayes\")\n \n# Preview\nenv_NB_spec\n\n— Create workflow [env_NB_wf] (NEW!)\nenv_NB_spec is actually the part that changed in this workflow adding step_stopwords().\n\n# Create a workflow\nenv_NB_wf &lt;- workflows::workflow() %&gt;%\n   add_recipe(env_FEAT_recipe) %&gt;%  # same RECIPE\n   add_model(env_NB_spec) # NEW MODEL\n# Preview\nenv_NB_wf\n\n— Fit the classificatoin model to the training set [env_NB_fit] (NEW!)\n\n# Fit the model to the training set\nenv_NB_fit &lt;- env_NB_wf %&gt;%\n   #add_model(env_NB_spec) %&gt;%\n   fit(data = env_cat_train)\n\n5) Tuning hyperparameters (same)\nLet’s use resampling to estimate the performance of the naive Bayes classification model we just fit. We can do this using resampled data sets built from the training set. Let’s create 10-fold cross-validation sets, and use these resampled sets for performance estimates.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe env_FEAT_tune object contains the results of the tuning for each fold. We can see the results of the tuning for each fold by calling the collect_metrics() function on the env_FEAT_tune object\n\nset.seed(123)\nenv_vfold &lt;- rsample::vfold_cv(env_cat_train, v = 10) \n\n# Fit the model to the resampled folds\nenv_NB_rs &lt;- fit_resamples(\n   env_NB_wf,\n   resamples = env_vfold,\n   control = control_resamples(save_pred = TRUE)\n)\n\nWe can extract the relevant information using collect_metrics() and collect_predictions().\n\nenv_NB_rs_metrics &lt;- collect_metrics(env_NB_rs)\n#1 accuracy    binary     0.684    10 0.00843 Preprocessor1_Model1\n#2 brier_class binary     0.314    10 0.00884 Preprocessor1_Model1\n#3 roc_auc     binary     0.762    10 0.00715 Preprocessor1_Model1\n\nenv_NB_rs_predictions &lt;- collect_predictions(env_NB_rs)\n\nWorse than logistic!\n\n\nAccuracy is the proportion of the data that is predicted correctly. Be aware that accuracy can be misleading in some situations, such as for imbalanced data sets.\n\nROC AUC measures how well a classifier performs at different thresholds. The ROC curve plots the true positive rate against the false positive rate; AUC closer to 1 indicates a better-performing model, while AUC closer to 0.5 indicates a model that does no better than random guessing.\n\nBrier score is a measure of the mean squared difference between the predicted probabilities and the actual outcomes.\n— Visualize the ROC AUC curve\n\n# Visualize the ROC curve \nenv_NB_rs_predictions %&gt;% \n   group_by(id) %&gt;% \n   # roc_curve(truth = env_cat_f2, .pred_class) %&gt;% \n   # Not work with factor, use \"positive\" class \n   roc_curve(truth = env_cat_f2, '.pred_High-Med-risk') %&gt;% \n   autoplot() \n\nThe area under each of these curves is the roc_auc metric we have computed. (If the curve was close to the diagonal line, then the model’s predictions would be no better than random guessing.)\n— [FIG] Visualize the confusion matrix\n\n# Plot the confusion matrix\nconf_mat_resampled(env_NB_rs, tidy = FALSE) %&gt;% \n   autoplot(type = \"heatmap\")\n\n\n\n\n\n\n\n\ndifferent from logistic\nVery well with true positive (high risk), but very bad with true negative (low risk).\n8) Evaluate the best model on the validation/test set\n\n— Fit the best model(training) and evaluate on the test set\nAfter determining the best model, the final fit on the entire training set is needed and is then evaluated on the test set.\n\n# fit the model to the training set and evaluate on the validation set\nenv_NB_rs_final_fit &lt;- last_fit(\n   env_NB_wf, \n   split = env_split)\n\n# Evaluate the model on the validation set (in my case)\ncollect_metrics(env_NB_rs_final_fit)\n# 1 accuracy    binary         0.691 Preprocessor1_Model1\n# 2 roc_auc     binary         0.784 Preprocessor1_Model1\n# 3 brier_class binary         0.307 Preprocessor1_Model1"
  },
  {
    "objectID": "analysis/01c_WB_project_pdo_feat_class.html#multiclass-outcome",
    "href": "analysis/01c_WB_project_pdo_feat_class.html#multiclass-outcome",
    "title": "WB Project PDO features classification",
    "section": "[🙃] Multiclass outcome",
    "text": "[🙃] Multiclass outcome\n\n\n2) Split sample (based on sector_f)\nThis time I need to create a new split of the data using initial_split() based on levels of sector_f (here I collapsed the original 99 levels into 7 macro levels.\nWe will use the strata argument to stratify the data by the outcome variable (sector_f). This will ensure that the training and validation sets have the same proportion.\n\n# Create a stratified split based on missing vs non-missing env_cat\nprojs_train %&gt;% tabyl(sector_f) # 7 levels\n\n# Split BUT only \"Not Missing\" `env_cat_f` \n## --- 0) THIS WILL BE 4 TRAINING & VALIDATION \nsec_use &lt;- projs_train %&gt;% \n   filter(sector_f != \"Missing\") # 4316 proj \n\n# SPLIT INTO TRAINING, VALIDATION \nset.seed(123)  # Ensure reproducibility\nsec_split &lt;- initial_split(sec_use, prop = 0.7, # 70% training, 30% testing\n                       strata = sector_f) # stratify by OUTCOME \n\n## -- 1) for training (labelled `sector_f`)\nsec_train &lt;- training(sec_split)   # 3019 proj\n    \n## -- 2) for validation (labelled `sector_f`)\nsec_test &lt;- testing(sec_split)  # 1297 proj\n   \n# # UNLABELLED PORTION \n## -- 3) for actual test (UNlabelled `sector_f`)\nsec_missing &lt;- projs_train %&gt;% \n  filter(sector_f == \"Missing\") # 87 proj \n\n# check ditribution of `sector_f` in training and validation\ntabyl(sec_train, sector_f) |&gt; adorn_totals(\"row\") |&gt; adorn_pct_formatting(digits = 1)# \ntabyl(sec_test, sector_f)|&gt; adorn_totals(\"row\") |&gt; adorn_pct_formatting(digits = 1)# \n\nThere is no terrible imbalance between the levels of sector_f in the training and validation sets. However, Compared to binary classification, there are several additional issues to keep in mind when working with multiclass classification:\n\nMany machine learning algorithms do not handle imbalanced data well and are likely to have a hard time predicting minority classes.\nNot all machine learning algorithms are built for multiclass classification at all.\nMany evaluation metrics need to be reformulated to describe multiclass predictions.\n3) Preprocessing steps [multi_rec] (same)\nwe have added step_downsample(sector_f) to the end of the recipe specification to downsample after all the text preprocessing. + We want to downsample last so that we still generate features on the full training data set. + The downsampling will then only affect the modeling step, not the preprocessing steps, with hopefully better results.\n\nmulti_rec &lt;- recipe(\n   #sector_f ~ pdo, data = sec_train) %&gt;%\n   sector_f ~ pdo + regionname + boardapprovalFY + env_cat_f, data = sec_train) %&gt;%\n   step_tokenize(pdo) %&gt;%  \n   step_stopwords(pdo, custom_stopword_source = stop_vector) %&gt;%  \n   step_tokenfilter(pdo, max_tokens = 100) %&gt;%  \n   step_tfidf(pdo, smooth_idf = FALSE) %&gt;%\n   # add NA as special factor level\n   step_unknown(regionname ,new_level = \"Unknown reg\" ) %&gt;%\n   step_unknown(boardapprovalFY ,new_level = \"Unknown FY\" ) %&gt;%\n   step_unknown(env_cat_f ,new_level = \"Unknown env cat\" ) %&gt;%\n   # convert to dummy variables\n   step_dummy(regionname, boardapprovalFY,env_cat_f, one_hot = TRUE) %&gt;% \n   # resolve imnbalance\n   step_downsample(sector_f) \n\n— COULD do step_word_embeddings to see a diffrernent\ncheck what changed…\n\n# prep and juice the recipe\nmulti_juice &lt;- multi_rec %&gt;% \n   prep() %&gt;% \n   #bake(new_data = NULL)\n   juice()\n\n# preview the baked recipe\ndim(multi_juice)\n#[1] 559 142\nslice_head(multi_juice, n = 3)\n\n4.a) Specify models (NEW!)\n— i) Multin. Lasso Logistic Regress [logistic_model]\nSome model algorithms and computational engines (examples are most random forests and SVMs) automatically detect when we perform multiclass classification from the number of classes in the outcome variable and do not require any changes to our model specification. For lasso regularization, we need to create a new special model specification just for the multiclass class using multinom_reg().\n\n# MULTINOMIAL LASSO REGRESSION MODEL \n# For lasso regularization, we need to create a new special model specification just for the multiclass class\nlogistic_model &lt;- multinom_reg(penalty = tune(), mixture = 1) %&gt;%\n  set_mode(\"classification\") %&gt;%\n  set_engine(\"glmnet\")\n\nlogistic_model\n\n— ii) KNN [knn_model]\n\nknn_model &lt;- nearest_neighbor(neighbors = tune()) %&gt;%\n  set_engine(\"kknn\") %&gt;%\n  set_mode(\"classification\")\n\n4.b) Specify workflows (NEW!)\n— i) Multin. Lasso Logistic Regress [logistic_wf]\nTo keep our text data sparse throughout modeling and use the sparse capabilities of set_engine(“glmnet”), we need to explicitly set a non-default preprocessing blueprint, using the package hardhat. This “blueprint” lets us specify during modeling how we want our data passed around from the preprocessing into the model. The composition “dgCMatrix” is the most common sparse matrix type, from the Matrix package, used in R for modeling. We can use this blueprint argument when we add our recipe to our modeling workflow, to define how the data should be passed into the model.\n\nlibrary(hardhat)\nsparse_bp &lt;- default_recipe_blueprint(composition = \"dgCMatrix\")\n\n# workflow\nlogistic_wf &lt;- workflow() %&gt;%\n  add_recipe(multi_rec, blueprint = sparse_bp) %&gt;%\n  add_model(logistic_model)\n\nlogistic_wf\n\n— ii) KNN [knn_wf]\n\nlibrary(hardhat)\n#sparse_bp &lt;- default_recipe_blueprint(composition = \"dgCMatrix\")\n\n# workflow\nknn_wf &lt;- workflow() %&gt;%\n  add_recipe(multi_rec, blueprint = sparse_bp) %&gt;%\n  add_model(knn_model)\n\nknn_wf\n\n5) Hyperparameters tuning\nWe used the same arguments for penalty and mixture as before, as well as the same mode and engine, but this model specification is set up to handle more than just two classes.\n— folds for cross-validation\nWe also need a new cross-validation object since we are using a different data set.\n\nset.seed(123)\n# random splits (\"folds\") of the data for cross-validation\nmulti_folds &lt;- vfold_cv(sec_train)\n\n— Define Grids\nThe last time we tuned a lasso model, we used the defaults for the penalty parameter and 30 levels. Let’s restrict the values this time using the range argument, so we don’t test out as small values for regularization, and only try 20 levels.\n\n\ngrid_regular() chooses sensible values to try for the penalty parameter, based on the range we provide - we ask for 20 different possible values.\n— i) Multin. Lasso Logistic Regress [logistic_grid]\n\n\n\n\n\nlogistic_grid &lt;- grid_regular(hardhat::extract_parameter_set_dials(logistic_model), levels = 10)\n\n— ii) KNN [knn_grid]\n\nknn_grid &lt;- grid_regular(hardhat::extract_parameter_set_dials(knn_model), levels = 10, \n                         filter = c( neighbors &gt;1))\n\n— Define tuning process\nMulticlass support for the parameters\n\nmodel_control &lt;- control_grid(save_pred = TRUE)\nmodel_metrics &lt;- metric_set( accuracy, sens, spec,  mn_log_loss, roc_auc)\n\nNow we have everything we need to tune the regularization penalty and find an appropriate value.\n\n\ntune_grid() can fit a model at each of the values for the regularization penalty in our regular grid.\nNote that we specify save_pred = TRUEso we can create ROC curves and a confusion matrix later.\n— i) Multin. Lasso Logistic Regress [logistic_model]\n\n# Tune model \nmulti_lasso_rs &lt;- tune_grid(\n   # A) unfitted workflow\n   # logistic_wf,\n   # B) model specification\n   logistic_model,\n   # B) recipe\n   multi_rec,\n   grid = logistic_grid,\n   metrics = model_metrics, # pre defined metrics\n   control = model_control, # pre defined control\n   # folds for cross-validation\n   resamples = multi_folds)\n\nmulti_lasso_rs\n\n— ii) KNN [knn_grid]\n\n# Tune model \nmulti_knn_rs &lt;- tune_grid(\n   # A) unfitted workflow\n   # logistic_wf,\n   # B) model specification\n    knn_model,\n   # B) recipe\n   multi_rec,\n   grid = knn_grid,\n   metrics = model_metrics, # pre defined metrics\n   control = model_control, # pre defined control\n   # folds for cross-validation\n   resamples = multi_folds)\n\nmulti_knn_rs\n\n6) Evaluate the model performance & upd WF\n— Accuracy metric\nWhat do we see, in terms of performance metrics?\n\nmulti_lasso_rs %&gt;%  collect_metrics()  \nmulti_knn_rs %&gt;%  collect_metrics()  \n\nmulti_lasso_rs %&gt;%  show_best(metric = \"roc_auc\")   # better \nmulti_knn_rs %&gt;%  show_best(metric =\"roc_auc\")  \n\nmulti_lasso_rs %&gt;%  show_best(metric = \"accuracy\")   # better \nmulti_knn_rs %&gt;%  show_best(metric =\"accuracy\")  \n\nEven the very best “accuracy” value here is quite low (0.44), significantly lower than the binary classification model. This is expected because multiclass classification is more difficult than binary classification.\n— [FIG] performance metrics\n— i) Multin. Lasso Logistic Regress [logistic_model]\n\nautoplot(multi_lasso_rs) +\n  labs(\n    color = \"Number of tokens\",\n    title = \"Multiclass Lasso Logistic Regression performance across regularization penalties and tokens\"\n  )\n\n— ii) KNN [knn_grid]\n\nautoplot(multi_knn_rs) +\n  labs(\n    color = \"Number of tokens\",\n    title = \"Knn performance across regularization penalties and tokens\"\n  )\n\n— choose final hyperparameters\n— i) Multin. Lasso Logistic Regress [log_final_param]\n— TIDY conf matrix\n\nlog_final_param &lt;- multi_lasso_rs %&gt;% \n   show_best(metric = \"accuracy\") %&gt;% \n   slice(1) %&gt;% \n   select(-.config) \n\n\nmulti_lasso_rs %&gt;% \n   collect_predictions() %&gt;%\n   inner_join(log_final_param) %&gt;%\n   conf_mat(truth = sector_f, estimate = .pred_class)  \n\n— [FIG] conf matrix (1st fold)\nTo get a more detailed view of how our classifier is performing, let us look at one of the confusion matrices in\n\n\n\n\n\n\nfinal_penalty &lt;- multi_lasso_rs %&gt;% \n   show_best(metric = \"accuracy\") %&gt;% \n   slice(1) %&gt;% \n   pull(penalty)\n\n\nmulti_lasso_rs %&gt;% \n   collect_predictions() %&gt;%\n   filter(penalty == final_penalty) %&gt;%\n   filter(id == \"Fold01\") %&gt;%\n   conf_mat(truth = sector_f, estimate = .pred_class) %&gt;%\n   autoplot(type = \"heatmap\") +\n   scale_y_discrete(labels = function(x) str_wrap(x, 20)) +\n   scale_x_discrete(labels = function(x) str_wrap(x, 20))\n\n\nThe diagonal is fairly well populated, which is a good sign. This means that the model generally predicted the right class.\nThe off-diagonal numbers are all the failures and where we should direct our focus. It is a little hard to see these cases well since the majority class affects the scale. A trick to deal with this problem is to remove all the correctly predicted observations.\n— [FIG] conf matrix (1st fold) only wrong pred\n\nmulti_lasso_rs %&gt;% \n   collect_predictions() %&gt;%\n   # final param \n   filter(penalty == final_penalty) %&gt;%\n   filter(id == \"Fold01\") %&gt;%\n   # exclude correct \n   filter(.pred_class != sector_f) %&gt;%\n   conf_mat(truth = sector_f, estimate = .pred_class) %&gt;%\n   autoplot(type = \"heatmap\", values = \"prop\") +\n   scale_y_discrete(labels = function(x) str_wrap(x, 20)) +\n   scale_x_discrete(labels = function(x) str_wrap(x, 20))\n\nHere it is more clear where the model breaks down: “Institutional Supp.” which makes sense because it was often an agency created FOR a sector!\n— ii) KNN [knn_final_param]\n— TIDY conf matrix\n\nknn_final_param &lt;- multi_knn_rs %&gt;% \n   show_best(metric = \"accuracy\") %&gt;% \n   slice(1)  \n \nmulti_knn_rs %&gt;% \n   collect_predictions() %&gt;%\n   inner_join(knn_final_param) %&gt;%\n   conf_mat(truth = sector_f, estimate = .pred_class)  \n\n— [FIG] conf matrix (1st fold)\nTo get a more detailed view of how our classifier is performing, let us look at one of the confusion matrices in\n\nneighbors_final &lt;- multi_knn_rs %&gt;% \n   show_best(metric = \"accuracy\") %&gt;% \n   slice(1) %&gt;% \n   pull(neighbors)\n\nmulti_knn_rs %&gt;% \n   collect_predictions() %&gt;%\n   # final param \n   filter(neighbors == neighbors_final) %&gt;%\n   filter(id == \"Fold01\") %&gt;%\n   conf_mat(truth = sector_f, estimate = .pred_class) %&gt;%\n   autoplot(type = \"heatmap\") +\n   scale_y_discrete(labels = function(x) str_wrap(x, 20)) +\n   scale_x_discrete(labels = function(x) str_wrap(x, 20))\n\nTo get a more detailed view of how our classifier is performing, let us look at one of the confusion matrices in\n\nmulti_knn_rs %&gt;% \n   collect_predictions() %&gt;%\n   # final param \n   filter(neighbors == neighbors_final) %&gt;%\n   filter(id == \"Fold01\") %&gt;%\n   # exclude correct \n   filter(.pred_class != sector_f) %&gt;%\n    conf_mat(truth = sector_f, estimate = .pred_class) %&gt;%\n   autoplot(type = \"heatmap\") +\n   scale_y_discrete(labels = function(x) str_wrap(x, 20)) +\n   scale_x_discrete(labels = function(x) str_wrap(x, 20))\n\n6.b) Finalize the workflow\nThis I do only for the best model\n— Finalize workflow\nAfter we have those parameters (final_penalty), penalty {and max_tokens}, we can finalize our earlier tunable workflow, by updating it with this value.\n\nlogistic_wf_final &lt;- logistic_wf %&gt;%\n   # here it wants a tibble \n   finalize_workflow(parameters =  log_final_param )\n\n7) Assess the model performance on training set\n— See the results [multi_fit]\nHere we access the model coefficients to see which features are most important in the model + We see here, for the penalty we chose, what terms contribute the most to a en cat NOT being high risk .\n\n# Fit the model to the training data\nmulti_fit &lt;- fit (logistic_wf_final, data = sec_train)\n\n— Coefficients [multi_fitted_coeff]\n\nmulti_fitted_coeff &lt;- multi_fit %&gt;% \n   extract_fit_parsnip() %&gt;% \n   tidy( penalty = final_penalty) %&gt;% \n   arrange(-estimate)\n\nmulti_fitted_coeff\n\nIn this model, it seems that words contained in PDO are the most influential in predicting the sector of a project.\n\n“tfidf_pdo_education” appear among the top coefficients!!!\n“tfidf_pdo_health” appear among the top coefficients!!!\n8) Evaluate the best model on the test set [last_fit()]\nWe can now fit this finalized workflow on training data and finally return to our testing data.\n\n\nlast_fit() emulates the process where, after determining the best model, the final fit on the entire training set is needed and is then evaluated on the test set\n— metrics\n\nmulti_final_fitted &lt;- last_fit(logistic_wf_final, sec_split)\n\ncollect_metrics(multi_final_fitted)\n#1 accuracy    multiclass     0.448 Preprocessor1_Model1\n#2 roc_auc     hand_till      0.800Preprocessor1_Model1\n#3 brier_class multiclass     0.367 Preprocessor1_Model1\n\n— predictions\n\nmulti_final_fitted %&gt;%\n   collect_predictions() %&gt;%\n   conf_mat(truth = sector_f, estimate = .pred_class)\n\n— [FIG] confusion matrix\n\nmulti_final_fitted %&gt;%\n   collect_predictions() %&gt;%\n   conf_mat(truth = sector_f, estimate = .pred_class) %&gt;%\n   autoplot(type = \"heatmap\") +\n   scale_y_discrete(labels = function(x) str_wrap(x, 20)) +\n   scale_x_discrete(labels = function(x) str_wrap(x, 20)) +\n   theme(axis.text.x = element_text(angle = 30, hjust = 1))\n\n— [FIG] ROC curve\n\npred_tibble &lt;- multi_final_fitted %&gt;%\n   collect_predictions()\n\n# Assuming you have your results (with columns for true classes and predicted probabilities)\nresults &lt;- pred_tibble # e.g., tibble with true and predicted columns\npaint(results)\n\n# Compute ROC curve (micro-average)\nroc_curve(results, truth = sector_f, \n          '.pred_AGR FOR FISH',\n          '.pred_EDUCATION'           ,\n          '.pred_ENERGY'              ,\n          '.pred_FINANCIAL'           ,\n          '.pred_HEALTH'              ,\n          '.pred_ICT'                 ,\n          '.pred_IND TRADE SERV'      ,\n          '.pred_INSTIT. SUPP.' ,\n          '.pred_MINING OIL&GAS'      ,\n          '.pred_SOCIAL PROT.'   ,\n          '.pred_TRANSPORT'           ,\n          '.pred_URBAN'               ,\n          '.pred_WAT & SAN'           \n) %&gt;%\n   autoplot()\n\nIt makes sense that the sectors’ levels in which I have collapsed more things and/or have a more “blurred” definitions are the ones that are harder to predict:\n\n“URBAN”\n“IND TRADE SERV”\n“INSTIT. SUPP.”\n“ICT” (?)"
  },
  {
    "objectID": "analysis/01c_WB_project_pdo_feat_class.html#document-term-matrix",
    "href": "analysis/01c_WB_project_pdo_feat_class.html#document-term-matrix",
    "title": "WB Project PDO features classification",
    "section": "Document-Term Matrix",
    "text": "Document-Term Matrix\n…"
  },
  {
    "objectID": "analysis/01c_WB_project_pdo_feat_class.html#include-independent-variables-in-my-topic-model",
    "href": "analysis/01c_WB_project_pdo_feat_class.html#include-independent-variables-in-my-topic-model",
    "title": "WB Project PDO features classification",
    "section": "/include independent variables in my topic model?",
    "text": "/include independent variables in my topic model?\nhttps://bookdown.org/valerie_hase/TextasData_HS2021/tutorial-13-topic-modeling.html#how-do-i-include-independent-variables-in-my-topic-model\nCompare PDO text v. project METADATA [CMPL 🟠]\nUsing NLP models trained on document metadata and structure can be combined with text analysis to improve classification accuracy.\nSTEPS\n\nUse document text (abstracts) as features to train a supervised machine learning model. The labeled data (documents with sector tags) will serve as training data, and the model can predict the missing sector tags for unlabeled documents.\nTEXT preprocessing (e.g. tokenization, lemmatization, stopword removal, TF-IDF)\n\nConvert the processed text into a numerical format using Term Frequency-Inverse Document Frequency (TF-IDF), which gives more weight to terms that are unique to a document but less frequent across the entire corpus.\n\n\nDefine data features, e.g.\n\nDocument Length: Public sector documents might be longer, more formal.\nPresence of Certain Keywords: Use specific keywords that correlate with either the public or private sector.\nSector Tags: In documents where the “sector tag” is present, you can use it as a feature for training.\n\n\nPredicting Missing Sector Tags (Classification):\n\nUse models like: Logistic Regression: For a binary classification (e.g., public vs. private). Random Forest or XGBoost: If you have a more complex tagging scheme (e.g., multiple sector categories).\nCross-validation: Ensure the model generalizes well by validating with the documents that already have the sector tag filled in.\nEvaluate the model: Use metrics like accuracy, precision, recall, and F1 score to evaluate the model’s performance.\n\n\n\n\n# #| eval: FALSE\n# #| echo: FALSE\n# library(tidytext) # Text Mining using 'dplyr', 'ggplot2', and Other Tidy Tools\n# library(dplyr) # A Grammar of Data Manipulation\n# library(tidyr) # Tidy Messy Data\n# library(caret) # Classification and Regression Training # Classification and Regression Training\n# \n# # ----- 1. Tokenization and stopwords removal using tidytext.\n# # Assuming df is your dataframe with \"abstract\" and \"sector_tag\"\n# # Tokenize the text and remove stopwords\n# tidy_abstracts &lt;- df %&gt;%\n#   unnest_tokens(word, abstract) %&gt;%\n#   anti_join(stop_words)  # Remove stopwords\n# \n# # Optional: Apply stemming (you can also use `SnowballC` if you prefer)\n# tidy_abstracts &lt;- tidy_abstracts %&gt;%\n#   mutate(word = SnowballC::wordStem(word))\n# \n# # ----- 2. Document-term matrix or TF-IDF calculation using bind_tf_idf().\n# # Create a term-frequency matrix\n# abstract_dtm &lt;- tidy_abstracts %&gt;%\n#   count(document_id = row_number(), word) %&gt;%  # Assuming each row is a document\n#   cast_dtm(document_id, word, n)\n# \n# # Alternatively, use TF-IDF weighting\n# abstract_tfidf &lt;- tidy_abstracts %&gt;%\n#   count(document_id = row_number(), word) %&gt;%\n#   bind_tf_idf(word, document_id, n)\n# \n# # ----- 3. Model training using caret (Random Forest, Logistic Regression, etc.).\n# # Split data into training (with sector tags) and testing (missing sector tags)\n# train_data &lt;- df[!is.na(df$sector_tag), ]\n# test_data  &lt;- df[is.na(df$sector_tag), ]\n# \n# # Combine the DFM or TF-IDF with the training dataset\n# train_tfidf &lt;- abstract_tfidf %&gt;%\n#   filter(document_id %in% train_data$row_number()) %&gt;%\n#   spread(word, tf_idf, fill = 0)\n# \n# # Merge with sector tags\n# train_tfidf &lt;- left_join(train_tfidf, train_data, by = c(\"document_id\" = \"row_number\"))\n# \n# # Prepare for machine learning by ensuring you have sector tags in the final dataset\n# \n# # ----- 4. Prediction of missing sector tags based on the trained model.\n# # Random Forest Model\n# model &lt;- train(sector_tag ~ ., data = train_tfidf, method = \"rf\")\n# \n# # Predict missing sector tags for the test data\n# test_tfidf &lt;- abstract_tfidf %&gt;%\n#   filter(document_id %in% test_data$row_number()) %&gt;%\n#   spread(word, tf_idf, fill = 0)\n# \n# # Predict sector tags for the missing observations\n# predicted_tags &lt;- predict(model, newdata = test_tfidf)\n# \n# # Add the predicted sector tags to the original dataset\n# df$sector_tag[is.na(df$sector_tag)] &lt;- predicted_tags\n# \n# # ----- 5. Evaluate and Refine the Model\n# confusionMatrix(predicted_tags, test_data$sector_tag)\n\n— I could see if corresponds to sector flags in the project metadata\nmore missing but more objective!"
  },
  {
    "objectID": "R/Callouts.html",
    "href": "R/Callouts.html",
    "title": "Callouts",
    "section": "",
    "text": "TOOL\n\n\n\n\n\n\n Nerdy Note\n\n\n\n\n\nXXX\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nxxx\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\n\n\nxxx\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\n\n\nxxx\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\n\nxxx\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nxxx"
  }
]